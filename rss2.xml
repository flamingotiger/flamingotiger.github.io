<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>플타 앞발자의 삽질로그</title>
    <link>http://flamingotiger.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프론트엔드 개발 혹은 공부하면서 기록하는 블로그입니다. TypeScript, React를 주로 선호합니다.</description>
    <pubDate>Wed, 13 Oct 2021 01:42:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>heroku node 서버 배포하기(typescript)</title>
      <link>http://flamingotiger.github.io/backend/devOps/heroku-typescript-nodejs/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/heroku-typescript-nodejs/</guid>
      <pubDate>Tue, 12 Oct 2021 08:05:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;node-js-를-이용해서-heroku-서버-배포하기&quot;&gt;&lt;a href=&quot;#node-js-를-이용해서-heroku-서버-배포하기&quot; class=&quot;headerlink&quot; title=&quot;node js 를 이용해서 heroku 서버 배포하기&quot;&gt;&lt;/a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="node-js-를-이용해서-heroku-서버-배포하기"><a href="#node-js-를-이용해서-heroku-서버-배포하기" class="headerlink" title="node js 를 이용해서 heroku 서버 배포하기"></a>node js 를 이용해서 heroku 서버 배포하기</h1><h2 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir heroku-nodejs-typescript</span><br><span class="line">cd heroku-nodejs-typescript</span><br></pre></td></tr></table></figure><h2 id="초기-설정"><a href="#초기-설정" class="headerlink" title="초기 설정"></a>초기 설정</h2><p>npm 기본 설정값을 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="npm-패키지-설치"><a href="#npm-패키지-설치" class="headerlink" title="npm 패키지 설치"></a>npm 패키지 설치</h2><p>타입스크립트를 포함하여 express를 설치하여 줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @types/express @types/node express nodemon ts-node typescript</span><br></pre></td></tr></table></figure><h2 id="타입스크립트-설정"><a href="#타입스크립트-설정" class="headerlink" title="타입스크립트 설정"></a>타입스크립트 설정</h2><p>tsc 커맨드가 안먹힌다면, typescript를 설치하여 줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p>타입스크립트 설정 파일을 생성해줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>설정파일이 완료되었다면 tsconfig.json 파일에서 root 바로 밑에 값을 넣어줍니다.<br>include는 src내부의 ts확장자로 끝나는 파일들을 컴파일 하겠다는 설정입니다.<br>exclude는 gitignore처럼 컴파일을 하지 않는 것입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"include" : [</span><br><span class="line">    "src/**/*.ts"</span><br><span class="line">],</span><br><span class="line">"exclude" : [</span><br><span class="line">    "node_modules"</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="package-json-설정"><a href="#package-json-설정" class="headerlink" title="package.json 설정"></a>package.json 설정</h2><p>package.json에 스크립트와 엔진을 넣어줍니다.<br>engines에는 node와 npm버전을 입력해주면 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 버전 확인 방법</span></span><br><span class="line">npm -v # 6.14.12</span><br><span class="line">node -v # v14.16.1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "ts-node src/index.ts",</span><br><span class="line">    "dev": "nodemon -x ts-node src/index.ts"</span><br><span class="line">&#125;,</span><br><span class="line">"engines": &#123;</span><br><span class="line">    "node": "v14.16.1",</span><br><span class="line">    "npm": "6.14.12"</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br></pre></td></tr></table></figure><p><code>@types</code> 파일들은 모두 devDependencies에서 dependencies로 설치를 해주어야합니다. 아니면 서버 올리고 컴파일 에러가 발생합니다.</p><h2 id="src-index-ts-생성"><a href="#src-index-ts-생성" class="headerlink" title="src/index.ts 생성"></a>src/index.ts 생성</h2><p>src 폴더를 만들고 그 내부에 index.ts 파일을 생성합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">"express"</span>;</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT: <span class="built_in">string</span> | <span class="built_in">number</span> = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">"*"</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">"&lt;h1&gt;서버가 실행되었습니다.&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`server port: <span class="subst">$&#123;PORT&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>로컬 서버 테스트는 <code>npm run dev</code>로 하면됩니다.</p><h2 id="heroku-deploy"><a href="#heroku-deploy" class="headerlink" title="heroku deploy"></a>heroku deploy</h2><p>heroku에 가입과 <a href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install" rel="external nofollow noopener noreferrer" target="_blank">heroku cli 설치</a>는 완료되었다는 전제하에 진행합니다.<br>heroku에 배포해보도록 하겠습니다. 배포하는 방법은 정말 간단합니다.</p><h2 id="heroku-로그인"><a href="#heroku-로그인" class="headerlink" title="heroku 로그인"></a>heroku 로그인</h2><p>프로젝트 내부에서 다음 명령어를 입력하면 브라우저가 열리고 로그인할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku login</span><br></pre></td></tr></table></figure><h2 id="heroku-create"><a href="#heroku-create" class="headerlink" title="heroku create"></a>heroku create</h2><p>heroku 사이트에서 생성을 하거나 다음 명령어를 입력해서 app을 생성할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">heroku create</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">heroku create [앱이름]</span><br></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init .</span><br><span class="line">git add .</span><br><span class="line">git commit -m "heroku setup"</span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>heroku 서버에 배포합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push heroku main</span><br></pre></td></tr></table></figure><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>nodejs를 통해서 heroku 배포를 해보았습니다.<br>heroku가 무료로 제공하기에 소규모의 개인사이트를 만들떈 적합했습니다.<br>배포하는 과정은 aws보다 비교적 쉬웠습니다.</p><h2 id="heroku-명령어-요약"><a href="#heroku-명령어-요약" class="headerlink" title="heroku 명령어 요약"></a>heroku 명령어 요약</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 헤로쿠 생성</span></span><br><span class="line">heroku create</span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">heroku create [앱이름]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 사이트에서는 master로 되어있지만 기본적으로 main으로 바뀜</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 배포할 브런치를 push 및 배포</span></span><br><span class="line">git push heroku main</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 터미널에 해당되는 프로젝트 브라우저 열기</span></span><br><span class="line">heroku open</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 현재 리모트 상태</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 앱이름에 해당하는 사이트로 remote 변환</span></span><br><span class="line">heroku git:remote -a [앱이름]</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/heroku-typescript-nodejs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Styled-components Typescript 적용하기 (+Media query)</title>
      <link>http://flamingotiger.github.io/style/styled-components-typescript/</link>
      <guid>http://flamingotiger.github.io/style/styled-components-typescript/</guid>
      <pubDate>Fri, 30 Apr 2021 03:37:34 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;기존에 &lt;a href=&quot;https://flamingotiger.github.io/style/styled-comp
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>기존에 <a href="https://flamingotiger.github.io/style/styled-components-responsive/">styled-components 반응형 및 스타일 리셋 설정하기 포스트</a>을 통해서 스타일 최초 설정해보았습니다.</p><p><code>theme</code>를 입력했을때 typescript로 자동으로 연결해주는 부분이 미흡했습니다. 타입스크립트를 styled-components 와 제대로 사용해보도록 하겠습니다.</p><h2 id="설치하기"><a href="#설치하기" class="headerlink" title="설치하기"></a>설치하기</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i styled-components &amp;&amp; npm i -D <span class="meta">@types</span>/styled-components</span><br></pre></td></tr></table></figure><p>styled components를 설치해줍니다.</p><h2 id="초기설정"><a href="#초기설정" class="headerlink" title="초기설정"></a>초기설정</h2><h3 id="테마설정"><a href="#테마설정" class="headerlink" title="테마설정"></a>테마설정</h3><p>테마로 사용할 폰트, 색상, 레이아웃 등을 선언해줍니다.</p><figure class="highlight typescript"><figcaption><span>src/styles/theme.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = &#123;</span><br><span class="line">  white: <span class="string">"white"</span>,</span><br><span class="line">  black: <span class="string">"black"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> theme = &#123;</span><br><span class="line">  color,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Theme = <span class="keyword">typeof</span> theme;</span><br></pre></td></tr></table></figure><p>테마를 불러올수 있게 ThemeProvider로 App을 감싸줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; theme &#125; from &apos;./styles/theme.ts&apos;;</span><br><span class="line">import &#123; ThemeProvider &#125; from &apos;styled-components&apos;;</span><br><span class="line"></span><br><span class="line">//...</span><br><span class="line">&lt;ThemeProvider theme=&#123;theme&#125;&gt;</span><br><span class="line">    &lt;App/&gt;</span><br><span class="line">&lt;/ThemeProvider&gt;</span><br><span class="line">//...</span><br></pre></td></tr></table></figure><p><img src="/image/style/styled-components-typescript_0.png" alt="타입정의 이전"></p><p>이것만으로 테마를 사용할수는 있습니다만, 타입스크립트를 제대로 사용하기 위해서는 styled.d.ts를 입력해주어야합니다. styled.d.ts를 정의 해주면 다음과 같습니다.</p><p><img src="/image/style/styled-components-typescript_1.png" alt="타입정의 이후"></p><p>자동완성이나 어떤값이 들어가는지 미리 확인할 수 있기때문에 더욱 styled-components를 사용하기 쉬워집니다.</p><h3 id="styled-d-ts"><a href="#styled-d-ts" class="headerlink" title="styled.d.ts"></a>styled.d.ts</h3><p>정의하는 방법은 정말로 간단합니다.</p><figure class="highlight typescript"><figcaption><span>src/typing/styled.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Theme &#125; <span class="keyword">from</span> <span class="string">"../styles/theme"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CSSProp &#125; <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "styled-components" &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line @typescript-eslint/no-empty-interface</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> DefaultTheme <span class="keyword">extends</span> Theme &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "react" &#123;</span><br><span class="line">  <span class="keyword">interface</span> Attributes &#123;</span><br><span class="line">    css?: CSSProp | CSSObject;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>// eslint-disable-next-line @typescript-eslint/no-empty-interface</code> 이 부분은 린트에서 에러가 날때 타입이 {} 빈값으로 되어있는 룰을 무시해주는 역할을 합니다.</p><p><code>declare modlue &quot;react&quot;~~~</code>는 코드를 다음과 같이 쉽게 사용하기 위해 초기 설정을 해준것 입니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components/macro"</span>;</span><br><span class="line"></span><br><span class="line">&lt;div</span><br><span class="line">  css=&#123;<span class="string">`</span></span><br><span class="line"><span class="string">    border: 1px solid red;</span></span><br><span class="line"><span class="string">  `</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">  Test</span><br><span class="line">&lt;<span class="regexp">/div&gt;;</span></span><br></pre></td></tr></table></figure><p><code>styled.d.ts</code>파일에서 정의해주는 역할을 합니다.</p><h2 id="Media-query-반응형"><a href="#Media-query-반응형" class="headerlink" title="Media query 반응형"></a>Media query 반응형</h2><p>타입정의를 하고 나면 <a href="https://flamingotiger.github.io/style/styled-components-responsive/">styled-components 반응형 및 스타일 리셋 설정하기 포스트</a>에서 사용한 코드에서 에러가 나는 것을 확인할수 있습니다.</p><p><img src="/image/style/styled-components-typescript_2.png" alt="에러"></p><p>기존에 작성했던 코드를 수정 혹은 새로 작성하겠습니다.</p><figure class="highlight typescript"><figcaption><span>src/styles/media.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CSSProp, css &#125; <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MediaQueryProps = &#123;</span><br><span class="line">  mobile: <span class="built_in">number</span>;</span><br><span class="line">  tablet: <span class="built_in">number</span>;</span><br><span class="line">  desktop: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sizes: MediaQueryProps = &#123;</span><br><span class="line">  mobile: <span class="number">580</span>,</span><br><span class="line">  tablet: <span class="number">768</span>,</span><br><span class="line">  desktop: <span class="number">1284</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // Iterate through the sizes and create a media template</span></span><br><span class="line"><span class="keyword">type</span> BackQuoteArgs = <span class="built_in">string</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> media = &#123;</span><br><span class="line">  mobile: (literals: TemplateStringsArray, ...args: BackQuoteArgs): <span class="function"><span class="params">CSSProp</span> =&gt;</span></span><br><span class="line">    css`<span class="css"></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> only screen and (max-width: </span><span class="subst">$&#123;sizes.mobile&#125;</span><span class="css">px) &#123;</span></span><br><span class="line"><span class="css">        </span><span class="subst">$&#123;css(literals, ...args)&#125;</span><span class="css"></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    `</span>,</span><br><span class="line">  tablet: (literals: TemplateStringsArray, ...args: BackQuoteArgs): <span class="function"><span class="params">CSSProp</span> =&gt;</span></span><br><span class="line">    css`<span class="css"></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> only screen and (max-width: </span><span class="subst">$&#123;sizes.tablet&#125;</span><span class="css">px) &#123;</span></span><br><span class="line"><span class="css">        </span><span class="subst">$&#123;css(literals, ...args)&#125;</span><span class="css"></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    `</span>,</span><br><span class="line">  desktop: (literals: TemplateStringsArray, ...args: BackQuoteArgs): <span class="function"><span class="params">CSSProp</span> =&gt;</span></span><br><span class="line">    css`<span class="css"></span></span><br><span class="line"><span class="css">      @<span class="keyword">media</span> only screen and (max-width: </span><span class="subst">$&#123;sizes.desktop&#125;</span><span class="css">px) &#123;</span></span><br><span class="line"><span class="css">        </span><span class="subst">$&#123;css(literals, ...args)&#125;</span><span class="css"></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    `</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> Record&lt;</span><br><span class="line">  keyof <span class="keyword">typeof</span> sizes,</span><br><span class="line">  (l: TemplateStringsArray, ...p: BackQuoteArgs) =&gt; CSSProp</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> media;</span><br></pre></td></tr></table></figure><p>이후 테마에 연결을 해주도록 합니다.</p><figure class="highlight typescript"><figcaption><span>src/styles/theme.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> media <span class="keyword">from</span> <span class="string">"./media"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color = &#123;</span><br><span class="line">  white: <span class="string">"white"</span>,</span><br><span class="line">  black: <span class="string">"black"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> theme = &#123;</span><br><span class="line">  color,</span><br><span class="line">  media,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Theme = <span class="keyword">typeof</span> theme;</span><br></pre></td></tr></table></figure><p>이후 사용해보면 정상적으로 작동하는 것을 알 수 있습니다.</p><p><img src="/image/style/styled-components-typescript_3.png" alt="결과"></p><h2 id="회고"><a href="#회고" class="headerlink" title="회고"></a>회고</h2><p>styled-components에 styled.d.ts를 적용하면 media적용시에 <code>TemplateStringsArray 부분이 에러</code>가 발생했는데 검색으로도 해결하기 힘든 문제였습니다. 구글 검색과 새 프로젝트를 만들어 하나하나 분석해가면서 해보니 해결할 수 있었습니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/style/styled-components-typescript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Favicon 웹사이트에 적용하기</title>
      <link>http://flamingotiger.github.io/etc/etc/favicon/</link>
      <guid>http://flamingotiger.github.io/etc/etc/favicon/</guid>
      <pubDate>Fri, 30 Apr 2021 03:36:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;파비콘(favicon)이라는 명칭으로 웹사이트 상단 탭에 나오는 아이콘 혹은 브라우저 어플 아이콘등을 뜻합니다.
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>파비콘(favicon)이라는 명칭으로 웹사이트 상단 탭에 나오는 아이콘 혹은 브라우저 어플 아이콘등을 뜻합니다.<br>주로 웹사이트를 대표하는 로고를 많이 사용합니다.</p><h2 id="Favicon-만들기"><a href="#Favicon-만들기" class="headerlink" title="Favicon 만들기"></a>Favicon 만들기</h2><p>로고파일(png, jpg등)을 준비해줍니다.<br>파비콘 파일을 만들어 주는 <a href="https://www.favicon-generator.org/" rel="external nofollow noopener noreferrer" target="_blank">Favicon Generator</a>사이트로 이동합니다.<br><img src="/image/etc/etc/favicon_0.png" alt="Favicon Generator 사이트"></p><p>파일 등록 버튼을 눌러 파일을 업로드 합니다.<br>이후 Create favicon 버튼을 클릭하여 favicon 파일을 만듭니다. </p><p><img src="/image/etc/etc/favicon_1.png" alt="Favicon 제작"><br>다음과 같은 페이지가 나옵니다.<br>Download the generated favicon 링크를 클릭하여 다운로드를 받고 하단의 html 태그들을 복사합니다.</p><h3 id="적용하기"><a href="#적용하기" class="headerlink" title="적용하기"></a>적용하기</h3><p>파일을 프로젝트 내부에 저장하고, 사용하고자하는 페이지 상단 head 부분에 복사한 태그를 넣어줍니다.<br>리액트 프로젝트의 경우 <code>public/index.html</code> 파일의 head 부분에 태그를 붙여넣기 해줍니다.<br>그러면 다음과 같이 적용이 완료됩니다.<br><img src="/image/etc/etc/favicon_2.png" alt="최종 결과물"></p><p>에</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/etc/etc/favicon/#disqus_thread</comments>
    </item>
    
    <item>
      <title>리액트 프로젝트에 폰트추가</title>
      <link>http://flamingotiger.github.io/frontend/react/react-add-font/</link>
      <guid>http://flamingotiger.github.io/frontend/react/react-add-font/</guid>
      <pubDate>Wed, 07 Apr 2021 07:29:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;리액트 프로젝트에서 폰트를 추가 하는 방법을 알아보겠습니다.&lt;br&gt;구글 폰트에서 링크를 통해 적용하는 방법과 폰
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>리액트 프로젝트에서 폰트를 추가 하는 방법을 알아보겠습니다.<br>구글 폰트에서 링크를 통해 적용하는 방법과 폰트를 다운로드해서 프로젝트에 적용하는 방법이 있습니다.</p><ul><li><a href="#구글-웹폰트를-통해서-적용하기">구글 웹폰트를 통해서 적용하기</a></li><li><a href="#프로젝트에-직접-적용하기">프로젝트에 직접 적용하기</a></li></ul><h2 id="구글-웹폰트를-통해서-적용하기"><a href="#구글-웹폰트를-통해서-적용하기" class="headerlink" title="구글 웹폰트를 통해서 적용하기"></a>구글 웹폰트를 통해서 적용하기</h2><p><a href="https://fonts.google.com/" rel="external nofollow noopener noreferrer" target="_blank">구글 폰트 사이트</a>에 접속해서 마음에 드는 폰트를 찾습니다.</p><p><img src="/image/frontend/react/react-add-font-0.png" alt="구글폰트"></p><p>폰트를 찾았다면 해당 폰트를 선택하고 하단에 +버튼을 클릭해 선택합니다.</p><p><img src="/image/frontend/react/react-add-font-1.png" alt="폰트선택"></p><p>폰트 선택을 하고 나면 link와 @import를 사용할 수 있습니다.</p><p><img src="/image/frontend/react/react-add-font-2.png" alt="import"></p><h2 id="프로젝트에-직접-적용하기"><a href="#프로젝트에-직접-적용하기" class="headerlink" title="프로젝트에 직접 적용하기"></a>프로젝트에 직접 적용하기</h2><h3 id="폰트-설치하기"><a href="#폰트-설치하기" class="headerlink" title="폰트 설치하기"></a>폰트 설치하기</h3><p><a href="https://fonts.google.com/" rel="external nofollow noopener noreferrer" target="_blank">구글 폰트 사이트</a>에 접속해서 마음에 드는 폰트를 찾습니다.</p><p>폰트를 선택한 이후 우측 상단에 다운로드 버튼을 클릭해 파일을 다운받습니다.<br>파일 압축을 풀면 내부에 ttf파일들이 있습니다.</p><p><img src="/image/frontend/react/react-add-font-3.png" alt="download ttf"></p><p>다른 브라우저에서 제대로 폰트가 나오려면 파일들을 woff eot파일로 변환을 해주는 과정이 필요합니다.</p><p><a href="https://anyconv.com/ko/ttf-to-eot-byeonhwangi/" rel="external nofollow noopener noreferrer" target="_blank">any conv 폰트 변환 사이트</a>로 접속해서 파일들을 업로드 합니다.</p><p><img src="/image/frontend/react/react-add-font-4.png" alt="any conv사이트"></p><p>파일을 업로드한후 변환하고자 하는 타입으로 설정을 변경합니다.<br><img src="/image/frontend/react/react-add-font-5.png" alt="타입 변경"></p><p>파일 변환이 완료되었으면 다운로드를 한 이후 파일명을 변경해줍니다.<br><img src="/image/frontend/react/react-add-font-6.png" alt="변환 완료"></p><h3 id="프로젝트에-설정하기"><a href="#프로젝트에-설정하기" class="headerlink" title="프로젝트에 설정하기"></a>프로젝트에 설정하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">    └── static/</span><br><span class="line">        ├── images</span><br><span class="line">        └── fonts/</span><br><span class="line">            ├── Roboto-Regular.ttf</span><br><span class="line">            ├── Roboto-Regular.woff</span><br><span class="line">            ├── Roboto-Regular.eot</span><br><span class="line">            └── font.css</span><br></pre></td></tr></table></figure><p>폰트를 프로젝트의 <code>src/static/fonts</code> 폴더에 넣어 줍니다. 파일 경로는 이미지와 같이 정적 파일들을 저장하는 폴더에 넣으면 됩니다.</p><p><a href="https://cssreference.io/property/font-weight/" rel="external nofollow noopener noreferrer" target="_blank">폰트 굵기</a>에 대한 숫자 입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Font Weight</span><br><span class="line">100 Thin</span><br><span class="line">200 Extra Light</span><br><span class="line">300 Light</span><br><span class="line">400 Normal</span><br><span class="line">500 Medium</span><br><span class="line">600 Semi Bold</span><br><span class="line">700 Bold</span><br><span class="line">800 Extra Bold</span><br><span class="line">900 Ultra Bold</span><br></pre></td></tr></table></figure><p><code>static/fonts</code>파일 내부에 css파일을 생성하고 다음과 같이 작성합니다.</p><figure class="highlight css"><figcaption><span>font.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="comment">/* 사용할 폰트의 이름 */</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Roboto"</span>;</span><br><span class="line">  <span class="attribute">font-display</span>: fallback;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  src: 사용할 폰트의 위치 및 형식 </span></span><br><span class="line"><span class="comment">     Safari, Android, iOS =&gt; ttf</span></span><br><span class="line"><span class="comment">     Modern Browsers =&gt; woff</span></span><br><span class="line"><span class="comment">     IE6-IE8 =&gt; eot</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"./Roboto-Regular.ttf"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>), <span class="built_in">url</span>(<span class="string">"./Roboto-Regular.woff"</span>)</span><br><span class="line">      <span class="built_in">format</span>(<span class="string">"woff"</span>), <span class="built_in">url</span>(<span class="string">"./Roboto-Regular.eot?iefix"</span>) <span class="built_in">format</span>(<span class="string">"embedded-opentype"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 사용할 폰트의 기본 스타일 */</span></span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eot부분에 <code>#iefix</code>을 입력해주는 이유는 IE6~8의 경우 format()구문을 인식하지 못하기 때문에 삽입한 것입니다.</p><p>이후 최상단 루트 파일에 다음 css를 불러옵니다.</p><figure class="highlight javascript"><figcaption><span>src/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./static/fonts/font.css"</span>;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>이후 css에서 다음과 같은 코드를 입력하면 폰트가 적용됩니다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Roboto"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>두가지 방법으로 폰트를 설정할 수 있습니다. 글꼴파일 용량이 크거나 사이트에 추가적인 HTTP요청이 들어갈 수도 있기에 웹 사이트 로드 속도가 늦어질 수 있습니다. 글꼴을 꼭 사용해야 하는지 잘 고려해야합니다. </p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/react/react-add-font/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Rollup을 사용해서 npm 배포하기</title>
      <link>http://flamingotiger.github.io/frontend/DevEnv/rollup-setup/</link>
      <guid>http://flamingotiger.github.io/frontend/DevEnv/rollup-setup/</guid>
      <pubDate>Wed, 07 Apr 2021 07:22:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;제작중인 라이브러리를 npm에 배포하는 방법입니다.&lt;br&gt;webpack 도구와는 조금 다른 rollup을 사용해
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>제작중인 라이브러리를 npm에 배포하는 방법입니다.<br>webpack 도구와는 조금 다른 rollup을 사용해서 번들링 하도록 하려고 합니다.<br>webpack을 쓸 수도 있는데 rollup을 쓰는 이유는 webpack은 ES Module 형태로 번들을 할 수 없습니다.<br>webpack을 사용 할 때에는 일반적으로 commonjs 형태로 번들링을 하게 됩니다<br>commonjs로 번들링한 라이브러리를 나중에 다른 프로젝트에서 사용하게 되면 <code>Tree-shaking</code>이 지원되지 않습니다.</p><h2 id="간단요약"><a href="#간단요약" class="headerlink" title="간단요약"></a>간단요약</h2><p>webpack은 웹 어플리케이션을 제작시 주로 사용하고<br>rollup은 라이브러리 제작시 사용합니다.<br>lerna는 라이브러리를 패키지 분리할때 사용합니다.<br>lerna예시로는 @name/blabl, @name/blabla1 와 같이 사용합니다.</p><h2 id="설치하기"><a href="#설치하기" class="headerlink" title="설치하기"></a>설치하기</h2><p>rollup 패키지를 설치하겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D rollup @rollup/plugin-node-resolve @rollup/plugin-commonjs rollup-plugin-terser @rollup/plugin-url @rollup/plugin-image rollup-plugin-typescript2 rollup-plugin-peer-deps-external rollup-plugin-sourcemaps @rollup/plugin-babel @svgr/rollup</span><br></pre></td></tr></table></figure><ul><li><strong>rollup</strong>: rollup 패키지 입니다.</li><li><strong>@rollup/plugin-node-resolve</strong>: node_modules에서 써드파티 모듈을 사용하는 용도로 사용합니다.</li><li><strong>@rollup/plugin-commonjs</strong>: CommonJS 모듈을 ES6으로 변환하는 롤업 플러그인입니다.</li><li><strong>rollup-plugin-terser</strong>: 생성 된 es 번들을 최소화하기위한 롤업 플러그인 후드 아래에서 terser 를 사용합니다.</li><li><strong>@rollup/plugin-url</strong>: 파일을 데이터 URI 또는 ​​ES모듈로 가져오는 롤업 플러그인입니다.</li><li><strong>@rollup/plugin-image</strong>: JPG, PNG, GIF, SVG 및 WebP 파일을 가져 오는 롤업 플러그인입니다.</li><li><strong>rollup-plugin-typescript2</strong>: 타입스크립트를 지원합니다.</li><li><strong>rollup-plugin-peer-deps-external</strong>: peerDependency로 설치된 라이브러리의 코드가 번들링된 결과에 포함되지 않고, import 구문으로 불러와서 사용할 수 있게 해주는 플러그인입니다.</li><li><strong>rollup-plugin-sourcemaps</strong>: rollup으로 번들하기 전에 소스 맵으로 파일을 변환합니다.</li><li><strong>@rollup/plugin-babel</strong>: rollup에서 babel 을 사용 할 수 있게 해주는 플러그인입니다. <em>rollup-plugin-babel은 deprecated되었습니다.</em></li></ul><h2 id="설정하기"><a href="#설정하기" class="headerlink" title="설정하기"></a>설정하기</h2><p>패키지가 모두 설치가 완료되었습니다.<br>이제 rollup 설정을 해보도록 하겠습니다.</p><h3 id="peerDependency-설정하기"><a href="#peerDependency-설정하기" class="headerlink" title="peerDependency 설정하기"></a>peerDependency 설정하기</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --peer react react-dom styled-components</span><br></pre></td></tr></table></figure><p>react, react-dom, styled-components을 peer로 설치해주도록 합니다.</p><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"peerDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.12.0"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^16.12.0"</span>,</span><br><span class="line">    <span class="string">"styled-components"</span>: <span class="string">"^5.0.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rollup-config-js-설정하기"><a href="#rollup-config-js-설정하기" class="headerlink" title="rollup.config.js 설정하기"></a>rollup.config.js 설정하기</h3><p>rollup.config.js 파일을 생성후 설정해주도록 합니다</p><figure class="highlight javascript"><figcaption><span>rollup.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">"@rollup/plugin-commonjs"</span>;</span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">"rollup-plugin-typescript2"</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">"@rollup/plugin-node-resolve"</span>;</span><br><span class="line"><span class="keyword">import</span> svgr <span class="keyword">from</span> <span class="string">"@svgr/rollup"</span>;</span><br><span class="line"><span class="keyword">import</span> image <span class="keyword">from</span> <span class="string">"@rollup/plugin-image"</span>;</span><br><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">"@rollup/plugin-url"</span>;</span><br><span class="line"><span class="keyword">import</span> peerDepsExternal <span class="keyword">from</span> <span class="string">"rollup-plugin-peer-deps-external"</span>;</span><br><span class="line"><span class="keyword">import</span> sourcemaps <span class="keyword">from</span> <span class="string">"rollup-plugin-sourcemaps"</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">"@rollup/plugin-babel"</span>;</span><br><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">"./package.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> extensions = [<span class="string">".js"</span>, <span class="string">".jsx"</span>, <span class="string">".ts"</span>, <span class="string">".tsx"</span>];</span><br><span class="line"><span class="keyword">const</span> external = [<span class="string">"react"</span>, <span class="string">"react-dom"</span>, <span class="string">"styled-components"</span>];</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  input: pkg.source,</span><br><span class="line">  output: [</span><br><span class="line">    &#123;</span><br><span class="line">      sourcemap: <span class="literal">true</span>,</span><br><span class="line">      file: pkg.main,</span><br><span class="line">      format: <span class="string">"cjs"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      sourcemap: <span class="literal">true</span>,</span><br><span class="line">      file: pkg.module,</span><br><span class="line">      format: <span class="string">"esm"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    external,</span><br><span class="line">    plugins: [</span><br><span class="line">      resolve(&#123; extensions &#125;),</span><br><span class="line">      babel(&#123; <span class="attr">exclude</span>: <span class="string">"node_modules/**"</span> &#125;),</span><br><span class="line">      commonjs(&#123; <span class="attr">include</span>: <span class="string">"node_modules/**"</span> &#125;),</span><br><span class="line">      typescript(&#123; <span class="attr">tsconfig</span>: <span class="string">"./tsconfig.json"</span>, <span class="attr">clean</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">      svgr(),</span><br><span class="line">      image(),</span><br><span class="line">      url(),</span><br><span class="line">      peerDepsExternal(),</span><br><span class="line">      sourcemaps(),</span><br><span class="line">      del(&#123; <span class="attr">targets</span>: [<span class="string">"dist/*"</span>] &#125;),</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure><h2 id="tsconfig-json-설정"><a href="#tsconfig-json-설정" class="headerlink" title="tsconfig.json 설정"></a>tsconfig.json 설정</h2><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"dom"</span>, <span class="string">"dom.iterable"</span>, <span class="string">"esnext"</span>],</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"declarationDir"</span>: <span class="string">"./dist"</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist"</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitThis"</span>: <span class="literal">false</span> /* Raise error on 'this' expressions with an implied 'any' type. */,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"src"</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"forceConsistentCasingInFileNames"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [<span class="string">"src"</span>],</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"dist"</span>, <span class="string">"**/*.stories.tsx"</span>, <span class="string">"cypress"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="package-json-및-모듈-설정"><a href="#package-json-및-모듈-설정" class="headerlink" title="package.json 및 모듈 설정"></a>package.json 및 모듈 설정</h2><p><code>package.json</code> 과 내보낼 모듈을 설정해주어야합니다.</p><figure class="highlight typescript"><figcaption><span>src/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Rfdd <span class="keyword">from</span> <span class="string">"./view/Rfdd"</span>;</span><br><span class="line"><span class="keyword">import</span> RfddOption <span class="keyword">from</span> <span class="string">"./view/RfddOption"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; Rfdd, RfddOption &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 혹은</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Rfdd &#125; <span class="keyword">from</span> <span class="string">"./view.Rfdd"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> RfddOption &#125; <span class="keyword">from</span> <span class="string">"./view/RfddOption"</span>;</span><br></pre></td></tr></table></figure><p><code>package.json</code>파일을 수정 하겠습니다.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"react-free-dropdown"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Easy custom dropdown list with React"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist/react-free-dropdown.js"</span>,</span><br><span class="line">  <span class="attr">"types"</span>: <span class="string">"dist/index.d.ts"</span>,</span><br><span class="line">  <span class="attr">"sideEffects"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"rollup -c"</span></span><br><span class="line">    //...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+https://github.com/flamingotiger/react-free-dropdown.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"free"</span>, <span class="string">"dropdown"</span>, <span class="string">"custom"</span>, <span class="string">"react.js"</span>, <span class="string">"react"</span>],</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"flamingotiger &lt;hhbhong@gmail.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/flamingotiger/react-free-dropdown/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files"</span>: [<span class="string">"src"</span>, <span class="string">"dist"</span>]</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>: 프로젝트(패키지) 이름을 설정합니다.</li><li><strong>version</strong>: 프로젝트(패키지)의 버전을 설정해주도록 합니다.</li><li><strong>description</strong>: 프로젝트(패키지)의 설명을 지정합니다.</li><li><strong>main</strong>: 프로젝트(패키지)의 기본 진입점(entry point)를 지정합니다.</li><li><strong>module</strong>: 프로젝트(패키지)의 기본 진입점(entry point)를 지정합니다.</li><li><strong>keywords</strong>: 프로젝트(패키지)의 키워드를 배열로 지정합니다.</li><li><strong>types</strong>: 타입스크립트 사용시 기본 진입점(entry point)를 지정합니다.</li><li><strong>license</strong>: 프로젝트(패키지) 사용을 허용하는 방법과 제한 사항을 알 수 있도록 라이센스를 지정합니다.</li></ul><h2 id="npmignore"><a href="#npmignore" class="headerlink" title=".npmignore"></a>.npmignore</h2><p>파일 최상단 루트 폴더에 <code>.gitignore</code>처럼 <code>.npmignore</code>파일을 생성해줍니다.<br>npm에 배포할 필요없는 폴더 혹은 파일을 지정해줍니다.</p><figure class="highlight"><figcaption><span>.npmignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">yarn-error.log</span><br><span class="line">npm-debug.log</span><br><span class="line">npm-debug.log.*</span><br><span class="line">yarn-error.log</span><br><span class="line">yarn.lock</span><br><span class="line">.DS_Store</span><br><span class="line">.vscode</span><br><span class="line">.idea</span><br><span class="line">.github</span><br><span class="line">stories</span><br><span class="line">storybook-static</span><br><span class="line">.storybook</span><br><span class="line">cypress</span><br><span class="line">cypress.json</span><br><span class="line">.npmignore</span><br><span class="line">.babelrc</span><br><span class="line">.eslintrc</span><br><span class="line">jest.config.js</span><br><span class="line">tsconfig.json</span><br><span class="line">.prettierrc</span><br><span class="line">rollup.config.js</span><br><span class="line">rollup.min.config.js</span><br></pre></td></tr></table></figure><h2 id="NPM-배포"><a href="#NPM-배포" class="headerlink" title="NPM 배포"></a>NPM 배포</h2><p>이것으로 배포 준비가 완료되었습니다.</p><h3 id="npm-로그인"><a href="#npm-로그인" class="headerlink" title="npm 로그인"></a>npm 로그인</h3><p><a href="https://www.npmjs.com/" rel="external nofollow noopener noreferrer" target="_blank">npm 공식 홈페이지</a>로 접속해서 로그인 해주도록 합니다.<br>로그인 계정이 없다면 회원가입을 해줍니다.<br>회원가입시 이메일 인증을 필수로 해야합니다.<br><img src="/image/frontend/DevEnv/rollup-npm-deploy_0.png" alt="로그인"></p><h3 id="npm-배포하기"><a href="#npm-배포하기" class="headerlink" title="npm 배포하기"></a>npm 배포하기</h3><p>프로젝트로 돌아와서 npm cli 몇가지를 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd project</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p><code>npm adduser</code> 혹은 <code>npm login</code>을 입력하고 유저이름 비밀번호 그리고 이메일 인증한 이메일도 입력해야합니다.</p><p>로그인이 성공했다면 <code>npm publish</code> 를 입력해줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>배포에서 다음과 같은 에러가 발생시<br><img src="/image/frontend/DevEnv/rollup-npm-deploy_1.png" alt="npm 배포 에러"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --access=public</span><br></pre></td></tr></table></figure><p>커맨드를 입력해줍니다.<br>관련 <a href="https://github.com/snowdreamtech/jweixin/issues/1" rel="external nofollow noopener noreferrer" target="_blank">Github Issue</a></p><p>추가로 로그인이 되어있는지 확인하려면<br><code>npm whoami</code>를 입력해주면 확인할 수 있습니다.</p><p>로그아웃은 <code>npm logout</code>을 입력하면 됩니다.</p><p>이후 사이트를 확인하면 등록이 된 것을 확인할 수 있습니다.<br><img src="/image/frontend/DevEnv/rollup-npm-deploy_2.png" alt="npm 배포완료"></p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/DevEnv/rollup-setup/#disqus_thread</comments>
    </item>
    
    <item>
      <title>flutter에 스타일(margin, padding, border, border-radius) 적용하기</title>
      <link>http://flamingotiger.github.io/frontend/flutter/flutter-style/</link>
      <guid>http://flamingotiger.github.io/frontend/flutter/flutter-style/</guid>
      <pubDate>Mon, 22 Feb 2021 01:42:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;웹에서 엘리먼트에 스타일을 넣으려면 css를 사용하는 것은 대부분 아는 사실입니다. 크로스 플랫폼의 react 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>웹에서 엘리먼트에 스타일을 넣으려면 css를 사용하는 것은 대부분 아는 사실입니다. 크로스 플랫폼의 react native의 경우에는 js와 같은 방식으로 사용합니다. 하지만 사용방법은 크게 다르지 않죠.</p><p>flutter에서는 margin, padding, border, border-radius 등을 어떻게 넣을 수 있을까 사용해보도록 하겠습니다.</p><h2 id="기본"><a href="#기본" class="headerlink" title="기본"></a>기본</h2><p>기본적으로 스타일을 넣기 위해서는 Container 클래스를 이용해야 합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  styles....,</span><br><span class="line">  child:...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Margin"><a href="#Margin" class="headerlink" title="Margin"></a>Margin</h2><p>일반적인 css나 js처럼 <code>margin:30</code> 이런 식으로 작성하면 좋겠지만, flutter에서는 조금 다릅니다.</p><p>다음과 같이 EdgeInsets이라는 클래스를 사용해야 합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  margin: EdgeInsets.only(bottom:<span class="number">10</span>),</span><br><span class="line">  child:...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>EdgeInsets에서 margin을 주는 방법이 있습니다. 기존 css와 비교하면서 몇가지 알아보겠습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전부</span></span><br><span class="line">EdgeInsets.all(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 한 지점만</span></span><br><span class="line">EdgeInsets.only(bottom: <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 좌위 상위 우위 하위</span></span><br><span class="line">EdgeInsets.fromLTRB(left, top, right, bottom)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 가로와 세로</span></span><br><span class="line">EdgeInsets.symmetric(horizontal: <span class="number">20</span>, vertical: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">margin-bottom</span>: 4<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: <span class="selector-tag">top</span> <span class="selector-tag">right</span> <span class="selector-tag">bottom</span> <span class="selector-tag">left</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 10 20 10 20;</span><br></pre></td></tr></table></figure><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>패딩도 margin과 사용법은 같습니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">  child:...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h2><p>Container 클래스에 margin과 padding을 사용했는데, border도 넣고싶다면 다음과 같이 작성하면 됩니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  margin: EdgeInsets.all(<span class="number">4</span>),</span><br><span class="line">  padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    border: Border.all(</span><br><span class="line">        color: Colors.black,</span><br><span class="line">        width: <span class="number">5</span>,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">  child:...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Container의 decoration에 BoxDecoration클래스를 이용해서 border를 넣어줄수 있습니다.</p><h2 id="Border-Radius"><a href="#Border-Radius" class="headerlink" title="Border Radius"></a>Border Radius</h2><p>border radius 는 기존 border 스타일을 넣는 방법과 흡사하게 BoxDecoration을 사용합니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  margin: EdgeInsets.all(<span class="number">4</span>),</span><br><span class="line">  padding: EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    borderRadius: BorderRadius.circular(<span class="number">10</span>)</span><br><span class="line">  )</span><br><span class="line">  child:...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전부 - 방법1</span></span><br><span class="line">BorderRadius.circular(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전부 - 방법2</span></span><br><span class="line">BorderRadius.all(Radius.circular(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 가로만</span></span><br><span class="line">BorderRadius.horizontal(Radius.circular(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 세로만</span></span><br><span class="line">BorderRadius.vertical(Radius.circular(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 한곳만</span></span><br><span class="line">BorderRadius.only(topLeft:Radius.circular(<span class="number">10</span>))</span><br><span class="line"><span class="comment">// topLeft topRight bottomLeft bottomRight</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 여러개 사용예시</span></span><br><span class="line">BorderRadius.only(</span><br><span class="line">  topLeft: Radius.circular(<span class="number">19</span>),</span><br><span class="line">  bottomLeft: Radius.circular(<span class="number">19</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="마지막으로"><a href="#마지막으로" class="headerlink" title="마지막으로"></a>마지막으로</h2><p>margin, padding, border, border radius 를 적용하는 방법을 정리해보았는데 기존 css를 사용하는 벙법과는 많이 달라서 처음에는 혼선이 왔지만, 자동완성기능이나 타입이 정해져 있기때문에 더 깔끔하게 코드를 작성할 수 있어서 좋았습니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/flutter/flutter-style/#disqus_thread</comments>
    </item>
    
    <item>
      <title>flutter에서 bottom Navigation 구현하기</title>
      <link>http://flamingotiger.github.io/frontend/flutter/flutter-bottom-nav/</link>
      <guid>http://flamingotiger.github.io/frontend/flutter/flutter-bottom-nav/</guid>
      <pubDate>Mon, 22 Feb 2021 01:02:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;어플리케이션을 사용해보면 하단에 스크린을 손쉽게 이동할 수 있도록 도와주는 네비게이션이 있습니다. 플러터에서도 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>어플리케이션을 사용해보면 하단에 스크린을 손쉽게 이동할 수 있도록 도와주는 네비게이션이 있습니다. 플러터에서도 이 네비가 탑재가 되어있습니다.</p><p><img src="/image/frontend/flutter/flutter-bottom-nav-0.png" alt="bottom nav"></p><h2 id="구현하기"><a href="#구현하기" class="headerlink" title="구현하기"></a>구현하기</h2><p>기본 MyApp에서 MyBottomNavigationBar 클래스를 MaterialApp 내부 home에 실행시켜주도록 합니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyApp(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'타이틀'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: MyBottomNavigationBar()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _children = &lt;Widget&gt;[</span><br><span class="line">  FavoriteScreen(),</span><br><span class="line">  SearchScreen(),</span><br><span class="line">  SettingScreen(),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>배열 children은 각자 스크린을 가져옵니다. children[0]는 FavoriteScreen, children[1]는 SearchScreen, children[2]는 SettingScreen를 나타냅니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> _selectedIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">    currentIndex: _selectedIndex,</span><br><span class="line">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure><p>현재 선택된 인텍스입니다. 처음 시작하는 인덱스가 0인데 1로 변경을 한다면 1에 해당하는 페이지가 먼저실행됩니다.</p><p>BottomNavigation은 BottomNavigationBar 내부에 BottomNavigationBarItem들이 배열로 들어가 있는 형태입니다. 요약하자면 다음과 같은 형태입니다.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">    body: _children.elementAt(_selectedIndex),</span><br><span class="line">    bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">        BottomNavigationBarItem(...),</span><br><span class="line">        BottomNavigationBarItem(...),</span><br><span class="line">        BottomNavigationBarItem(...),</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>최종 완성된 코드입니다.</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyApp(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'타이틀'</span>,</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: MyBottomNavigationBar()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBottomNavigationBar</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyBottomNavigationBar(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyBottomNavigationBarState createState() =&gt; _MyBottomNavigationBarState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyBottomNavigationBarState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyBottomNavigationBar</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _selectedIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; _children = &lt;Widget&gt;[</span><br><span class="line">    FavoriteScreen(),</span><br><span class="line">    SearchScreen(),</span><br><span class="line">    SettingScreen(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _onItemTapped(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _selectedIndex = index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: SafeArea(child: _children.elementAt(_selectedIndex)),</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">        items: <span class="keyword">const</span> &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">          BottomNavigationBarItem(</span><br><span class="line">            icon: Icon(Icons.favorite, size: <span class="number">40</span>, color: Colors.black),</span><br><span class="line">            activeIcon: Icon(Icons.favorite, size: <span class="number">40</span>, color: Colors.orange),</span><br><span class="line">            label: <span class="string">'Favorite'</span>,</span><br><span class="line">          ),</span><br><span class="line">          BottomNavigationBarItem(</span><br><span class="line">            icon: Icon(Icons.search, size: <span class="number">40</span>, color: Colors.black),</span><br><span class="line">            activeIcon: Icon(Icons.search, size: <span class="number">40</span>, color: Colors.orange),</span><br><span class="line">            label: <span class="string">'search'</span>,</span><br><span class="line">          ),</span><br><span class="line">          BottomNavigationBarItem(</span><br><span class="line">            icon: Icon(Icons.setting, size: <span class="number">40</span>, color: Colors.black),</span><br><span class="line">            activeIcon: Icon(Icons.setting, size: <span class="number">40</span>, color: Colors.orange),</span><br><span class="line">            label: <span class="string">'setting'</span>,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">        currentIndex: _selectedIndex,</span><br><span class="line">        selectedItemColor: Colors.orange,</span><br><span class="line">        showSelectedLabels: <span class="keyword">false</span>,</span><br><span class="line">        showUnselectedLabels: <span class="keyword">false</span>,</span><br><span class="line">        onTap: _onItemTapped,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/flutter/flutter-bottom-nav/#disqus_thread</comments>
    </item>
    
    <item>
      <title>react native android 시작시 adb 에러</title>
      <link>http://flamingotiger.github.io/frontend/ReactNative/react-native-adb-error/</link>
      <guid>http://flamingotiger.github.io/frontend/ReactNative/react-native-adb-error/</guid>
      <pubDate>Mon, 15 Feb 2021 09:53:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;react native에서 시뮬레이터가 켜져 있는 상태인데도 npm run android를 하면 &lt;code&gt;ad
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>react native에서 시뮬레이터가 켜져 있는 상태인데도 npm run android를 하면 <code>adb command not found</code>와 같은 에러가 날때가 있습니다.</p><p>android studio를 설치하면 자동으로 adb가 설치됩니다.<br>react native 프로젝트를 시작할때 에러가 나오는 것은 경로가 설정이 제대로 되어있지 않기 때문입니다.</p><h2 id="해결하기"><a href="#해결하기" class="headerlink" title="해결하기"></a>해결하기</h2><p>mac기준으로 설명하겠습니다.<br>android studio로 react native의 android 폴더를 열어줍니다.<br>다음으로 상단바에서 android studio &gt; Preferences를 엽니다.</p><p>이후 Appearance &amp; Behavior &gt; System Settings를 클릭합니다.<br>다음과 같은 화면에서 <code>Android SDK Location</code> 부분을 복사합니다.</p><p><img src="/image/frontend/ReactNative/react-native-adb-error-0.png" alt="Android SDK Location"></p><p>이후 bash_profile을 수정해줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p><code>i</code>를 눌러 맨 하단에 다음코드를 입력하고, 입력이 완료 되었을시에 <code>wq</code> 커맨드로 저장을 합니다.</p><figure class="highlight shell"><figcaption><span>.bash_profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">export ANDROID_HOME="/Users/flamingotiger/Library/Android/sdk" # Android SDK Location 복사한것 붙여넣기</span><br><span class="line">export PATH="$PATH:$ANDROID_HOME/platform-tools"</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>이후 실행을 하면 에러없이 잘 작동합니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/ReactNative/react-native-adb-error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>flutter(플러터) 초기설정 - mac</title>
      <link>http://flamingotiger.github.io/frontend/flutter/flutter-setup/</link>
      <guid>http://flamingotiger.github.io/frontend/flutter/flutter-setup/</guid>
      <pubDate>Thu, 04 Feb 2021 02:00:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;플러터는 구글이 개발한 오픈소스 크로스 플랫폼 개발 프레임워크입니다.&lt;br&gt;크로스 플랫폼이란 react nati
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>플러터는 구글이 개발한 오픈소스 크로스 플랫폼 개발 프레임워크입니다.<br>크로스 플랫폼이란 react native 와 같이 하나의 개발을 통해 ios, android 개발을 동시에 진행 할 수 있어서 생산성이 높습니다.<br>기존에 react native를 사용해보았기에 flutter와 미약하나마 다른 점을 확인할 수 있었습니다.<br>react native는 자바스크립트 코드를 브릿지를 통해 네이티브 코드로 변환하는데 반해서 flutter는 네이티브로 바로 변환하기에 속도면에서는 더 빠를수 밖에 없습니다.</p><h2 id="flutter-설정"><a href="#flutter-설정" class="headerlink" title="flutter 설정"></a>flutter 설정</h2><p><a href="https://flutter-ko.dev/docs/get-started/install" rel="external nofollow noopener noreferrer" target="_blank">flutter 사이트</a><br>운영체제에 맞는 flutter sdk를 설치 합니다.</p><p><img src="/image/frontend/flutter/flutter-setup-0.png" alt="설치"></p><p>파일 설치하고 설정을 해야합니다.</p><p><img src="/image/frontend/flutter/flutter-setup-1.png" alt="파일 다운로드"></p><p><code>zsh</code>의 경우에는 vi 편집기로 zshrc를 열어서 flutter를 설치한 위치를 다음과 같이 넣어줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/Users/flamingotiger/flutter/bin</span><br></pre></td></tr></table></figure><p>PATH에 “”큰 따옴표는 지우고 입력합니다.<br>저는 다운로드받은 파일을 홈부분에 옮겼습니다.</p><p><code>bash</code>의 경우에는 bash_profile에 넣어줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br><span class="line"></span><br><span class="line">export PATH="$PATH:/Users/flamingotiger/flutter/bin"</span><br></pre></td></tr></table></figure><p>이후 flutter가 작동이 잘하는지 확인합니다.</p><p>설정을 완료하는 데 필요한 플랫폼 의존성이 있는지 확인할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>다음과 같이 필요한 것 혹은 설정완료된 리스트가 나옵니다.</p><p><img src="/image/frontend/flutter/flutter-setup-2.png" alt="설정확인"></p><p>마지막으로 vscode 에디터에서 flutter설정을 해보도록 하겠습니다.<br>extensions에서 flutter를 설치합니다.</p><p><img src="/image/frontend/flutter/flutter-setup-3.png" alt="extensions"></p><p>이것으로 설정이 완료 되었습니다. 다음으로 프로젝트 생성을 해보겠습니다.</p><h2 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h2><p>프로젝트 생성은 아주 간편합니다.<br>다음을 입력하면 간편하게 프로젝트가 생성됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create 프로젝트이름</span><br></pre></td></tr></table></figure><p>프로젝트가 생성이 완료되었다면 다음 커맨드를 입력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 프로젝트이름</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>run을 하게되면 실행중인 시뮬레이터와 연결이 되어 작동합니다.<br>이것으로 간편하게 플러터 프로젝트를 설정해보고 생성까지 해보았습니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/flutter/flutter-setup/#disqus_thread</comments>
    </item>
    
    <item>
      <title>throttle(쓰로틀링) 과 debounce(디바운싱)로 성능 향상 시키기</title>
      <link>http://flamingotiger.github.io/javascript/throttle-debounce/</link>
      <guid>http://flamingotiger.github.io/javascript/throttle-debounce/</guid>
      <pubDate>Tue, 19 Jan 2021 01:12:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;사이트 퍼포먼스를 향상 시키기위해서 사용하는 방법 중 하나입니다. 스크롤 혹은 인풋 박스에서 너무 많은 이벤트를
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>사이트 퍼포먼스를 향상 시키기위해서 사용하는 방법 중 하나입니다. 스크롤 혹은 인풋 박스에서 너무 많은 이벤트를 호출하여 불필요한 메모리를 소모하여 퍼포먼스를 떨어뜨립니다. 이 문제를 해결하기 위한 방법으로 Throttling(쓰로틀링)과 debouncing(디바운싱)이 있습니다.</p><h2 id="기본-개념"><a href="#기본-개념" class="headerlink" title="기본 개념"></a>기본 개념</h2><p>쓰로틀링은 마지막 함수가 호출된 이후 지정한 시간이 지나기 전에 호출되지 않도록 하는 것입니다.<br>디바운싱은 연속적인 함수호출중 마지막 혹은 맨처음 함수가 호출되는 것입니다.</p><h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><p><a href="https://lodash.com/" rel="external nofollow noopener noreferrer" target="_blank">Lodash</a> 혹은 <a href="https://underscorejs.org/" rel="external nofollow noopener noreferrer" target="_blank">underscore</a> 패키지에서 지원하는 Throttle과 Debounce를 사용하겠습니다.<br>npm 기반의 프로젝트로 가정하고 설명을 시작하겠습니다.</p><p>프로젝트에 lodash 패키지를 설치합니다.<br><code>npm i lodash</code><br>그러면 준비가 완료되었습니다.</p><h2 id="Scroll에서-Throttle과-Debounce"><a href="#Scroll에서-Throttle과-Debounce" class="headerlink" title="Scroll에서 Throttle과 Debounce"></a>Scroll에서 Throttle과 Debounce</h2><p>웹사이트 스크롤을 했을때 한번 호출하고자 하나, 이벤트는 수십개가 호출되는 경우가 있습니다. 이 상황에서 쓰로틀링과 디바운싱을 사용해보며 설명하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = &#123;</span><br><span class="line">  normal: <span class="number">1</span>,</span><br><span class="line">  throttle: <span class="number">1</span>,</span><br><span class="line">  debounce: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> normalScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  count = &#123; ...count, <span class="attr">normal</span>: count.normal + <span class="number">1</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> throttleScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  throttle(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count = &#123; ...count, <span class="attr">throttle</span>: count.throttle + <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> debounceScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count = &#123; ...count, <span class="attr">debounce</span>: count.debounce + <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"scroll"</span>, () =&gt; &#123;</span><br><span class="line">  normalScroll();</span><br><span class="line">  throttleScroll();</span><br><span class="line">  debounceScroll();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위와 같은 코드를 통해서 스크롤을 한다면 이벤트 발생시 기본과 쓰로틀링 디바운싱이 서로 다른 시간에 카운트 한다는 것을 알 수 있습니다.</p><p><img src="/image/javascript/throttle-debounce-0.gif" alt="scroll throttle debounce"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttleScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  throttle(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count = &#123; ...count, <span class="attr">throttle</span>: count.throttle + <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>쓰로틀링의 첫번째 인자는 실제로 구동이 될 함수입니다. 두번째 인자는 시간으로, 이벤트 발생하는 동안 500ms같격의 시간에 함수를 호출하겟다는 의미입니다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounceScroll = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count = &#123; ...count, <span class="attr">debounce</span>: count.debounce + <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>디바운싱의 첫번째 인자도 마찬가지로 실제로 구동이 될 함수입니다. 두번째 인자는 시간으로, 쓰로틀링과 달리 이벤트 발생하는 처음 시작했거나 마지막 500ms이후의 시간에 함수를 딱 한번 호출하겟다는 의미입니다.</p><p>다음 인풋에서도 같은 방식으로 사용할 수 있습니다.</p><h2 id="Input에서-Debounce"><a href="#Input에서-Debounce" class="headerlink" title="Input에서 Debounce"></a>Input에서 Debounce</h2><p>input에서 onchange이벤트를 이용하면 자음과 모음을 각자 입력할때마다 이벤트가 호출됩니다.<br>처음, <code>ㄱ, ㄴ, ㅏ</code>와 같이 이러한 각 단위는 실제 검색에서는 유용한 데이터를 불러올 수 없습니다.<br>무의미한 이벤트를 발생시킵니다. 이 부분에서 이벤트를 덜 발생시키기 위해서 Debounce를 사용합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">"lodash"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./input.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Input = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> delaySetValue = useCallback(</span><br><span class="line">    debounce(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      setSearch(value);</span><br><span class="line">    &#125;, <span class="number">500</span>),</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> handleInputChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    delaySetValue(e.currentTarget.value);</span><br><span class="line">    setValue(e.currentTarget.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        className=<span class="string">"input"</span></span><br><span class="line">        type=<span class="string">"text"</span></span><br><span class="line">        placeholder=<span class="string">"Debounce 입력"</span></span><br><span class="line">        value=&#123;value&#125;</span><br><span class="line">        onChange=&#123;handleInputChange&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;p className=<span class="string">"text"</span>&gt;&#123;search&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Input;</span><br></pre></td></tr></table></figure><ul><li>value: Input에 입력되는 부분입니다.</li><li>search: debounce를 통해 이벤트 마지막 500ms이후에 등록됩니다.</li></ul><p><img src="/image/javascript/throttle-debounce-1.gif" alt="input debounce"></p><p>이것으로 input과 scroll에서 throttle과 debounce를 사용하는 방법을 알아 보았습니다.<br>방금 작성한 예시외에도 다양한 부분에서 throttle 및 debounce를 사용할 수 있습니다. 적절하게 사용하면 api call 횟수가 줄거나 이벤트 호출이 줄어 메모리 절약에 많은 도움이 될 것입니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/javascript/throttle-debounce/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Gatsby에 markdown 설정하기</title>
      <link>http://flamingotiger.github.io/frontend/react/gatsby-add-readme/</link>
      <guid>http://flamingotiger.github.io/frontend/react/gatsby-add-readme/</guid>
      <pubDate>Wed, 18 Nov 2020 08:14:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;gatsby는 정적 페이지로 제작시 많이 이용합니다. 예로 블로그나 소개 페이지 같은 경우에 용이합니다.&lt;br&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>gatsby는 정적 페이지로 제작시 많이 이용합니다. 예로 블로그나 소개 페이지 같은 경우에 용이합니다.<br>데이터 베이스를 연결하지 않고 markdown파일로 글을 작성 후 데이터를 불러와 화면에 뿌릴수 있습니다.<br>markdown파일로 작성시 재사용에 좋습니다. 그러면 gatsby에 markdown를 추가해보도록 하겠습니다.</p><h2 id="플러그인-설치"><a href="#플러그인-설치" class="headerlink" title="플러그인 설치"></a>플러그인 설치</h2><p>기존에 설치되어있는 플러그인 <code>gatsby-source-filesystem</code>은 추가 옵션을 설정해주어야 하고,<br><code>gatsby-transformer-remark</code>플러그인을 설치해야합니다.</p><p><img src="/image/frontend/react/gatsby-add-readme-0.png" alt="plugin"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gatsby-transformer-remark</span><br></pre></td></tr></table></figure><p>이후 <code>gatsby-config.js</code>파일을 수정합니다.</p><figure class="highlight javascript"><figcaption><span>gatsby-config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">plugins: [</span><br><span class="line">        ...</span><br><span class="line">    &#123;</span><br><span class="line">resolve: <span class="string">`gatsby-source-filesystem`</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">name: <span class="string">`markdown-pages`</span>,</span><br><span class="line">path: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/src/blogs`</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">`gatsby-transformer-remark`</span>,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>다음과 같이 코드를 추가합니다.</p><h2 id="경로-생성과-페이지-생성"><a href="#경로-생성과-페이지-생성" class="headerlink" title="경로 생성과 페이지 생성"></a>경로 생성과 페이지 생성</h2><p>그 다음 markdown을 node로 실행을 해주어야 불러올수 있습니다.</p><p><img src="/image/frontend/react/gatsby-add-readme-1.png" alt="node"></p><p><code>gatsby-node.js</code>파일을 수정해주도록 합니다.</p><figure class="highlight javascript"><figcaption><span>gatsby-node.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createFilePath &#125; = <span class="built_in">require</span>(<span class="string">`gatsby-source-filesystem`</span>);</span><br><span class="line"></span><br><span class="line">exports.onCreateNode = <span class="function">(<span class="params">&#123; node, getNode, actions &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; createNodeField &#125; = actions;</span><br><span class="line">  <span class="keyword">if</span> (node.internal.type === <span class="string">`MarkdownRemark`</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> relativeFilePath = createFilePath(&#123;</span><br><span class="line">      node,</span><br><span class="line">      getNode,</span><br><span class="line">      basePath: <span class="string">`blog`</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    createNodeField(&#123;</span><br><span class="line">      node,</span><br><span class="line">      name: <span class="string">`slug`</span>,</span><br><span class="line">      value: <span class="string">`/blog<span class="subst">$&#123;relativeFilePath&#125;</span>`</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">`path`</span>);</span><br><span class="line"></span><br><span class="line">exports.createPages = <span class="keyword">async</span> (&#123; graphql, actions &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; createPage &#125; = actions;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> graphql(<span class="string">`</span></span><br><span class="line"><span class="string">    query &#123;</span></span><br><span class="line"><span class="string">      allMarkdownRemark &#123;</span></span><br><span class="line"><span class="string">        edges &#123;</span></span><br><span class="line"><span class="string">          node &#123;</span></span><br><span class="line"><span class="string">            fields &#123;</span></span><br><span class="line"><span class="string">              slug</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">  result.data.allMarkdownRemark.edges.forEach(<span class="function">(<span class="params">&#123; node &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    createPage(&#123;</span><br><span class="line">      path: node.fields.slug,</span><br><span class="line">      component: path.resolve(<span class="string">`./src/templates/blog.js`</span>),</span><br><span class="line">      context: &#123;</span><br><span class="line">        <span class="comment">// Data passed to context is available</span></span><br><span class="line">        <span class="comment">// in page queries as GraphQL variables.</span></span><br><span class="line">        slug: node.fields.slug,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>다음 코드를 설명하자면, <code>onCreateNode</code>는 경로 설정하는 부분으로 실제 url 입력시 인식하는 부분입니다. <code>createPages</code>는 onCreateNode 경로 설정된 부분에 실제로 페이지를 만들어주는 부분입니다.</p><h2 id="md파일-생성"><a href="#md파일-생성" class="headerlink" title="md파일 생성"></a>md파일 생성</h2><p>마크 다운 파일을 생성하도록 하겠습니다. 포맷은 다음과 같습니다.</p><p><img src="/image/frontend/react/gatsby-add-readme-2.png" alt="markdown"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: "테스트"</span><br><span class="line">slug: "/blog/test/"</span><br><span class="line">date: "2020-11-18"</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section"># 제목</span></span><br></pre></td></tr></table></figure><p>slug 부분이 실제 라우팅되는 주소입니다.</p><h2 id="템플릿-생성"><a href="#템플릿-생성" class="headerlink" title="템플릿 생성"></a>템플릿 생성</h2><p>마지막으로 템플릿을 생성해보도록 하겠습니다.</p><p><img src="/image/frontend/react/gatsby-add-readme-3.png" alt="template"></p><p>다음과 같이 템플릿을 작성합니다. 이 부분은 실제 markdown파일을 불러올 페이지입니다.</p><figure class="highlight javascript"><figcaption><span>src/templates/blog.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">"gatsby"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">&#123; path, data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">const</span> blog = data.markdownRemark;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;Hello blog&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;&#123;blog.frontmatter.title&#125;&lt;/</span>h1&gt;</span><br><span class="line">        &lt;div dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: blog.html &#125;&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query($slug: String!) &#123;</span></span><br><span class="line"><span class="string">    markdownRemark(fields: &#123; slug: &#123; eq: $slug &#125; &#125;) &#123;</span></span><br><span class="line"><span class="string">      html</span></span><br><span class="line"><span class="string">      frontmatter &#123;</span></span><br><span class="line"><span class="string">        title</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>드디어 기본 설정이 완료 되었습니다.</p><h2 id="서버실행"><a href="#서버실행" class="headerlink" title="서버실행"></a>서버실행</h2><p>이제 확인을 해보도록 합니다. 서버를 실행합니다.<br><img src="/image/frontend/react/gatsby-add-readme-4.png" alt="서버실행"></p><p>서버가 정상적으로 실행이 되었다면 생성한 .md파일의 slug로 url을 입력해봅니다.</p><p><img src="/image/frontend/react/gatsby-add-readme-5.png" alt="페이지 이동"></p><p>페이지가 자동으로 생성됩니다. 실제 파일로 생성되는것이 아니라 markdown을 html으로 변환시켜주는 것입니다.</p><p>마크다운 하나를 불러오는 방법이었습니다.<br>여러개를 전부 불러오려면 어떻게 해야할까요?</p><h2 id="markdown-전부-불러오기"><a href="#markdown-전부-불러오기" class="headerlink" title="markdown 전부 불러오기"></a>markdown 전부 불러오기</h2><figure class="highlight javascript"><figcaption><span>src/pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link, graphql &#125; <span class="keyword">from</span> <span class="string">"gatsby"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query &#123;</span></span><br><span class="line"><span class="string">    allMarkdownRemark(sort: &#123; fields: [frontmatter___date], order: DESC &#125;) &#123;</span></span><br><span class="line"><span class="string">      totalCount</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          id</span></span><br><span class="line"><span class="string">          frontmatter &#123;</span></span><br><span class="line"><span class="string">            title</span></span><br><span class="line"><span class="string">            date(formatString: "DD MMMM, YYYY")</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          fields &#123;</span></span><br><span class="line"><span class="string">            slug</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          excerpt</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> IndexPage = <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> blog = data.allMarkdownRemark;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h4&gt;&#123;blog.totalCount&#125; blogs&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">      &#123;blog.edges.map((&#123; node &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">          &lt;div key=&#123;node.id&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Link to=&#123;node.fields.slug&#125;&gt;&#123;node.frontmatter.title&#125;&lt;/</span>Link&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">      &#125;)&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> WorkPage;</span><br></pre></td></tr></table></figure><p>이것으로 gatsby에서 markdown을 추가하는 방법을 알아보았습니다.<br>더 자세한 튜토리얼은 <a href="https://www.gatsbyjs.com/tutorial/part-seven/" rel="external nofollow noopener noreferrer" target="_blank">공식홈페이지</a>를 확인해주세요</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/react/gatsby-add-readme/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS EC2 forever사용하기</title>
      <link>http://flamingotiger.github.io/backend/devOps/aws-forever/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/aws-forever/</guid>
      <pubDate>Wed, 28 Oct 2020 05:21:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;h2 id=&quot;forever-설치하기&quot;&gt;&lt;a href=&quot;#forever-설치하기&quot; class=&quot;headerlink&quot; 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><h2 id="forever-설치하기"><a href="#forever-설치하기" class="headerlink" title="forever 설치하기"></a>forever 설치하기</h2><p>설치하는 방법은 간단합니다. ec2에 연결되어있는 상태에서 다음 커맨드를 입력합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install forever -g</span><br></pre></td></tr></table></figure><p>forever를 글로벌로 설치해줍니다.</p><p>다음 커맨드를 입력해 서버를 실행하겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 해당프로젝트</span><br><span class="line">forever start -c "npm run start" ./</span><br><span class="line"><span class="meta">#</span><span class="bash"> 예시) forever start -c <span class="string">"npm run dev"</span> ./</span></span><br></pre></td></tr></table></figure><p>-c 는 커맨드를 실행시켜주는 옵션입니다.</p><p>입력하고 나면 다음과 같은 메시지가 나옵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">warn:    --minUptime not set. Defaulting to: 1000ms</span><br><span class="line">warn:    --spinSleepTime not set. Your script will exit if it does not stay up for at least 1000ms</span><br><span class="line">info:    Forever processing file: ./</span><br><span class="line">(node:18700) Warning: Accessing non-existent property 'padLevels' of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:18700) Warning: Accessing non-existent property 'padLevels' of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p><code>(node:18700) Warning: Accessing non-existent property &#39;padLevels&#39; ....</code>이 부분은 크게 신경 안쓰셔도 됩니다.<br>에러가 아닌 경고 부분이기 때문에 작동은 제대로 됩니다.</p><h2 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forever list</span><br></pre></td></tr></table></figure><p><code>forever list</code> 커맨드를 입력하면 다음과같이 forever의 기록이 나옵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info:    Forever processes running</span><br><span class="line">data:        uid  command       script forever pid   id logfile                          uptime</span><br><span class="line">data:    [0] tUBd npm run start        19368   19375    /home/ec2-user/.forever/tUBd.log 0:0:0:6.338</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :서버포트</span><br><span class="line"><span class="meta">#</span><span class="bash"> 예시) lsof -i :8080</span></span><br></pre></td></tr></table></figure><p>위의 커맨드를 입력하면 실제 구동되고 있는 포트를 볼수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">node    18729 ec2-user   19u  IPv6 128760      0t0  TCP *:webcache (LISTEN)</span><br></pre></td></tr></table></figure><p>다음과 같이 서버가 켜져 있는것을 확인할 수 있습니다.</p><h2 id="종료"><a href="#종료" class="headerlink" title="종료"></a>종료</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">forever stop list의 pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 예시) forever stop 19375</span></span><br></pre></td></tr></table></figure><p>종료하고자하는 forever의 pid를 입력해줍니다.<br>forever를 종료하면 forever list에는 정지가 되었다고 나옵니다.<br>하지만 확인해보면 포트는 남아있는것을 확인할 수 있습니다.<br>포트도 종료시켜줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 "PID"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 예시) <span class="built_in">kill</span> -9 <span class="string">"18729"</span></span></span><br></pre></td></tr></table></figure><p>포트를 종료시키는 커맨드입니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/aws-forever/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS linux2에서 certbot nginx 인증하기</title>
      <link>http://flamingotiger.github.io/backend/devOps/aws-linux2-certbot-nginx/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/aws-linux2-certbot-nginx/</guid>
      <pubDate>Tue, 27 Oct 2020 05:38:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;https를 사용하기 위해서는 인증을 해야합니다. 여러 인증하는 방법중에 nginx와 certbot을 이용한 인
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>https를 사용하기 위해서는 인증을 해야합니다. 여러 인증하는 방법중에 nginx와 certbot을 이용한 인증 방법을 하도록 하겠습니다.</p><h2 id="확인하기"><a href="#확인하기" class="headerlink" title="확인하기"></a>확인하기</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure><p>커맨드를 입력했을시 EPEL (Extra Packages for Enterprise Linux)이 없다면 certbot을 설치할 패키지를 가지고 있는 저장소가 없다는 뜻입니다.</p><p>최신 저장소를 추가하기 위해서는 epel-release 패키지가 필요합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa epel-release</span><br></pre></td></tr></table></figure><p>커맨드를 입력했을때 아무것도 나오지 않는다면 설치가 안된 것입니다.<br>그렇다면 설치를 해야합니다.</p><h2 id="설치-준비하기"><a href="#설치-준비하기" class="headerlink" title="설치 준비하기"></a>설치 준비하기</h2><p>EPEL7 저장소 패키지 다운로드를 해보겠습니다. 이는 Certbot에 필요한 종속성을 제공하는 데 필요합니다.</p><p>ssh로 ec2에 연결합니다. 연결방법을 모르신다면 <a href="https://flamingotiger.github.io/backend/devOps/aws-ec2-connect-ssh/">이전 ssh연결 포스트</a>를 참고해주세요.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/ec2-user</span><br></pre></td></tr></table></figure><p>홈 디렉토리로 이동후 EPEL을 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -r --no-parent -A 'epel-release-*.rpm' http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/</span><br></pre></td></tr></table></figure><p>wget은 웹에서 자동적으로 파일을 받아오는데 사용되는 유틸리티입니다. HTTP, HTTPS, FTP 프로토콜을 지원합니다.</p><p><code>옵션</code><br><code>-r, --recursive</code><br>재귀적인(recursive) 다운로드를 한다.</p><p><code>-np, --no-parent</code><br>주어진 디렉토리의 상부 디렉토리는 다운받지 않는다.</p><p><code>-A acclist, --accept acclist</code><br>받거나 파일 확장자를 지정한다</p><p>다음으로 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-*.rpm</span><br></pre></td></tr></table></figure><p>다음으로 EPEL을 활성화 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --enable epel*</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum repolist</span><br></pre></td></tr></table></figure><p>커맨드를 입력하면 없었던 EPEL이 추가된 것을 확인할 수 있습니다.</p><p><img src="/image/backend/devOps/aws-linux2-certbot-nginx-0.png" alt="EPEL 추가"></p><h2 id="Certbox-설치-및-실행하기"><a href="#Certbox-설치-및-실행하기" class="headerlink" title="Certbox 설치 및 실행하기"></a>Certbox 설치 및 실행하기</h2><p>Certbox을 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y certbot</span><br><span class="line">sudo yum install certbot-nginx</span><br></pre></td></tr></table></figure><p>설치가 완료되었다면</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx stop</span><br><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure><p>certbot nginx를 실행합니다.</p><p><img src="/image/backend/devOps/aws-linux2-certbot-nginx-1.png" alt="아이피 선택"><br>아이피를 선택합니다.</p><p><img src="/image/backend/devOps/aws-linux2-certbot-nginx-2.png" alt="덮어쓸지"><br>그리고 나면 이 기존 인증서를 다시 설치하려고 할지 아니면 덮어쓸지 정합니다.</p><p>이 커맨드 실행이 끝나면 자동으로 etc/nginx/nginx.conf 파일을 수정합니다.</p><p>이후 nginx 서버를 다시 켜줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>등록한 도메인으로 들어가면 다음과 같이 https로 접속이 되는것을 확인할 수 있습니다.<br><img src="/image/backend/devOps/aws-linux2-certbot-nginx-3.png" alt="nginx 웹사이트"></p><p><img src="/image/backend/devOps/aws-linux2-certbot-nginx-4.png" alt="최종"></p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/aws-linux2-certbot-nginx/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS route53를 이용해서 vercel 도메인 연결하기</title>
      <link>http://flamingotiger.github.io/backend/devOps/aws-route53-domain-connect/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/aws-route53-domain-connect/</guid>
      <pubDate>Tue, 27 Oct 2020 01:56:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;도메인을 구입한 상태여야 합니다.&lt;/p&gt;
&lt;h2 id=&quot;vercel-설정&quot;&gt;&lt;a href=&quot;#vercel-설정&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>도메인을 구입한 상태여야 합니다.</p><h2 id="vercel-설정"><a href="#vercel-설정" class="headerlink" title="vercel 설정"></a>vercel 설정</h2><p>vercel로 접속해 해당 프로젝트에 edit을 버튼을 클릭합니다.</p><p><img src="/image/backend/devOps/aws-route53-domain-connect-0.png" alt="vercel 접속"></p><p><img src="/image/backend/devOps/aws-route53-domain-connect-1.png" alt="도메인 탭"></p><p>도메인 탭으로 들어와서 구입한 도메인을 입력합니다.<br>에러가 나오면서 다음과 같은 값이 나옵니다.</p><p><img src="/image/backend/devOps/aws-route53-domain-connect-2.png" alt="에러"></p><p>value라는 값을 복사해줍니다. Route53에서 사용할 값입니다.<br>에러를 해결하기 위해서는 aws에서 설정해주어야합니다.</p><h2 id="Route53-설정"><a href="#Route53-설정" class="headerlink" title="Route53 설정"></a>Route53 설정</h2><p>aws Route53에 접속합니다.</p><p><img src="/image/backend/devOps/aws-route53-domain-connect-3.png" alt="Route53"></p><p>대쉬보드 왼쪽 상단에 DNS관리에 호스팅을 선택해서 들어갑니다.</p><p>호스팅 영역에 구입한 도메인을 선택합니다.<br>없다면 생성해줍니다.</p><p><img src="/image/backend/devOps/aws-route53-domain-connect-4.png" alt="Route53 호스팅 영역"></p><p>도메인을 선택하면 상세 페이지로 들어오게 됩니다.<br><img src="/image/backend/devOps/aws-route53-domain-connect-5.png" alt="도메인"></p><p>레코드 생성버튼을 클릭합니다.<br><img src="/image/backend/devOps/aws-route53-domain-connect-6.png" alt="레코드 생성"></p><p>생성부분에 IP는 이전의 vercel에서 복사했던 value 부분을 넣어주면 됩니다.</p><p><img src="/image/backend/devOps/aws-route53-domain-connect-7.png" alt="vercel 적용"><br>그리고 vercel의 도메인을 확인하면 적용되어있는 것을 확인할 수 있습니다. </p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/aws-route53-domain-connect/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS EC2 nginx 사용하기</title>
      <link>http://flamingotiger.github.io/backend/devOps/aws-ec2-nginx/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/aws-ec2-nginx/</guid>
      <pubDate>Mon, 26 Oct 2020 07:50:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;ec2에서 nginx를 사용하는 방법을 알아 보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;선행-설치&quot;&gt;&lt;a href=&quot;#선
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>ec2에서 nginx를 사용하는 방법을 알아 보겠습니다.</p><h2 id="선행-설치"><a href="#선행-설치" class="headerlink" title="선행 설치"></a>선행 설치</h2><p><a href="https://flamingotiger.github.io/backend/devOps/aws-nginx-install/">이전 nginx 포스트</a>에서 nginx를 설치를 먼저 해야합니다.</p><p><a href="https://flamingotiger.github.io/backend/devOps/aws-ec2-install-git/">깃헙 설치하기 포스트</a></p><p><a href="https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html" rel="external nofollow noopener noreferrer" target="_blank">aws node 설치하기 공식 사이트</a></p><h2 id="EC2-포트설정하기"><a href="#EC2-포트설정하기" class="headerlink" title="EC2 포트설정하기"></a>EC2 포트설정하기</h2><p>aws에서 네트워크 및 보안에 인스턴스에 해당하는 보안 그룹을 선택합니다.<br>그리고 인바운드 규칙 편집 버튼을 선택합니다.<br><code>네트워크 및 보안 &gt; 인스턴스 &gt; 인바운스 규칙편집</code></p><p>http와 사용자 지정포트를 입력해줍니다. 추후 https를 사용할 것이기에 https도 추가해줍니다.<br><img src="/image/backend/devOps/aws-ec2-nginx-0.png" alt="포트설정"></p><h2 id="EC2-깃-프로젝트-설치하기"><a href="#EC2-깃-프로젝트-설치하기" class="headerlink" title="EC2 깃 프로젝트 설치하기"></a>EC2 깃 프로젝트 설치하기</h2><p>인스턴스 터미널에서 다음 커맨드로 프로젝트를 준비합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone 프로젝트</span><br><span class="line"></span><br><span class="line">cd 프로젝트</span><br><span class="line">npm i</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>그러면 준비가 완료 되었습니다.</p><h2 id="nginx-연동하기"><a href="#nginx-연동하기" class="headerlink" title="nginx 연동하기"></a>nginx 연동하기</h2><p>ec2에 nginx가 설치되어 있는상태에서</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx status</span><br></pre></td></tr></table></figure><p>커맨드를 입력하면 다음과 같이 서버가 실행이 되어있어야합니다.<br><img src="/image/backend/devOps/aws-ec2-nginx-1.png" alt="커맨드"></p><p>퍼블릭IP를 URL에 입력하면 다음과 같은 화면이 나옵니다.<br><img src="/image/backend/devOps/aws-ec2-nginx-2.png" alt="서버실행"></p><p>nginx 기본 포트는 80으로 설정되어있습니다.<br>이 포트에서 설정을 변경시켜줍니다.</p><h2 id="nginx-설정-변경"><a href="#nginx-설정-변경" class="headerlink" title="nginx 설정 변경"></a>nginx 설정 변경</h2><p><strong>기본팁</strong><br>설정을 변경하기 위해서는 기본적으로 vi편집기의 간단한 명령어를 알아야합니다.<br>당황하지말고 따라하면됩니다.</p><p>처음에는 기본적으로 <code>읽기모드</code>로 되어있습니다.<br><code>i</code>를 클릭하면 <code>입력모드</code>로 글자를 입력할 수 있습니다.<br>다시 읽기모드로 가기위해서는 <code>esc</code>를 누르면 됩니다.</p><p>읽기모드에서 편집을 하고 나서 저장후 닫고 싶으면 <code>:wq</code>를 입력하고, 저장하지 않고 닫고 싶다면 <code>:q</code>를 입력하고 <code>enter</code>를 누르면 됩니다.</p><p>글을 지울때 입력모드에서 del이나 backspace로 지울수 있는데 한줄 단위로 지우고 싶다면<br>편집모드에서 <code>dd</code>를 누르면 한줄이 삭제 됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>sudo로 하는 이유는 nginx.conf파일이 읽기전용 파일이기때문에 관리자 권한으로 강제로 덮어쓰기를 하기 위해서 입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>conf파일의 server부분에 location을 추가합니다.</p><p><img src="/image/backend/devOps/aws-ec2-nginx-3.png" alt="conf파일 수정"></p><p>conf파일이 변경되었기 때문에 nginx를 다시 재시동합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>nginx를 재시동하고나서 프로젝트를 실행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 프로젝트명</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>퍼블릭 IP, DNS로 접속하면 따로 포트를 입력없이 연결되는것을 확인할 수 있습니다.<br><img src="/image/backend/devOps/aws-ec2-nginx-4.png" alt="최종 연결"></p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/aws-ec2-nginx/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS애서 nginx 설치하기 (Amazon Linux 2 EC2)</title>
      <link>http://flamingotiger.github.io/backend/devOps/aws-nginx-install/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/aws-nginx-install/</guid>
      <pubDate>Mon, 26 Oct 2020 05:35:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;Amazon Linux 2 EC2에서 nginx 웹서버를 설치하도록 합니다.&lt;br&gt;amazon-linux-ext
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>Amazon Linux 2 EC2에서 nginx 웹서버를 설치하도록 합니다.<br>amazon-linux-extras에는 nginx1 밖에 없으므로 nginx1을 먼저 설치해주도록합니다.</p><h2 id="nginx1-설치"><a href="#nginx1-설치" class="headerlink" title="nginx1 설치"></a>nginx1 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo amazon-linux-extras enable nginx1</span><br></pre></td></tr></table></figure><p>nginx1을 설치를 하면 마지막부분에 다음과 같은 커맨드가 나옵니다.</p><p><img src="/image/backend/devOps/aws-nginx-install-0.png" alt="커맨드"></p><p>다음과 같이 설치를 진행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum clean metadata &amp;&amp; sudo yum install nginx -y</span><br></pre></td></tr></table></figure><p>다음 커맨드로 설치가 되었는지 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed nginx</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/aws-nginx-install/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS EC2 터미널 연결하기</title>
      <link>http://flamingotiger.github.io/backend/devOps/aws-ec2-connect-ssh/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/aws-ec2-connect-ssh/</guid>
      <pubDate>Mon, 26 Oct 2020 05:15:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;AWS EC2 인스턴스에서 터미널을 열고 하기에는 번거롭거나 끊기는 경우가 종종 발생합니다.&lt;br&gt;그래서 로컬의
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>AWS EC2 인스턴스에서 터미널을 열고 하기에는 번거롭거나 끊기는 경우가 종종 발생합니다.<br>그래서 로컬의 터미널에서 aws ec2를 연결해서 사용해보겠습니다.</p><h2 id="인스턴스-확인"><a href="#인스턴스-확인" class="headerlink" title="인스턴스 확인"></a>인스턴스 확인</h2><p>ec2애서 연결하고자하는 인스턴스의 퍼블릭 IPv4 DNS주소를 복사합니다.</p><p><img src="/image/backend/devOps/aws-ec2-connect-ssh-0.png" alt="인스턴스 확인"></p><h2 id="ec2-연결하기"><a href="#ec2-연결하기" class="headerlink" title="ec2 연결하기"></a>ec2 연결하기</h2><p>ec2를 연결하기 위해서는 pem키가 필요합니다.</p><p><img src="/image/backend/devOps/aws-ec2-connect-ssh-1.png" alt="접속하기"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/Downloads/AWS_EC2_KeyPair_0.pem ec2-user@ec2-54-180-147-141.ap-northeast-2.compute.amazonaws.com</span><br></pre></td></tr></table></figure><p><code>ssh -i [Pem키 경로] [사용자이름@이전에 복사한 DNS]</code>를 입력합니다.<br>입력하면 다음과 같은 에러가 나옵니다. 이 에러는 bad permission으로 권한이 없다는 얘기입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 사용자이름</span></span><br><span class="line">Amazon Linux AMI: ec2-user</span><br><span class="line">Centos AMI: centos</span><br><span class="line">Fedora AMI: ec2-user</span><br><span class="line">RHEL AMI: ec2-user / root</span><br><span class="line">SUSE: ec2-user / root</span><br><span class="line">Ubuntu AMI: ubuntu / root</span><br></pre></td></tr></table></figure><p><img src="/image/backend/devOps/aws-ec2-connect-ssh-2.png" alt="접속 에러"></p><p>그러면 권한을 주도록 합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 ~/Downloads/AWS_EC2_KeyPair_0.pem</span><br></pre></td></tr></table></figure><p><code>chmod 400 [Pem키 경로]</code></p><p>이후 다시 접속 요청을 해봅니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/Downloads/AWS_EC2_KeyPair_0.pem ec2-user@ec2-54-180-147-141.ap-northeast-2.compute.amazonaws.com</span><br></pre></td></tr></table></figure><p><img src="/image/backend/devOps/aws-ec2-connect-ssh-3.png" alt="연결완료"></p><p>연결이 완료되는 것을 확인할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/aws-ec2-connect-ssh/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS EC2에서 ssh키 생성과 git설치하기</title>
      <link>http://flamingotiger.github.io/backend/devOps/aws-ec2-install-git/</link>
      <guid>http://flamingotiger.github.io/backend/devOps/aws-ec2-install-git/</guid>
      <pubDate>Fri, 23 Oct 2020 07:02:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;AWS EC2 인스턴스에서 ssh키를 생성하고 git을 설치해 보겠습니다.&lt;br&gt;ec2에서 인스턴스로 들어가 인
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p>AWS EC2 인스턴스에서 ssh키를 생성하고 git을 설치해 보겠습니다.<br>ec2에서 인스턴스로 들어가 인스턴스에 연결이라는 버튼을 클릭한 후 다시 연결을 누르면 <figure class="highlight plain"><figcaption><span>터미널 창```이 열립니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 설치하기</span><br><span class="line"></span><br><span class="line">### ssh키 생성</span><br><span class="line">```shell</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>터미널에서 커맨드를 입력한이후 비밀번호 설정을 하지 않고 생성을 하기위해서 엔터를 입력합니다.<br>그러면 SSH키가 생성이 됩니다.</p><p>이후 키를 확인해서 깃헙에 권한을 주어야합니다.<br>키를 확인하는 방법은 ssh키를 생성했던 위치에서 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>커맨드를 입력해줍니다.<br>그러면 <figure class="highlight plain"><figcaption><span>~~~~```라는 긴 텍스트 문장을 확인할 수 있습니다. 복사를 해줍니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">이후 깃허브 페이지로 이동합니다.</span><br><span class="line">![SSH and GPG keys](/image/backend/devOps/aws-ec2-install-git-0.png)</span><br><span class="line"></span><br><span class="line">깃허브 오른쪽상단 마이페이지로 들어가 SSH and GPG keys탭을 선택합니다.</span><br><span class="line"></span><br><span class="line">![SSH keys](/image/backend/devOps/aws-ec2-install-git-1.png)</span><br><span class="line">New SSH keys버튼을 클릭해 자기가 원하는 이름과 이전에 복사했었던 ssh key를 붙여넣습니다.</span><br><span class="line"></span><br><span class="line">## git 설치하기</span><br><span class="line">ec2에 git을 사용하려면 git을 설치해야합니다.</span><br><span class="line">Yum을 이용하면 쉽게 git 설치가 가능합니다.</span><br><span class="line"></span><br><span class="line">`yum`이란?</span><br><span class="line">rpm기반 시스템용 패키지 관리 도구입니다. 윈도우 OS로 예를 들면 exe 파일로 설치/삭제 등을 하는 프로그램입니다.</span><br><span class="line"></span><br><span class="line">간단한 명령어 입니다.</span><br><span class="line">```shell</span><br><span class="line">yum install 설치</span><br><span class="line">yum update 업데이트</span><br><span class="line">yum remove 삭제</span><br><span class="line">yum replolist 저장소 확인</span><br><span class="line">yum list 패키지 목록 보기</span><br><span class="line">yum list installed 설치된 패키지 목록 보기</span><br></pre></td></tr></table></figure></p><p>git 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update -y</span><br><span class="line"></span><br><span class="line">sudo yum install git -y</span><br><span class="line"></span><br><span class="line">git version</span><br></pre></td></tr></table></figure><p>커맨드를 입력하면 git이 설치되는 것을 확인할 수 있습니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/backend/devOps/aws-ec2-install-git/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React native firebase 페이스북 로그인 적용하기</title>
      <link>http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-facebook-login/</link>
      <guid>http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-facebook-login/</guid>
      <pubDate>Wed, 15 Jul 2020 04:29:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;&lt;a href https: flamingotiger.github.io frontend reactnative re
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p><a href https: flamingotiger.github.io frontend reactnative react-native-firebase "">firebase 적용포스트</a>를 통해 설정을 마친 상태여야 합니다.<br>react-native v0.60 이상을 기준으로 작성하였습니다.</p><h2 id="페이스북-개발자-계정설정"><a href="#페이스북-개발자-계정설정" class="headerlink" title="페이스북 개발자 계정설정"></a>페이스북 개발자 계정설정</h2><p><a href="https://developers.facebook.com/" rel="external nofollow noopener noreferrer" target="_blank">페이스북 개발자 홈페이지</a>에 로그인을 합니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-0.png" alt="페이스북 개발자 홈페이지"></p><p>오른쪽 상단 내 앱을 선택한 후 새 앱추가를 합니다.<br><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-1.png" alt="새 앱추가"></p><p>내 앱 생성이 완료되면 Add a product에서 페이스북 로그인을 추가합니다.</p><h2 id="Firebase-설정"><a href="#Firebase-설정" class="headerlink" title="Firebase 설정"></a>Firebase 설정</h2><p>설정 &gt; 기본설정에 접속하면 앱 아이디와 앱 시크릿 코드를 확인 할 수 있습니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-3.png" alt="facebook 앱 아이디 및 앱 시크릿 코드"></p><p>firebase로 접속해서 Authentication &gt; Sign-in method에 facebook을 선택해서 활성화 시켜줍니다.<br>다음과 같은 팝업이 나옵니다.<br><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-2.png" alt="facebook"><br>아까 보았던 앱 아이디와 앱 시크릿 코드를 입력해줍니다.<br>하단에 나와있는 OAuth 리디렉션 url은 페이스북 로그인 설정에서 추가해줍니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-4.png" alt="OAuth 리디렉션 url"></p><h2 id="React-native설정"><a href="#React-native설정" class="headerlink" title="React native설정"></a>React native설정</h2><p>기본적인 설정은 완료되었습니다. 이제 다음으로 react native에서 사용해보겠습니다.<br>react-native-fbsdk 패키지를 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-native-fbsdk</span><br></pre></td></tr></table></figure><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-5.png" alt="facebook 추가 단계"><br>다음 ios를 선택해서 하나하나 추가 및 수정해나가도록 해봅니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-6.png" alt="1. 개발 환경 설정"><br>코코아팟으로 설정하고 <code>pod &#39;FBSDKLoginKit&#39;</code>이 부분을 <code>/ios/Podfile</code>에서 pod ‘<del>~</del>‘ 가 많은 부분 하단에 추가해줍니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-9.png" alt="Podfile"></p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-7.png" alt="2. 번들 식별자 추가"></p><p>번들 식별자는 xcode에서 확인할 수 있습니다. 다음 이미지의 두번째에 있는 텍스트가 번들 식별자입니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-8.png" alt="번들 식별자"></p><p>3번의 앱에 대한 sso활성화를 합니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-10.png" alt="4. info.plist"><br>뭔가 엄청나게 복잡한 값들이 나와있죠? 쉽게 할 수 있습니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-11.png" alt="info.plist open"></p><p>xcode에서 info.plist를 소스코드로 열어줍니다.<br>그러면 다음과 같이 코드가 적혀있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    //===== 여기에 붙여넣기 4-2, 4-6</span><br><span class="line">//...</span><br><span class="line">        코드들</span><br><span class="line">    //...</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><p>페이스북 사이트에서 보았던 4-2,4-6코드를 <dict>사이에 붙여넣습니다.</dict></p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-12.png" alt="5. 앱 델리게이트 연결"><br>앱 델리게이트 연결해야 하는 단계가 왔습니다. 하지만.. 저희 프로젝트에서는 <code>AppDelegate.swift</code>라는 파일이 없습니다. 그래서 다른 방법으로 델리게이트를 연결하겠습니다.</p><p>xcode에서 <code>AppDelegate.m</code>파일을 열어줍니다.<br>상단에 다음코드를 추가합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;FBSDKCoreKit/FBSDKCoreKit.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>그리고 AppDelegate부분에 두줄을 추가합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">@implementation AppDelegate</span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">  [[FBSDKApplicationDelegate sharedInstance] application:application <span class="comment">// 추가</span></span><br><span class="line">  didFinishLaunchingWithOptions:launchOptions]; <span class="comment">// 추가</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>마지막으로 <code>@end</code>바로 위에 다음 코드를 추가합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">- (BOOL)application:(UIApplication *)app</span><br><span class="line">            openURL:(NSURL *)url</span><br><span class="line">            options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> [[FBSDKApplicationDelegate sharedInstance]application:app</span><br><span class="line">                                                       openURL:url</span><br><span class="line">                                                       options:options];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-14.png" alt="info URL schema"><br>xcode를 열어서 info탭 맨하단에 있는 URL schema부분에서 <code>fb</code>+<code>APPID</code>를 입력합니다. 앱아이디는 페이스북 개발자 페이지에서 확인할 수 있습니다. 예를들면 <code>fb123456789012345</code>이런 형식으로 스키마를 등록합니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-facebook-login-13.png" alt="기타"><br>버튼 등의 단계들은 react native단에서 할것이기 때문에 다음 단계들은 넘어가보도록 합니다.</p><h3 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h3><p>설정이 완료되었으니 이제 사용해보겠습니다.</p><figure class="highlight javascript"><figcaption><span>FacebookSignIn.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FacebookSignIn = <span class="function">(<span class="params">&#123; onFacebookButtonPress &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">title</span>=<span class="string">"Facebook Sign-In"</span> <span class="attr">onPress</span>=<span class="string">&#123;onFacebookButtonPress&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">export default FacebookSignIn;</span></span><br></pre></td></tr></table></figure><p>페이스북 로그인에 사용할 버튼을 생성합니다.</p><figure class="highlight javascript"><figcaption><span>App.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> auth <span class="keyword">from</span> <span class="string">"@react-native-firebase/auth"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LoginManager, AccessToken &#125; <span class="keyword">from</span> <span class="string">"react-native-fbsdk"</span>;</span><br><span class="line"><span class="keyword">import</span> FacebookSignIn <span class="keyword">from</span> <span class="string">"./FacebookSignIn"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handleFacebookButtonPress = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> LoginManager.logInWithPermissions([</span><br><span class="line">        <span class="string">"public_profile"</span>,</span><br><span class="line">        <span class="string">"email"</span>,</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">if</span> (result.isCancelled) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"User cancelled the login process"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> AccessToken.getCurrentAccessToken();</span><br><span class="line">      <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"Something went wrong obtaining access token"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> facebookCredential = auth.FacebookAuthProvider.credential(</span><br><span class="line">        data.accessToken</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">const</span> &#123;user&#125; = auth().signInWithCredential(facebookCredential);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'user data'</span>, user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">FacebookSignIn</span> <span class="attr">onFacebookButtonPress</span>=<span class="string">&#123;handleFacebookButtonPress&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><p>이것으로 페이스북 로그인 기능을 적용해보았습니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-facebook-login/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React native firebase 구글 로그인 적용하기</title>
      <link>http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-google-login/</link>
      <guid>http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-google-login/</guid>
      <pubDate>Mon, 13 Jul 2020 04:15:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;시작하기&quot;&gt;&lt;a href=&quot;#시작하기&quot; class=&quot;headerlink&quot; title=&quot;시작하기&quot;&gt;&lt;/a&gt;시작하기&lt;/h1&gt;&lt;p&gt;&lt;a href https: flamingotiger.github.io frontend reactnative re
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h1><p><a href https: flamingotiger.github.io frontend reactnative react-native-firebase "">firebase 적용포스트</a>를 통해 설정을 마친 상태여야 합니다.</p><h2 id="라이브러리-설치"><a href="#라이브러리-설치" class="headerlink" title="라이브러리 설치"></a>라이브러리 설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@react-native-community/google-signin</span><br></pre></td></tr></table></figure><p>설치가 완료되면 초기화시키는 작업이 필요합니다.</p><figure class="highlight javascript"><figcaption><span>App.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; GoogleSignin &#125; <span class="keyword">from</span> <span class="string">'@react-native-community/google-signin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> socialGoogleConfigure = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> GoogleSignin.configure(&#123;</span><br><span class="line">        webClientId: GOOGLE_WEB_CLIENT_ID</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    socialGoogleConfigure();</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><p>xcode의 GoogleService-info.plist를 열어서 clientId를 찾아서 webClientId 부분에 넣으면 됩니다.<br><code>client_id.apps.googleusercontent.com</code>과 같은 형식으로 생겼습니다.</p><figure class="highlight javascript"><figcaption><span>GoogleSignInCustomButton.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"><span class="keyword">import</span> auth <span class="keyword">from</span> <span class="string">"@react-native-firebase/auth"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; GoogleSignin &#125; <span class="keyword">from</span> <span class="string">"@react-native-community/google-signin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GoogleSignInCustomButton = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> onGoogleButtonPress = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; idToken &#125; = <span class="keyword">await</span> GoogleSignin.signIn();</span><br><span class="line">    <span class="keyword">const</span> googleCredential = auth.GoogleAuthProvider.credential(idToken);</span><br><span class="line">    <span class="keyword">return</span> auth().signInWithCredential(googleCredential);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">title</span>=<span class="string">"구글로그인"</span> <span class="attr">onPress</span>=<span class="string">&#123;onGoogleButtonPress&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default GoogleSignInCustomButton;</span></span><br></pre></td></tr></table></figure><p>이것으로 로그인 기능을 간단하게 구현해보았습니다.</p><h2 id="에러"><a href="#에러" class="headerlink" title="에러"></a>에러</h2><p>ios에서 추가로 설정해야하는 부분이 있습니다.<br>xcode에서 프로젝트를 선택하고 info탭으로 이동하면 맨 하단에 URL types가 있습니다.</p><p>그 부분에서 <code>GoogleService-Info.plist</code>파일의 <code>REVERSED_CLIENT_ID</code>부분을 복사해서 url스키마에 붙여넣기 합니다.</p><p><img src="/image/frontend/ReactNative/react-native-firebase-google-login-0.png" alt="스키마 추가"></p><p>자세한 내용은 <a href="https://developers.google.com/identity/sign-in/ios/start-integrating" rel="external nofollow noopener noreferrer" target="_blank">구글 ios 로그인 공식 사이트</a>를 참고해주시면 됩니다.</p>]]></content:encoded>
      
      <comments>http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-google-login/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
