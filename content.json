{"meta":{"title":"플타 앞발자의 삽질로그","subtitle":"플타 앞발자의 삽질로그 👷🏼‍️🛠","description":"프론트엔드 개발 혹은 공부하면서 기록하는 블로그입니다. TypeScript, React를 주로 선호합니다.","author":"Hong Hakbum","url":"http://flamingotiger.github.io","root":"/"},"pages":[{"title":"Trello 클론 프로젝트 만들기 - 1","date":"2020-01-04T15:01:07.000Z","updated":"2021-04-30T03:36:18.545Z","comments":true,"path":"prevPost/trello-clone-1.html","permalink":"http://flamingotiger.github.io/prevPost/trello-clone-1.html","excerpt":"","text":"시작하기지난 포스트에 이어서 trello 컴포넌트에 기능을 마저 추가하도록 하겠습니다. Board보드 생성하는 리듀서 및 컴포넌트 기능을 추가해보도록 하겠습니다. Board 리듀서store/reducers/board.ts1234567891011121314151617181920212223242526272829303132333435363738import produce from 'immer';import &#123; action, ActionType, createReducer &#125; from 'typesafe-actions';import uuid from 'uuid';export const CREATE_BOARD = \"CREATE_BOARD\";export const createBoard = (title: string) =&gt; &#123; const id: string = uuid.v4(); return action(CREATE_BOARD, &#123; id, title &#125;);&#125;const actions = &#123; createBoard&#125;;export &#123; actions &#125;;export interface BoardType &#123; id: string; title: string;&#125;export interface BoardState &#123; boards: BoardType[];&#125;export type BoardActions = ActionType&lt;typeof actions&gt;;const initialState: BoardState = &#123; boards: []&#125;;export default createReducer&lt;BoardState, BoardActions&gt;(initialState, &#123; [CREATE_BOARD]: (state, action) =&gt; produce(state, draft =&gt; &#123; draft.boards = [...state.boards, &#123; id: action.payload.id, title: action.payload.title &#125;]; &#125;)&#125;); store/reducers/index.tsx1234567import &#123; combineReducers &#125; from \"redux\";import board from './board';const rootReducer = combineReducers(&#123; board &#125;);export type RootState = ReturnType&lt;typeof rootReducer&gt;export default rootReducer; Board 컴포넌트components/Board/CreateBoardCard.tsx1234567891011121314151617181920import React from 'react';import styled from 'styled-components';import &#123; BoardStyle &#125; from './BoardStyle';import &#123; useDispatch &#125; from 'react-redux';import &#123; createBoard &#125; from 'store/reducers/board';//...const CreateBoardCard: React.FC = () =&gt; &#123; const dispatch = useDispatch(); return &lt;CreateBoardCardStyle&gt; &lt;Input placeholder=\"Create new board\" onKeyDown=&#123;(e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123; if (e.keyCode === 13) &#123; dispatch(createBoard(e.currentTarget.value)) e.currentTarget.value = ''; &#125; &#125;&#125; /&gt; &lt;/CreateBoardCardStyle&gt;&#125;export default CreateBoardCard; 보드 입력시 엔터를 누르면 생성되는 기능을 추가했습니다. components/Board/BoardCard.tsx1234567891011import React from 'react';import styled from 'styled-components';import &#123; Link &#125; from 'react-router-dom';import &#123; BoardStyle &#125; from './BoardStyle';import &#123; BoardType &#125; from 'store/reducers/board';//...const BoardCard: React.FC&lt;&#123; board: BoardType &#125;&gt; = (&#123; board &#125;) =&gt; &#123; return &lt;BoardStyle&gt;&lt;LinkStyle to=&#123;`/board/$&#123;board.id&#125;`&#125;&gt;&#123;board.title&#125;&lt;/LinkStyle&gt;&lt;/BoardStyle&gt;&#125;export default BoardCard; 보드 아이디에 따른 라우터 설정을 해줍니다. pages/BoardPage.tsx1234567891011121314151617181920212223import React from 'react';import styled from 'styled-components';import CreateBoardCard from 'components/Boards/CreateBoardCard';import BoardCard from 'components/Boards/BoardCard';import &#123; useSelector &#125; from 'react-redux';import &#123; BoardType &#125; from 'store/reducers/board';import &#123; RootState &#125; from 'store/reducers';const BoardWrap = styled.section` width: 100%; display: flex; flex-wrap: wrap;`const BoardPage:React.FC = () =&gt; &#123; const boardState = useSelector((state: RootState) =&gt; state.board); return &lt;BoardWrap&gt; &#123;boardState.boards.map((board: BoardType) =&gt; &lt;BoardCard key=&#123;board.id&#125; board=&#123;board&#125;/&gt;)&#125; &lt;CreateBoardCard /&gt; &lt;/BoardWrap&gt;&#125;export default BoardPage; ListsLists 리듀서store/reducers/lists.ts12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import produce from 'immer';import &#123; action, ActionType, createReducer &#125; from 'typesafe-actions';import uuid from 'uuid';export const CREATE_LISTS = \"CREATE_LISTS\";export const UPDATE_LISTS_TITLE = \"UPDATE_LISTS_TITLE\";export const createLists = (title: string, boardId: string) =&gt; &#123; const id: string = uuid.v4(); return action(CREATE_LISTS, &#123; id, title, boardId &#125;);&#125;export const updateListsTitle = (id: string, title: string) =&gt; action(UPDATE_LISTS_TITLE, &#123; id, title &#125;);const actions = &#123; createLists, updateListsTitle&#125;;export &#123; actions &#125;;export interface ListsType &#123; id: string; boardId: string; title: string;&#125;export interface ListsState &#123; lists: ListsType[];&#125;export type ListsActions = ActionType&lt;typeof actions&gt;;const initialState: ListsState = &#123; lists: []&#125;;export default createReducer&lt;ListsState, ListsActions&gt;(initialState, &#123; [CREATE_LISTS]: (state, action) =&gt; produce(state, draft =&gt; &#123; draft.lists = [...state.lists, &#123; id: action.payload.id, boardId: action.payload.boardId, title: action.payload.title &#125;]; &#125;), [UPDATE_LISTS_TITLE]: (state, action) =&gt; produce(state, draft =&gt; &#123; draft.lists = state.lists.map((list: ListsType) =&gt; &#123; if (list.id === action.payload.id) &#123; list = &#123; ...list, title: action.payload.title &#125; &#125; return list; &#125;) &#125;)&#125;); store/reducers/index.tsx12345678import &#123; combineReducers &#125; from \"redux\";import board from './board';import lists from './lists';const rootReducer = combineReducers(&#123; board, lists &#125;);export type RootState = ReturnType&lt;typeof rootReducer&gt;export default rootReducer; Lists 컴포넌트components/Lists/CreateLists.tsx123456789101112131415161718192021222324252627282930import React from 'react';import styled from 'styled-components';import &#123; useDispatch &#125; from 'react-redux';import &#123; createLists &#125; from 'store/reducers/lists';import &#123; useParams &#125; from 'react-router-dom';//...const CreateLists: React.FC = () =&gt; &#123; const &#123; id: boardId &#125; = useParams(); const dispatch = useDispatch(); return &lt;ListsWrapper&gt; &lt;ListsContent&gt; &lt;ListHeader type=\"text\" placeholder=\"Create lists\" onKeyDown=&#123;(e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123; const value = e.currentTarget.value; if (e.keyCode === 13 &amp;&amp; value) &#123; if (boardId) &#123; dispatch(createLists(e.currentTarget.value, boardId)) e.currentTarget.value = ''; &#125; &#125; &#125;&#125; /&gt; &lt;/ListsContent&gt; &lt;/ListsWrapper&gt;&#125;export default CreateLists; components/Lists/Lists.tsx1234567891011121314151617181920212223242526272829303132333435import React from 'react';import styled from 'styled-components';import &#123; useDispatch, useSelector &#125; from 'react-redux';import ListCard from './ListCard';import &#123; ListsType, updateListsTitle &#125; from 'store/reducers/lists';import CreateCard from './CreateCard';import &#123; RootState &#125; from 'store/reducers';import &#123; CardType &#125; from 'store/reducers/card';//...const Lists: React.FC&lt;&#123; list: ListsType &#125;&gt; = (&#123; list &#125;) =&gt; &#123; const dispatch = useDispatch(); const cards = useSelector((state: RootState) =&gt; state.card.cards.filter((card: CardType) =&gt; card.listsId === list.id) ); return &lt;ListsWrapper&gt; &lt;ListsContent&gt; &lt;ListHeader type=\"text\" defaultValue=&#123;list.title&#125; onKeyDown=&#123;(e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123; const value = e.currentTarget.value; if (e.keyCode === 13 &amp;&amp; value) &#123; dispatch(updateListsTitle(list.id, e.currentTarget.value)) e.currentTarget.blur(); &#125; &#125;&#125; /&gt; &lt;ListsStyle&gt; &#123;cards.map((card: CardType, i: number) =&gt; &lt;ListCard key=&#123;i&#125; card=&#123;card&#125; /&gt;)&#125; &lt;/ListsStyle&gt; &lt;CreateCard listId=&#123;list.id&#125; /&gt; &lt;/ListsContent&gt; &lt;/ListsWrapper&gt;&#125;export default Lists; pages/ListPage.tsx123456789101112131415161718192021import React from 'react';import styled from 'styled-components';import Lists from 'components/Lists/Lists';import CreateLists from 'components/Lists/CreateLists';import &#123; useSelector &#125; from 'react-redux';import &#123; RootState &#125; from 'store/reducers';import &#123; ListsType &#125; from 'store/reducers/lists';//...const ListPage = () =&gt; &#123; const listsState = useSelector((state:RootState) =&gt; state.lists); return (&lt;BoardStyle&gt; &lt;BoardListWrapper&gt; &#123;listsState.lists.map((list:ListsType) =&gt; &lt;Lists key=&#123;list.id&#125; list=&#123;list&#125;/&gt;)&#125; &lt;CreateLists /&gt; &lt;/BoardListWrapper&gt; &lt;/BoardStyle&gt;)&#125;export default ListPage; CardCard 리듀서store/reducers/card.ts12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import produce from 'immer';import &#123; action, ActionType, createReducer &#125; from 'typesafe-actions';import uuid from 'uuid';export const CREATE_CARD = \"CREATE_CARD\";export const UPDATE_CARD = \"UPDATE_CARD\";export const createCard = (listsId: string, cardName: string) =&gt; &#123; const id: string = uuid.v4(); return action(CREATE_CARD, &#123; id, cardName, listsId &#125;)&#125;export const updateCard = (cardId: string, cardName: string) =&gt; action(UPDATE_CARD, &#123; cardId, cardName &#125;);const actions = &#123; createCard, updateCard&#125;;export &#123; actions &#125;;export interface CardType &#123; id: string; cardName: string; listsId: string;&#125;export interface ListsState &#123; cards: CardType[];&#125;export type ListsActions = ActionType&lt;typeof actions&gt;;const initialState: ListsState = &#123; cards: []&#125;;export default createReducer&lt;ListsState, ListsActions&gt;(initialState, &#123; [CREATE_CARD]: (state, action) =&gt; produce(state, draft =&gt; &#123; draft.cards = [...state.cards, &#123; id: action.payload.id, listsId: action.payload.listsId, cardName: action.payload.cardName &#125;]; &#125;), [UPDATE_CARD]: (state, action) =&gt; produce(state, draft =&gt; &#123; draft.cards = state.cards.map((card: CardType) =&gt; &#123; if (card.id === action.payload.cardId) &#123; card = &#123; ...card, cardName: action.payload.cardName &#125;; &#125; return card; &#125;); &#125;)&#125;); store/reducers/index.ts123456789import &#123; combineReducers &#125; from \"redux\";import board from './board';import lists from './lists';import card from './card';const rootReducer = combineReducers(&#123; board, lists, card &#125;);export type RootState = ReturnType&lt;typeof rootReducer&gt;export default rootReducer; Card 컴포넌트components/Lists/CreateCard.tsx1234567891011121314151617181920212223242526272829303132import React, &#123; useState &#125; from 'react';import styled from 'styled-components';import &#123; useDispatch &#125; from 'react-redux';import &#123; FontAwesomeIcon &#125; from \"@fortawesome/react-fontawesome\";import &#123; faPlus &#125; from \"@fortawesome/free-solid-svg-icons\";import &#123; createCard &#125; from \"store/reducers/card\";//...const CreateCard: React.FC&lt;&#123; listId: string &#125;&gt; = (&#123; listId &#125;) =&gt; &#123; const dispatch = useDispatch(); const [cardName, setCardName] = useState(''); const create = () =&gt; &#123; dispatch(createCard(listId, cardName)) setCardName(''); &#125; return &lt;CreateCardWrapper&gt; &lt;Input placeholder=\"Add create card\" onChange=&#123;(e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; setCardName(e.target.value)&#125; value=&#123;cardName&#125; onKeyDown=&#123;(e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123; if (e.keyCode === 13 &amp;&amp; cardName) &#123; create(); &#125; &#125;&#125; /&gt; &lt;Icon&gt; &lt;FontAwesomeIcon icon=&#123;faPlus&#125; size=\"sm\" color=\"rgba(0,0,0,0.5)\" onClick=&#123;() =&gt; create()&#125; /&gt; &lt;/Icon&gt; &lt;/CreateCardWrapper&gt;&#125;export default CreateCard; components/Lists/ListsCard.tsx123456789101112131415161718192021222324252627282930313233343536import React, &#123; useRef &#125; from \"react\";import styled from \"styled-components\";import &#123; useDispatch &#125; from 'react-redux';import &#123; FontAwesomeIcon &#125; from \"@fortawesome/react-fontawesome\";import &#123; faPen &#125; from \"@fortawesome/free-solid-svg-icons\";import &#123; CardType, updateCard &#125; from \"store/reducers/card\";//...const ListCard: React.FC&lt;&#123; card: CardType &#125;&gt; = (&#123; card &#125;) =&gt; &#123; const inputEl = useRef&lt;HTMLInputElement&gt;(null); const dispatch = useDispatch(); return ( &lt;ListCardStyle&gt; &lt;ListCardContent&gt; &lt;ListCardInput ref=&#123;inputEl&#125; defaultValue=&#123;card.cardName&#125; onKeyDown=&#123;(e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123; const value = e.currentTarget.value; if (e.keyCode === 13 &amp;&amp; value) &#123; dispatch(updateCard(card.id, e.currentTarget.value)) e.currentTarget.blur(); &#125; &#125;&#125; /&gt; &lt;Icon onClick=&#123;() =&gt; &#123; if (inputEl &amp;&amp; inputEl.current) &#123; inputEl.current.focus(); &#125; &#125;&#125;&gt; &lt;FontAwesomeIcon icon=&#123;faPen&#125; size=\"sm\" color=\"rgba(0,0,0,0.5)\" /&gt; &lt;/Icon&gt; &lt;/ListCardContent&gt; &lt;/ListCardStyle&gt; );&#125;;export default ListCard; 이것으로 각각의 컴포넌트에 기능을 추가했습니다.다음 포스트에서는 리스트와 카드간의 드래그 앤 드롭부분을 구현해보도록 하겠습니다."},{"title":"Trello 클론 프로젝트 만들기 - 0","date":"2020-01-04T09:29:00.000Z","updated":"2021-04-30T03:36:18.545Z","comments":true,"path":"prevPost/trello-clone_0.html","permalink":"http://flamingotiger.github.io/prevPost/trello-clone_0.html","excerpt":"","text":"시작하기프로젝트 일정관리 웹어플리케이션인 trello를 클론코딩 하도록 하겠습니다. 이 클론 코딩으로 styled-components, react, redux 그리고 dnd 등을 구현해볼수 있습니다. 프로젝트 설정1create-react-app trello-clone --typescript 프로젝트에 타입스크립트를 이용할 예정입니다. 1npm install @fortawesome/fontawesome-svg-core @fortawesome/free-brands-svg-icons @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome @types/react-redux @types/react-router-dom @types/redux @types/styled-components @types/uuid immer react-redux react-router-dom redux redux-persist styled-components typesafe-actions typescript uuid 이후 상단의 패키지들을 설치합니다.fontawesome 아이콘 svg 파일을 제공해줍니다redux redux-persist 데이터 상태를 관리합니다.react-router-dom 페이지네이션을 제공합니다.uuid 고유아이디를 생성합니다. tsconfig.json 파일내부에 &quot;baseUrl&quot;: &quot;src&quot;을 추가해줍니다. 1234567&#123; \"compilerOptions\": &#123; //... \"baseUrl\": \"src\" &#125;,//...&#125; Redux 설정상태를 저장해줄 redux 설정을 하겠습니다. 참고예를들면 src/store/reducers/index.tsx 이라면src폴더 &gt; store폴더 &gt; reduccers &gt; index.tsx파일의 코드를 나타냅니다.src가 중복되서 사용되기 때문에 설명에서는 생략해서 작성하겠습니다. store/reducers/index.ts123456import &#123; combineReducers &#125; from \"redux\";const rootReducer = combineReducers(&#123; &#125;);export type RootState = ReturnType&lt;typeof rootReducer&gt;export default rootReducer; store/index.ts1234567891011121314151617181920import &#123; createStore, Store &#125; from 'redux';import rootReducer from './reducers';import &#123; persistStore, persistReducer &#125; from 'redux-persist';import storage from 'redux-persist/lib/storage';const persistConfig = &#123; key: 'root', storage&#125;;const persistedReducer = persistReducer(persistConfig, rootReducer);export default () =&gt; &#123; const isDev = process.env.NODE_ENV === 'development'; const reduxDevTools = isDev &amp;&amp; (window as any).__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; (window as any).__REDUX_DEVTOOLS_EXTENSION__(); const store:Store = createStore(persistedReducer, reduxDevTools); const persistor = persistStore(store); return &#123;store, persistor&#125;&#125; process.env.NODE_ENV는 환경변수로 이전의 환경변수 포스트를 통해서 자세하게 알아볼 수있습니다.persisted 및 reducer설정을 해주도록합니다. index.tsx123456789101112131415161718192021import React from 'react';import './index.css';import App from './App';import * as serviceWorker from './serviceWorker';import &#123; Provider &#125; from \"react-redux\";import &#123; PersistGate &#125; from \"redux-persist/integration/react\";import Store from 'store/index';const &#123; persistor, store &#125; = Store();ReactDOM.render( &lt;Provider store=&#123;store&#125;&gt; &lt;PersistGate loading=&#123;null&#125; persistor=&#123;persistor&#125;&gt; &lt;App /&gt; &lt;/PersistGate&gt; &lt;/Provider&gt;, document.getElementById('root'));// If you want your app to work offline and load faster, you can change// unregister() to register() below. Note this comes with some pitfalls.// Learn more about service workers: https://bit.ly/CRA-PWAserviceWorker.unregister(); 리덕스 설정을 적용시켜줍니다. Router 설정페이지이동이 가능하게 할 수 있도록 router를 설정하도록 하겠습니다. index.tsx12345678910111213141516//...import &#123; BrowserRouter &#125; from 'react-router-dom';import &#123; Provider &#125; from \"react-redux\";import &#123; PersistGate &#125; from \"redux-persist/integration/react\";import Store from 'store/index';const &#123; persistor, store &#125; = Store();ReactDOM.render( &lt;Provider store=&#123;store&#125;&gt; &lt;PersistGate loading=&#123;null&#125; persistor=&#123;persistor&#125;&gt; &lt;BrowserRouter&gt; &lt;App /&gt; &lt;/BrowserRouter&gt; &lt;/PersistGate&gt;//... 이것으로 설정이 완료되었습니다. 페이지 생성trello 보드를 입력하는 페이지 및 각각의 보드로 들어가서 보이는 리스트 페이지로 페이지를 만들도록 하겠습니다.그리고 각각에 해당하는 컴포넌트를 생성하겠습니다. pages/BoardPage.tsx123456789import React from 'react';const BoardPage:React.FC = () =&gt; &#123; return &lt;div&gt; BoardPage &lt;/div&gt;&#125;export default BoardPage; 보드 컴포넌트를 생성시킬 페이지입니다. pages/ListPage.tsx123456789import React from 'react';const ListPage:React.FC = () =&gt; &#123; return &lt;div&gt; ListPage &lt;/div&gt;&#125;export default ListPage; 리스트 컴포넌트를 생성시킬 페이지입니다. pages/NotFound.tsx1234567import React from 'react';const NotFound = () =&gt; &#123; return &lt;div&gt;NotFound&lt;/div&gt;&#125;export default NotFound; 잘못된 url로 이동시 보일 페이지입니다. App.tsx12345678910111213141516171819import React from 'react';import &#123; Switch, Route &#125; from 'react-router-dom';import BoardPage from 'pages/BoardPage';import ListPage from 'pages/ListPage';import NotFound from 'pages/NotFound';const App: React.FC = () =&gt; &#123; return ( &lt;div&gt; &lt;Switch&gt; &lt;Route exact path=\"/\" component=&#123;BoardPage&#125; /&gt; &lt;Route exact path=\"/board/:id\" component=&#123;ListPage&#125; /&gt; &lt;Route component=&#123;NotFound&#125; /&gt; &lt;/Switch&gt; &lt;/div&gt; );&#125;export default App; 각각의 페이지 라우터를 설정해주도록 합니다. Header 컴포넌트 생성components/Header.tsx1234567891011import React from 'react';import &#123; Link &#125; from 'react-router-dom';const Header = () =&gt; &#123; return &lt;header&gt; &lt;Link to=\"/\"&gt; &lt;span&gt;TRELLO CLONE&lt;/span&gt; &lt;/Link&gt; &lt;/header&gt;&#125;export default Header; App.tsx123456789101112131415161718192021import React from 'react';import &#123; Switch, Route &#125; from 'react-router-dom';import BoardPage from 'pages/BoardPage';import ListPage from 'pages/ListPage';import NotFound from 'pages/NotFound';import Header from 'components/Header';const App: React.FC = () =&gt; &#123; return ( &lt;div&gt; &lt;Header /&gt; &lt;Switch&gt; &lt;Route exact path=\"/\" component=&#123;BoardPage&#125; /&gt; &lt;Route exact path=\"/board/:id\" component=&#123;ListPage&#125; /&gt; &lt;Route component=&#123;NotFound&#125; /&gt; &lt;/Switch&gt; &lt;/div&gt; );&#125;export default App; Board 페이지 컴포넌트 생성보드 생성과 보드리스트를 보여줄 컴포넌트를 생성합니다. components/Boards/CreateBoardCard.tsx12345678import React from 'react';const CreateBoardCard: React.FC = () =&gt; &#123; return &lt;div&gt; &lt;input type=\"text\" placeholder=\"Create new board\"/&gt; &lt;/div&gt;&#125;export default CreateBoardCard; components/Boards/BoardCard.tsx12345678import React from 'react';import styled from 'styled-components';import &#123; Link &#125; from 'react-router-dom';const BoardCard: React.FC = () =&gt; &#123; return &lt;div&gt;&lt;Link to=&#123;`/board/1234`&#125;&gt;보드&lt;/Link&gt;&lt;/div&gt;&#125;export default BoardCard; pages/BoardPage.tsx123456789101112import React from 'react';import CreateBoardCard from 'components/Boards/CreateBoardCard';import BoardCard from 'components/Boards/BoardCard';const BoardPage:React.FC = () =&gt; &#123; return &lt;div&gt; &#123;[1,2,3,4].map((board: number) =&gt; &lt;BoardCard key=&#123;board&#125; /&gt;)&#125; &lt;CreateBoardCard /&gt; &lt;/div&gt;&#125;export default BoardPage; List 페이지 컴포넌트 생성보드를 선택하면 나오는 페이지의 리스트 및 리스트 내부 카드컴포넌트를 생성합니다. components/Lists/CreateCard.tsx123456789import React from 'react';const CreateCard: React.FC = () =&gt; &#123; return &lt;div&gt; &lt;input placeholder=\"Add create card\" /&gt; &lt;/div&gt;&#125;export default CreateCard; components/Lists/ListCard.tsx12345678910111213import React from \"react\";const ListCard: React.FC = () =&gt; &#123; return ( &lt;li&gt; &lt;div&gt; &lt;input type=\"text\" /&gt; &lt;/div&gt; &lt;/li&gt; );&#125;;export default ListCard; components/Lists/CreateLists.tsx1234567891011import React from 'react';const CreateLists: React.FC = () =&gt; &#123; return &lt;div&gt; &lt;div&gt; &lt;input type=\"text\" placeholder=\"Create lists\" /&gt; &lt;/div&gt; &lt;/div&gt;&#125;export default CreateLists; components/Lists/Lists.tsx12345678910111213141516171819import React from 'react';import ListCard from './ListCard';import CreateCard from './CreateCard';const Lists: React.FC = () =&gt; &#123; return &lt;div&gt; &lt;div&gt; &lt;div&gt; &lt;input type=\"text\" /&gt; &lt;/div&gt; &lt;ul&gt; &#123;[1,2,3,4].map((card: number, i: number) =&gt; &lt;ListCard key=&#123;number&#125; /&gt;)&#125; &lt;/ul&gt; &lt;CreateCard /&gt; &lt;/div&gt; &lt;/div&gt;&#125;export default Lists; pages/ListPage.tsx123456789101112131415import React from 'react';import Lists from 'components/Lists/Lists';import CreateLists from 'components/Lists/CreateLists';const ListPage:React.FC = () =&gt; &#123; return (&lt;section&gt; &lt;div&gt; &#123;[1,2,3,4].map((list: number) =&gt; &lt;Lists key=&#123;list&#125; /&gt;)&#125; &lt;CreateLists /&gt; &lt;/div&gt; &lt;/section&gt;)&#125;export default ListPage; 스타일 적용하기아이콘 및 스타일을 적용하도록 하겠습니다. App.tsx12345678910111213141516171819202122232425262728import React from 'react';import &#123; Switch, Route &#125; from 'react-router-dom';import BoardPage from 'pages/BoardPage';import ListPage from 'pages/ListPage';import NotFound from 'pages/NotFound';import Header from 'components/Header';import styled from 'styled-components';const AppStyle = styled.div` display:flex; flex-direction: column; height: 100vh;`const App: React.FC = () =&gt; &#123; return ( &lt;AppStyle&gt; &lt;Header /&gt; &lt;Switch&gt; &lt;Route exact path=\"/\" component=&#123;BoardPage&#125; /&gt; &lt;Route exact path=\"/board/:id\" component=&#123;ListPage&#125; /&gt; &lt;Route component=&#123;NotFound&#125; /&gt; &lt;/Switch&gt; &lt;/AppStyle&gt; );&#125;export default App; Header 스타일 적용components/Header.tsx1234567891011121314151617181920212223242526272829303132333435import React from 'react';import styled from 'styled-components';import &#123; FontAwesomeIcon &#125; from '@fortawesome/react-fontawesome';import &#123; faTrello &#125; from '@fortawesome/free-brands-svg-icons';import &#123; Link &#125; from 'react-router-dom';const HeaderStyle = styled.header` height: 60px; width: 100%; background-color: #026aa7; display: flex; align-items: center; justify-content: center;`const LinkStyle = styled(Link)` color: rgba(255,255,255,0.7); font-weight: bold; text-decoration: none; font-size: 24px; &amp;:hover&#123; color: rgba(255,255,255); &#125; span&#123; margin-left:10px; &#125;`const Header = () =&gt; &#123; return &lt;HeaderStyle&gt; &lt;LinkStyle to=\"/\"&gt; &lt;FontAwesomeIcon icon=&#123;faTrello&#125; size=\"lg\" /&gt; &lt;span&gt;TRELLO CLONE&lt;/span&gt; &lt;/LinkStyle&gt; &lt;/HeaderStyle&gt;&#125;export default Header; Board 스타일 적용하기components/Boards/BoardStyle.tsx12345678910111213141516171819import styled from \"styled-components\";export const BoardStyle = styled.div` width: calc(25% - 20px); height: 100px; margin: 10px; background-color: #026aa7; display: flex; align-items: center; justify-content: center; border-radius: 5px; cursor: pointer; color: #fff; font-weight: 700; transition: 0.2s; &amp;:hover&#123; transform: scale(1.05); &#125;` CreateBoardCard와 BoardCard에 동일한 스타일을 하나의 파일로 만들고 import를 합니다 components/Boards/BoardCard.tsx12345678910111213141516171819import React from 'react';import styled from 'styled-components';import &#123; Link &#125; from 'react-router-dom';import &#123; BoardStyle &#125; from './BoardStyle';const LinkStyle = styled(Link)` text-decoration: none; color: rgba(255,255,255,0.9); width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;`const BoardCard: React.FC = () =&gt; &#123; return &lt;BoardStyle&gt;&lt;LinkStyle to=&#123;`/board/1234`&#125;&gt;보드&lt;/LinkStyle&gt;&lt;/BoardStyle&gt;&#125;export default BoardCard; components/Boards/CreateBoardCard.tsx12345678910111213141516171819202122232425import React from 'react';import styled from 'styled-components';import &#123; BoardStyle &#125; from './BoardStyle';const CreateBoardCardStyle = styled(BoardStyle)` background-color: rgba(9,30,66,.04); color: #333; font-weight: normal; &amp;:hover&#123; background-color: rgba(9,30,66,.1); &#125;`const Input = styled.input` background-color: rgba(0,0,0,0); border: none; font-size: 14px; outline: none;`const CreateBoardCard: React.FC = () =&gt; &#123; return &lt;CreateBoardCardStyle&gt; &lt;Input type=\"text\" placeholder=\"Create new board\" /&gt; &lt;/CreateBoardCardStyle&gt;&#125;export default CreateBoardCard; pages/BoardPage.tsx12345678910111213141516171819import React from 'react';import styled from 'styled-components';import CreateBoardCard from 'components/Boards/CreateBoardCard';import BoardCard from 'components/Boards/BoardCard';const BoardWrap = styled.section` width: 100%; display: flex; flex-wrap: wrap;`const BoardPage:React.FC = () =&gt; &#123; return &lt;BoardWrap&gt; &#123;[1,2,3,4].map((board: number) =&gt; &lt;BoardCard key=&#123;board&#125; /&gt;)&#125; &lt;CreateBoardCard /&gt; &lt;/BoardWrap&gt;&#125;export default BoardPage; List 스타일 적용하기components/Lists/CreateCard.tsx1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import React from 'react';import styled from 'styled-components';import &#123; FontAwesomeIcon &#125; from \"@fortawesome/react-fontawesome\";import &#123; faPlus &#125; from \"@fortawesome/free-solid-svg-icons\";const CreateCardWrapper = styled.div` position: relative; padding: 5px; box-sizing: border-box;`const Icon = styled.div` position: absolute; right: 10px; top: 50%; margin-top: -10px; width: 20px; height: 20px; border-radius: 4px; align-items: center; justify-content: center; cursor: pointer; display: flex; align-items: center; justify-content: center; &amp;:hover&#123; background-color: rgba(0,0,0,0.1); &#125;`const Input = styled.input` width: 100%; box-sizing: border-box; padding: 10px; font-size: 14px; outline: none; border-radius: 4px; border: none;`const CreateCard: React.FC = () =&gt; &#123; return &lt;CreateCardWrapper&gt; &lt;Input type=\"text\" placeholder=\"Add create card\"/&gt; &lt;Icon&gt; &lt;FontAwesomeIcon icon=&#123;faPlus&#125; size=\"sm\" color=\"rgba(0,0,0,0.5)\"/&gt; &lt;/Icon&gt; &lt;/CreateCardWrapper&gt;&#125;export default CreateCard; components/Lists/ListCard.tsx1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import React from \"react\";import styled from \"styled-components\";import &#123; FontAwesomeIcon &#125; from \"@fortawesome/react-fontawesome\";import &#123; faPen &#125; from \"@fortawesome/free-solid-svg-icons\";const ListCardStyle = styled.li` list-style: none; flex: 1 1 auto; margin-bottom: 0; overflow-y: auto; overflow-x: hidden; margin: 0 4px; padding: 0 4px; z-index: 1; min-height: 0;`;const Icon = styled.div` position: absolute; right: 10px; top: 50%; margin-top: -10px; width: 20px; height: 20px; border-radius: 4px; display: none; align-items: center; justify-content: center; &amp;:hover&#123; background-color: rgba(0, 0, 0, 0.1); &#125;`;const ListCardContent = styled.div` background-color: #fff; border-radius: 3px; box-shadow: 0 1px 0 rgba(9, 30, 66, 0.25); cursor: pointer; display: block; margin-bottom: 8px; max-width: 300px; min-height: 20px; position: relative; text-decoration: none; z-index: 0; padding: 8px; box-sizing: border-box; &amp;:hover &#123; background: rgba(0,0,0,0.02); $&#123;Icon&#125; &#123; display: flex; &#125;; &#125;`;const ListCardInput = styled.input` border: none; background: none; font-size: 14px; outline: none;`const ListCard: React.FC = () =&gt; &#123; return ( &lt;ListCardStyle&gt; &lt;ListCardContent&gt; &lt;ListCardInput type=\"text\"/&gt; &lt;Icon&gt; &lt;FontAwesomeIcon icon=&#123;faPen&#125; size=\"sm\" color=\"rgba(0,0,0,0.5)\" /&gt; &lt;/Icon&gt; &lt;/ListCardContent&gt; &lt;/ListCardStyle&gt; );&#125;;export default ListCard; components/Lists/Lists.tsx1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import React from 'react';import styled from 'styled-components';import ListCard from './ListCard';import CreateCard from './CreateCard';const ListsWrapper = styled.div` width: 272px; margin: 0 4px; height: 100%; box-sizing: border-box; display: inline-block; vertical-align: top; white-space: nowrap;`const ListsContent = styled.div` background-color: #ebecf0; border-radius: 3px; box-sizing: border-box; display: flex; flex-direction: column; max-height: 100%; position: relative; white-space: normal;`const ListsStyle = styled.ul` list-style: none; margin: 0; padding: 0;`const ListHeader = styled.input` background-color: rgba(255,255,255,0); border: 0 none; user-select: none; font-size: 14px; line-height: 18px; height: 18px; padding-left: 10px; font-weight: bold; outline: none;`const ListHeaderWrapper = styled.div` height: 40px; display: flex; align-items: center;`const Lists: React.FC = () =&gt; &#123; return &lt;ListsWrapper&gt; &lt;ListsContent&gt; &lt;ListHeaderWrapper&gt; &lt;ListHeader type=\"text\" /&gt; &lt;/ListHeaderWrapper&gt; &lt;ListsStyle&gt; &#123;[1,2,3,4].map((card: number, i: number) =&gt; &lt;ListCard key=&#123;number&#125; /&gt;)&#125; &lt;/ListsStyle&gt; &lt;CreateCard /&gt; &lt;/ListsContent&gt; &lt;/ListsWrapper&gt;&#125;export default Lists; components/Lists/CreateLists.tsx12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import React from 'react';import styled from 'styled-components';import &#123; useParams &#125; from 'react-router-dom';const ListsWrapper = styled.div` width: 272px; margin: 0 4px; height: 100%; box-sizing: border-box; display: inline-block; vertical-align: top; white-space: nowrap;`const ListsContent = styled.div` background-color: rgba(0,0,0,0.3); border-radius: 3px; box-sizing: border-box; display: flex; flex-direction: column; max-height: 100%; position: relative; white-space: normal; &amp;:hover &#123; background-color: rgba(0,0,0,0.2); &#125;`const ListHeader = styled.input` background-color: rgba(255,255,255,0); color: #fff; border: 0 none; user-select: none; font-size: 14px; line-height: 40px; height: 40px; padding-left: 10px; font-weight: bold; &amp;::placeholder&#123; color: #fff; &#125;`const CreateLists: React.FC = () =&gt; &#123; return &lt;ListsWrapper&gt; &lt;ListsContent&gt; &lt;ListHeader type=\"text\" placeholder=\"Create lists\" /&gt; &lt;/ListsContent&gt; &lt;/ListsWrapper&gt;&#125;export default CreateLists; pages/ListPage.tsx12345678910111213141516171819202122232425262728293031323334353637383940import React from 'react';import styled from 'styled-components';import Lists from 'components/Lists/Lists';import CreateLists from 'components/Lists/CreateLists';import &#123; useSelector &#125; from 'react-redux';import &#123; RootState &#125; from 'store/reducers';import &#123; ListsType &#125; from 'store/reducers/lists';const BoardStyle = styled.section` height: 100%; overflow-y: auto; position: relative;`const BoardListWrapper = styled.div` white-space: nowrap; user-select: none; position: relative; margin-bottom: 8px; overflow-x: auto; overflow-y: hidden; padding-bottom: 8px; position: absolute; top: 0; right: 0; bottom: 0; left: 0;`const ListPage = () =&gt; &#123; const listsState = useSelector((state:RootState) =&gt; state.lists); return (&lt;BoardStyle&gt; &lt;BoardListWrapper&gt; &#123;listsState.lists.map((list:ListsType) =&gt; &lt;Lists key=&#123;list.id&#125; list=&#123;list&#125;/&gt;)&#125; &lt;CreateLists /&gt; &lt;/BoardListWrapper&gt; &lt;/BoardStyle&gt;)&#125;export default ListPage; 이것으로 컴포넌트 및 페이지 스타일을 넣어 보았습니다.다음 포스트에서는 각각의 컴포넌트에 기능을 추가합니다."}],"posts":[{"title":"아두이노 블루투스 모듈 사용법 (arduino hm10 module)","slug":"etc/arduino/hm10-module","date":"2022-10-31T01:53:56.000Z","updated":"2022-10-31T04:08:44.575Z","comments":true,"path":"etc/arduino/hm10-module/","link":"","permalink":"http://flamingotiger.github.io/etc/arduino/hm10-module/","excerpt":"","text":"시작하며아두이노와 블루투스 모듈 hm10을 연결해서 사용하는 방법을 알아보겠습니다.hm10의 모듈에 관한 자세한 정보는 hm10 데이터시트에서 확인할 수 있습니다. 전체적으로 많이 사용하는 hc06과 hm10 중에 hc06는 블루투스 버전이 2버전으로 낮기 때문에 제가 사용할 웹 블루투스 api에서는 사용할 수 없기 때문에 블루투스 ble 및 4버전을 지원하는 hm10을 사용하기로 했습니다. 다른 기술 블로그들이나 테스트하는 영상들을 보면 항상 앱 스토어 및 플레이스토어에서 터미널 앱을 설치해서 사용하는 것을 확인 할 수 있었는데, 이건 실질적으로 앱 혹은 웹 프로젝트를 만드는데 있어서 테스트용도일 뿐이지 의미없는 것이라 생각되었습니다. 그래서 직접 구현해 보도록 하겠습니다. 회로도아두이노 회로도는 circuito을 통해서 쉽게 연결해볼수 있습니다. 블루투스 모듈을 보면 VCC, GND, TXD, RXD라고 쓰여있습니다. VCC: 전압을 나타냅니다. GND: 기준전압 입니다. 전기의 기준점이라고 생각하면 됩니다. TXD: 데이터 전송을 위한 포트로 디지털 핀에 연결할 수 있습니다. RXD: 데이터 수신을 위한 포트로 디지털 핀에 연결할 수 있습니다. 블루투스 모듈의 VCC와 우노의 5V핀과 연결합니다. 전원공급을 하는 것이라고 생각하시면 됩니다. 블루투스 모듈의 GND와 우노의 GND핀과 연결합니다. 블루투스 모듈의 TXD와 우노의 디지털2핀과 연결합니다. 블루투스 모듈의 RXD와 우노의 디지털3핀과 연결합니다. 우노의 디지털핀은 0번-rx, 1번-tx, 2번-rx, 3번-tx…이런 순서로 전송과 수신이라고 생각하고, 모듈과는 반대로 꽂아주어야 합니다. RX는 수신 TX는 송신일때, 우노와 모듈이 둘다 TX(송신)로 연결하면 수신이 없고, 둘다 RX(수신)으로 연결하면 전송이 없어서 제대로 작동하지 않습니다. 코드 작성123456789101112131415161718192021222324#include &lt;SoftwareSerial.h&gt;// 블루투스 모듈 포트 설정 (HM10)#define BT_RXD 2#define BT_TXD 3SoftwareSerial BTSerial(BT_RXD, BT_TXD);void setup() &#123; Serial.begin(9600); // PC에서 모니터링하기 위한 시리얼 통신 시작 BTSerial.begin(9600); Serial.println(\"Bluetooth initial\");&#125;void loop() &#123; char c; if (Serial.available()) &#123; c = Serial.read(); BTSerial.print(c); &#125; if (BTSerial.available()) &#123; c = BTSerial.read(); Serial.print(c); &#125;&#125; 공식홈페이지에서 software-serial의 함수들을 확인 할수 있습니다. 12Serial.begin(9600); // PC에서 모니터링하기 위한 시리얼 통신 시작BTSerial.begin(9600); 블루투스 통신과 우노의 시리얼 통신 속도를 맞추어 주어야합니다. 1SoftwareSerial mySerial(rxPin, txPin); HM10 모듈의 UUID블루투스의 ble 통신의 경우 service &gt; characteristic의 구조가 있습니다. 자세한 설명은 다른 블로그 포스트에서 설명하겠습니다.hm10 모듈에서는 블루투스 페어링이후 쓰기 및 읽기에 대한 특성을 제공합니다.블루투스 모듈의 이름을 알거나 수정하기 위해서는 AT command를 이용하면 수정 가능합니다. 12345const uuids = &#123; serviceUUID = \"0000ffe0-0000-1000-8000-00805f9b34fb\", // service uuid readUUID = \"0000ffe1-0000-1000-8000-00805f9b34fb\", // characteristic uuid writeUUID = \"0000ffe1-0000-1000-8000-00805f9b34fb\" // characteristic uuid&#125; AT 통신(옵션)맨 처음 HM10관련 데이터 시트에서도 나와있는 내용입니다기본 값으로는 블루투스 페어링이 되어있지 않은 상태에서 AT 명령어를 사용할 수 있습니다.다른 외부 기기와 페어링이 된 상태에서 AT명령어를 사용하기 위해서는 mode를 변경해주어야 합니다. AT명령어가 되는지 우선 확인을 해보아야합니다.AT를 입력했을때 OK라는 글자가 나와야합니다. OK가 안나올때 체크요소 블루투스 모듈 값을 Serial로 print해주는 코드가 있는지 확인(아래와 같은 코드) 선이 제대로 연결이 되어있는지 확인. 다른 라이브러리와 같이 사용하고 있는지 검토 (다른 라이브러리 예를들어, es522랑 사용할때 print가 안되는 이슈가 있었음) 다른 hm10모듈을 사용해본다. 블루투스 모듈 관련 코드만 남겨서 테스트를 해본다. OK글자가 나오는 원리는 다음과 같습니다. 123456789char c; if (Serial.available()) &#123; c = Serial.read(); BTSerial.print(c); &#125; if (BTSerial.available()) &#123; c = BTSerial.read(); Serial.print(c); &#125; 블루투스 모듈의 AT를 터미널창에 입력 Serial.available에서 인식 시리얼에서 인식한 값을 BTSerial.print(c)을 통해서 블루투스 모듈로 입력 블루투스 모듈에서 인식한 값을 BTSerial.available 에서 인식 인식된 값을 시리얼로 출력을 해줍니다. 영문은 전부 대문자여야 합니다.대부분 현재 상태정보를 확인하기 위해서는 명령어 끝에 ?를 넣습니다. 이름짓기 AT+NAME? : 기기 이름이 무엇인지 AT+NAMEHM10 : 기기이름을 HM10으로 짓기 모드 변경 AT+MODE? : 기기모드 확인 AT+MODE1 : 기기모드를 1로 변경","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"arduino","slug":"etc/arduino","permalink":"http://flamingotiger.github.io/categories/etc/arduino/"}],"tags":[{"name":"arduino","slug":"arduino","permalink":"http://flamingotiger.github.io/tags/arduino/"},{"name":"hm10","slug":"hm10","permalink":"http://flamingotiger.github.io/tags/hm10/"},{"name":"bluetooth","slug":"bluetooth","permalink":"http://flamingotiger.github.io/tags/bluetooth/"},{"name":"module","slug":"module","permalink":"http://flamingotiger.github.io/tags/module/"}]},{"title":"RFID 하이퍼 터미널 테스트(mac OS)","slug":"etc/rfid/rfid-hyper-terminal-test-mac-os","date":"2022-06-10T08:08:30.000Z","updated":"2022-06-10T08:31:00.094Z","comments":true,"path":"etc/rfid/rfid-hyper-terminal-test-mac-os/","link":"","permalink":"http://flamingotiger.github.io/etc/rfid/rfid-hyper-terminal-test-mac-os/","excerpt":"","text":"RFID 구매맥에서 RFID를 테스트 해보기 위해서 RFID 리더기를 구매하였다. 그런데 USB를 연결하고 터치를 해도 값이 나오지 않았다. 연결이 제대로 되었는지 확인하기 위해서 하이퍼 터미널로 테스트를 해보려고 한다. 하이퍼 터미널윈도우에서는 하이퍼 터미널이 따로 있지만 맥에서는 따로 존재하지 않고 터미널을 통해서 사용할 수 있다.터미널 프로그램에서 screen을 사용하면 시리얼 터미널 프로그램으로 사용할 수 있다.사용하는 방법은 1screen [연결된 USB 디바이스 이름] [통신속도] 통신속도: 110, 300, 120, 2400, 4800, 9600, 1440, 19200, 28800, 38400, 57600, 115200를 예시로 들 수 있다. 테스트 시작터미널을 열고 /dev 디렉터리로 진입한다. 1cd /dev /dev파일에 드라이버가 설치되거나 자동으로 인식된다. /dev 디렉토리에서 연결된 usb를 찾아야합니다. 1ls 이름은 주로 tty.usbserial-*형식이거나 *.usbserial.*형식으로 되어있습니다. 파일 명을 찾았으면 다음과 같이 터미널에 입력합니다. 1screen /dev/tty.usbserial-0001 9600 그러면 빈 터미널이 나오는데 실행이 완료된 것 입니다.이후 rfid 카드를 리더기에 인식해보면 값이 나오는 것을 확인할 수 있습니다. screen 명령어 오류시screen /dev/tty.usbserial-0001 9600 이렇게 명령어를 입력했는데 다음과 같은 오류가 난 경우는 이미 하이퍼 터미널이 실행되어있다는 것입니다.현재 실행되어있는 screen이 있는지 확인하기 위해서 다음과 같이 명령어를 입력해 줍니다. 1screen -ls 그러면 다음같이 There is a screen on:~ 이렇게 텍스트가 나오는데 현재 실행되어있는 screen을 보여주고 있는 것입니다.켜져있는 터미널을 실행하기 위해 바로 아래에 *.ttys000.*를 복사합니다.그리고 다음 명령어를 입력합니다. 1screen -r [복사한 스크린] 그러면 정상적으로 실행되는 것을 확인할 수 있습니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"rfid","slug":"etc/rfid","permalink":"http://flamingotiger.github.io/categories/etc/rfid/"}],"tags":[{"name":"rfid","slug":"rfid","permalink":"http://flamingotiger.github.io/tags/rfid/"},{"name":"maxos","slug":"maxos","permalink":"http://flamingotiger.github.io/tags/maxos/"},{"name":"screen","slug":"screen","permalink":"http://flamingotiger.github.io/tags/screen/"},{"name":"hyperterminal","slug":"hyperterminal","permalink":"http://flamingotiger.github.io/tags/hyperterminal/"}]},{"title":"M1칩 mac에서 React native android 실행시 'Caused by java.io.IOException Cannot run program \"node\"'에러","slug":"frontend/ReactNative/react-native-android-cannot-run-program-node","date":"2022-02-04T02:44:11.000Z","updated":"2022-02-04T02:51:01.941Z","comments":true,"path":"frontend/ReactNative/react-native-android-cannot-run-program-node/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-android-cannot-run-program-node/","excerpt":"","text":"시작하기React native 공식홈페이지에서 나와 있는데로 프로그램 셋팅을 하고, 프로젝트를 안드로이드 스튜디오로 켰을때 Caused by: java.io.IOException: Cannot run program &quot;node&quot;에러가 나왔습니다. 이때 해결방법을 찾아보았습니다. 이 문제가 m1칩이 탑재된 맥에서 나오는 것으로 알고 있습니다.해결방법은 간단합니다. 해결방법환경구성을 안했다면 먼저 React native 초기 설치하기포스트에서 안드로이드 환경변수 설정을 먼저 해주도록 합니다. 환경변수 설정을 해도 에러가 나온다면, 다음 솔루션을 진행합니다.터미널을 켜서 다음 명령어를 실행해줍니다. 1sudo chmod +x /Applications/Android\\ Studio.app/Contents/bin/printenv 이후 안드로이드 스튜디오를 종료하고 다시 프로젝트를 열면 정상적으로 작동하는 것을 확인할 수 있습니다. 참고사이트Gradle sync stop working with “Cannot run program “node” message #1457 깃헙참고 사이트 stackoverflow","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"andorid","slug":"andorid","permalink":"http://flamingotiger.github.io/tags/andorid/"},{"name":"error","slug":"error","permalink":"http://flamingotiger.github.io/tags/error/"}]},{"title":"pod install시 [IMPORTANT] Don't forget to include the Crash Report log file under DiagnosticReports directory in bug reports 에러 발생시","slug":"frontend/ReactNative/react-native-pod-install-error","date":"2022-01-26T03:47:52.000Z","updated":"2022-01-26T03:59:08.882Z","comments":true,"path":"frontend/ReactNative/react-native-pod-install-error/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-pod-install-error/","excerpt":"","text":"시작하기React Native 프로젝트에서 패키지를 추가 하고 나서 pod install 명령어를 입력해서 패키지를 설치하려고 했는데,다음과 같은 에러가 나왔다.[IMPORTANT] Don&#39;t forget to include the Crash Report log file under DiagnosticReports directory in bug reports.해결책은 간단합니다.(m1 맥미니, Monterey, node v14.17.0버전에서 테스트를 했습니다.) 솔루션React native 초기 설정하기에서 포스팅한것처럼 rosetta 터미널에서 pod install 명령입력해주면 정상적으로 설치되는 것을 확인 할 수 있습니다. 느낀점React native에서 패키지를 설치하거나 환경설정을 해야할때 터미널을 이용한다면 rosetta를 이용하는 편이 마음이 편하다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"install","slug":"install","permalink":"http://flamingotiger.github.io/tags/install/"},{"name":"cocoapod","slug":"cocoapod","permalink":"http://flamingotiger.github.io/tags/cocoapod/"}]},{"title":"React native Permissions 사용하여 권한 확인하기","slug":"frontend/ReactNative/react-native-permissions","date":"2022-01-14T08:42:21.000Z","updated":"2022-01-14T08:52:07.232Z","comments":true,"path":"frontend/ReactNative/react-native-permissions/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-permissions/","excerpt":"","text":"시작하기React native permissions 라이브러리를 통해서 이 기기에서 권한이 허용되었는지 여부를 체크할 수 있습니다.안드로이드에서는 React native에 내장된 PermissionsAndroid 를 사용하는 방법도 있습니다.IOS는 React native 공식문서에 따로 기재되어있지 않아서 공통적으로 권한 관리를 하기 위해서 react native permissions을 사용하도록 하겠습니다. 설치 및 환경설정1npm i react-native-permissions react-native-permissions 패키지를 설치해줍니다.이후에 Podfile을 수정해줍니다. Podfile123456789101112131415161718192021222324252627target 'YourAwesomeProject' do # … permissions_path = '../node_modules/react-native-permissions/ios' # 🚨 앱에서 사용하는 허용 권한만 추가해줍니다. 🚨 pod 'Permission-AppTrackingTransparency', :path =&gt; \"#&#123;permissions_path&#125;/AppTrackingTransparency\" pod 'Permission-BluetoothPeripheral', :path =&gt; \"#&#123;permissions_path&#125;/BluetoothPeripheral\" pod 'Permission-Calendars', :path =&gt; \"#&#123;permissions_path&#125;/Calendars\" pod 'Permission-Camera', :path =&gt; \"#&#123;permissions_path&#125;/Camera\" pod 'Permission-Contacts', :path =&gt; \"#&#123;permissions_path&#125;/Contacts\" pod 'Permission-FaceID', :path =&gt; \"#&#123;permissions_path&#125;/FaceID\" pod 'Permission-LocationAccuracy', :path =&gt; \"#&#123;permissions_path&#125;/LocationAccuracy\" pod 'Permission-LocationAlways', :path =&gt; \"#&#123;permissions_path&#125;/LocationAlways\" pod 'Permission-LocationWhenInUse', :path =&gt; \"#&#123;permissions_path&#125;/LocationWhenInUse\" pod 'Permission-MediaLibrary', :path =&gt; \"#&#123;permissions_path&#125;/MediaLibrary\" pod 'Permission-Microphone', :path =&gt; \"#&#123;permissions_path&#125;/Microphone\" pod 'Permission-Motion', :path =&gt; \"#&#123;permissions_path&#125;/Motion\" pod 'Permission-Notifications', :path =&gt; \"#&#123;permissions_path&#125;/Notifications\" pod 'Permission-PhotoLibrary', :path =&gt; \"#&#123;permissions_path&#125;/PhotoLibrary\" pod 'Permission-PhotoLibraryAddOnly', :path =&gt; \"#&#123;permissions_path&#125;/PhotoLibraryAddOnly\" pod 'Permission-Reminders', :path =&gt; \"#&#123;permissions_path&#125;/Reminders\" pod 'Permission-Siri', :path =&gt; \"#&#123;permissions_path&#125;/Siri\" pod 'Permission-SpeechRecognition', :path =&gt; \"#&#123;permissions_path&#125;/SpeechRecognition\" pod 'Permission-StoreKit', :path =&gt; \"#&#123;permissions_path&#125;/StoreKit\"end Info.plist1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt; &lt;!-- 🚨 앱에서 사용하는 허용 권한만 추가해줍니다. 🚨 --&gt; &lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSBluetoothAlwaysUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSCameraUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSContactsUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSFaceIDUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSLocationAlwaysAndWhenInUseUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSLocationTemporaryUsageDescriptionDictionary&lt;/key&gt; &lt;dict&gt; &lt;key&gt;YOUR-PURPOSE-KEY&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;/dict&gt; &lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSMotionUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSPhotoLibraryAddUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSRemindersUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSSpeechRecognitionUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSSiriUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;key&gt;NSUserTrackingUsageDescription&lt;/key&gt; &lt;string&gt;YOUR TEXT&lt;/string&gt; &lt;!-- … --&gt;&lt;/dict&gt;&lt;/plist&gt; AndroidAndroidManifest.xml123456789101112131415161718192021222324252627282930313233343536373839404142&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.myawesomeapp\"&gt; &lt;!-- 🚨 앱에서 사용하는 허용 권한만 추가해줍니다. 🚨 --&gt; &lt;uses-permission android:name=\"android.permission.ACCEPT_HANDOVER\" /&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\" /&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_MEDIA_LOCATION\" /&gt; &lt;uses-permission android:name=\"android.permission.ACTIVITY_RECOGNITION\" /&gt; &lt;uses-permission android:name=\"android.permission.ANSWER_PHONE_CALLS\" /&gt; &lt;uses-permission android:name=\"android.permission.BLUETOOTH_ADVERTISE\" /&gt; &lt;uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\" /&gt; &lt;uses-permission android:name=\"android.permission.BLUETOOTH_SCAN\" /&gt; &lt;uses-permission android:name=\"android.permission.BODY_SENSORS\" /&gt; &lt;uses-permission android:name=\"android.permission.CALL_PHONE\" /&gt; &lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt; &lt;uses-permission android:name=\"android.permission.GET_ACCOUNTS\" /&gt; &lt;uses-permission android:name=\"android.permission.PROCESS_OUTGOING_CALLS\" /&gt; &lt;uses-permission android:name=\"android.permission.READ_CALENDAR\" /&gt; &lt;uses-permission android:name=\"android.permission.READ_CALL_LOG\" /&gt; &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\" /&gt; &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt; &lt;uses-permission android:name=\"android.permission.READ_PHONE_NUMBERS\" /&gt; &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt; &lt;uses-permission android:name=\"android.permission.READ_SMS\" /&gt; &lt;uses-permission android:name=\"android.permission.RECEIVE_MMS\" /&gt; &lt;uses-permission android:name=\"android.permission.RECEIVE_SMS\" /&gt; &lt;uses-permission android:name=\"android.permission.RECEIVE_WAP_PUSH\" /&gt; &lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\" /&gt; &lt;uses-permission android:name=\"android.permission.SEND_SMS\" /&gt; &lt;uses-permission android:name=\"android.permission.USE_SIP\" /&gt; &lt;uses-permission android:name=\"android.permission.WRITE_CALENDAR\" /&gt; &lt;uses-permission android:name=\"android.permission.WRITE_CALL_LOG\" /&gt; &lt;uses-permission android:name=\"android.permission.WRITE_CONTACTS\" /&gt; &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt; &lt;uses-permission android:name=\"com.android.voicemail.permission.ADD_VOICEMAIL\" /&gt; &lt;!-- … --&gt;&lt;/manifest&gt; 사용하기123456789101112131415161718192021222324import &#123; Platform &#125; from \"react-native\";import &#123; PERMISSIONS, RESULTS, request &#125; from \"react-native-permissions\";useEffect(() =&gt; &#123; const permissionCheck = () =&gt; &#123; if (Platform.OS !== \"ios\" &amp;&amp; Platform.OS !== \"android\") return; const platformPermissions = Platform.OS === \"ios\" ? PERMISSIONS.IOS.CAMERA : PERMISSIONS.ANDROID.CAMERA; const requestCameraPermission = async () =&gt; &#123; try &#123; const result = await request(platformPermissions); result === RESULTS.GRANTED ? setOpenScanner(true) : Alert.alert(\"카메라 권한을 허용해주세요\"); &#125; catch (err) &#123; Alert.alert(\"Camera permission err\"); console.warn(err); &#125; &#125;; requestCameraPermission(); &#125;;&#125;, []); 번외Android react native PermissionsAndroid 사용해보는 방법도 알아보겠습니다. 123456789101112131415161718192021222324252627282930import &#123; Platform, PermissionsAndroid,&#125; from 'react-native';useEffect(() =&gt; &#123; if (Platform.OS === 'android') &#123;const requestCameraPermission = async () =&gt; &#123; try &#123; const granted = await PermissionsAndroid.request( PermissionsAndroid.PERMISSIONS.CAMERA, &#123; title: 'Camera Permission', message: 'App needs permission for camera access', buttonPositive: 'OK', &#125;, ); if(granted === PermissionsAndroid.RESULTS.GRANTED)&#123; Alert.alert(‘success’); &#125;else &#123; Alert.alert(‘Please camera permission’); &#125; &#125; catch (err) &#123; Alert.alert('Camera permission err'); console.warn(err); &#125; &#125;; requestCameraPermission();&#125;&#125;,[]); 테스트시뮬레이터에서 테스트를 해보겠습니다. 설정에서 허용안함을 해보겠습니다. 카메라 작동이 안되는 것을 확인할 수 있습니다. 다시 카메라를 허용하면, 카메라가 다시 작동하는 것을 확인할 수 있습니다. 에러시No permission handler detected 에러가 나온다면 Xcode -&gt; Product -&gt; Clean Build Folder 작업을 한번 해주세요","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"qrcode","slug":"qrcode","permalink":"http://flamingotiger.github.io/tags/qrcode/"},{"name":"permissions","slug":"permissions","permalink":"http://flamingotiger.github.io/tags/permissions/"}]},{"title":"React native QRcode scanner 사용하기","slug":"frontend/ReactNative/react-native-qrcode-scanner","date":"2022-01-13T06:57:42.000Z","updated":"2022-01-13T07:16:11.712Z","comments":true,"path":"frontend/ReactNative/react-native-qrcode-scanner/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-qrcode-scanner/","excerpt":"","text":"시작하기react-native 앱에서 QR코드를 스캔할 수 있는 스캐너를 라이브러리를 이용하여 구현해보도록 하겠습니다.사용한 버전은 다음과 같습니다. Xcode: 12.5 1234&#123; \"react\": \"17.0.2\", \"react-native\": \"0.66.4\"&#125; 라이브러리 정하기수많은 라이브러리 중 결론부터 말하자면 react-native-camera-kit라이브러리를 사용할 것입니다.이 라이브러리를 정한 이유는 아래에 나와있습니다. QR코드 스캐너 라이브러리 react-native-qrcode-scanner ❌ (react-native-camera)카메라 라이브러리필요 QR코드를 스캔하기 위해서 우선 스마트폰의 카메라 설치해야합니다. 카메라 라이브러리로는 react-native-camera ❌ react-native-vision-camera ❌ react-native-camera-kit ✅이렇게 세가지가 많이 사용되는 것으로 보입니다. 현시점에서 react-native-camera는 deprecated가 되어 더이상 업데이트가 없어서 사용하지 않습니다.그러므로 react-native-camera와 react-native-recode-scanner는 사용할 수 없습니다. react-native-camera 깃헙에서 react-native-vision-camera 라이브러리가 더 기능이 추가되고 성능이 향상되었다고 설명하며 링크가 연결되어 있습니다.다만, 지금은 react-native 처음 초기 설정이후 라이브러리 설치후 빌드에서 에러가 나오는 현상이 유지되고 있기 때문에 사용하기는 어렵다고 판단이 됩니다.(관련링크 이슈)그래서 사용하기도 간편하고 쉬운 react-native-camera-kit라이브러리를 사용할 예정입니다. 설치하기react-native-camera-kit 깃헙 링크 1npm install react-native-camera-kit --save &amp;&amp; cd ios &amp;&amp; pod install &amp;&amp; cd .. 위에 명령어를 사용해서 라이브러리를 설치하고 ios파일에서 pod패키지를 설치하고 다시 루트로 돌아옵니다. 카메라 권한 허용해주기카메라를 이용하기 위해서는 권한을 허용해주어야 사용할 수 있습니다. Android루트 경로에서 android/src/main/AndroidManifest.xml 12&lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt; iOS루트 경로에서 ios/PROJECT_NAME/Info.list다음 값을 추가해줍니다. 12345&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;&lt;string&gt;For taking photos&lt;/string&gt;&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;&lt;string&gt;For saving photos&lt;/string&gt; 사용하기스캐너 컴포넌트를 생성합니다. QRCodeScanner.tsx12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import React, &#123; useEffect, useRef, useState &#125; from \"react\";import &#123; Alert, Button, Dimensions, StyleSheet, Vibration, View,&#125; from \"react-native\";import &#123; Camera, CameraType &#125; from \"react-native-camera-kit\";const QRCodeScanner = () =&gt; &#123; const [scaned, setScaned] = useState&lt;boolean&gt;(true); const ref = useRef(null); useEffect(() =&gt; &#123; // 종료후 재시작을 했을때 초기화 setScaned(true); &#125;, []); const onBarCodeRead = (event: any) =&gt; &#123; if (!scaned) return; setScaned(false); Vibration.vibrate(); Alert.alert(\"QR Code\", event.nativeEvent.codeStringValue, [ &#123; text: \"OK\", onPress: () =&gt; setScaned(true) &#125;, ]); &#125;; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Camera style=&#123;styles.scanner&#125; ref=&#123;ref&#125; cameraType=&#123;CameraType.Back&#125; // Front/Back(default) zoomMode focusMode // Barcode Scanner Props scanBarcode showFrame=&#123;false&#125; laserColor=\"rgba(0, 0, 0, 0)\" frameColor=\"rgba(0, 0, 0, 0)\" surfaceColor=\"rgba(0, 0, 0, 0)\" onReadCode=&#123;onBarCodeRead&#125; /&gt; &lt;/View&gt; );&#125;;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, width: Dimensions.get(\"window\").width, height: Dimensions.get(\"window\").height, &#125;, scanner: &#123; flex: 1 &#125;,&#125;);export default QRCodeScanner; App.tsx1234567const App = () =&gt; &#123; return ( &lt;View&gt; &lt;QRCodeScanner /&gt; &lt;/View&gt; );&#125;;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"qrcode","slug":"qrcode","permalink":"http://flamingotiger.github.io/tags/qrcode/"},{"name":"QR","slug":"QR","permalink":"http://flamingotiger.github.io/tags/QR/"},{"name":"scanner","slug":"scanner","permalink":"http://flamingotiger.github.io/tags/scanner/"},{"name":"스캐너","slug":"스캐너","permalink":"http://flamingotiger.github.io/tags/스캐너/"},{"name":"카메라","slug":"카메라","permalink":"http://flamingotiger.github.io/tags/카메라/"},{"name":"camera","slug":"camera","permalink":"http://flamingotiger.github.io/tags/camera/"}]},{"title":"iOS 빌드시 xcode doesn't support project's IOS 에러 해결하기","slug":"frontend/ReactNative/react-native-ios-build-version-error","date":"2022-01-13T06:02:18.000Z","updated":"2022-01-14T08:42:55.198Z","comments":true,"path":"frontend/ReactNative/react-native-ios-build-version-error/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-ios-build-version-error/","excerpt":"","text":"시작하기아이폰에서 시뮬레이션하기 위해서 빌드하기 버튼을 클릭했는데, xcode doesn&#39;t support project&#39;s IOS 15.1(19B74)라는 에러가 발생했습니다. 이것은 xcode가 아이폰의 소프트웨어 버전인 15.1을 호환하지 않는다는 이야기 입니다.그렇다면 xcode를 설치해야겠죠?아이폰의 최신버전 15.0 이상에서 빌드를 하기 위해서는 Xcode 13 버전이 필요합니다. xcode를 업데이트 하려면 mac버전도 업데이트 해야합니다. (현재 Big Sur)Mac bigsur버전이라면 xcode13버전을 설치할 수 없기 때문에 mac을 monterey버전으로 업데이트 해주어야 합니다. xcode13버전은 Appstore에서 설치 및 업데이트 할 수 있습니다. 결론 Mac이 monterey버전으로 업데이트 해야한다. xcode가 13버전 이상으로 업데이트 되어야한다. 현재 아이폰의 버전이 14버전이면 xcode를 13버전으로 업데이트 하지 않아도 에러가 나오지 않습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"error","slug":"error","permalink":"http://flamingotiger.github.io/tags/error/"},{"name":"Xcode","slug":"Xcode","permalink":"http://flamingotiger.github.io/tags/Xcode/"},{"name":"빌드","slug":"빌드","permalink":"http://flamingotiger.github.io/tags/빌드/"},{"name":"아이폰","slug":"아이폰","permalink":"http://flamingotiger.github.io/tags/아이폰/"}]},{"title":"React native 아이폰에 빌드해서 테스트하기","slug":"frontend/ReactNative/react-native-ios-build","date":"2022-01-13T05:51:16.000Z","updated":"2022-01-13T06:03:58.015Z","comments":true,"path":"frontend/ReactNative/react-native-ios-build/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-ios-build/","excerpt":"","text":"환경설정시뮬레이터가 아니라 카메라나 실제로 아이폰에 옮겨서 테스트를 해보기 위한 방법입니다. 애플 계정등록이전에는 애플 개발자 계정으로만 가능했었는데, 현재는 일반 애플 사용자 계정으로 로그인을 해서 빌드 할 수 있게 되었습니다. accounts에 들어가서 애플 계정을 추가해줍니다. 이후 프로젝트가 열려있는 Xcode에 들어가서 targets &gt; 내프로그램명 &gt; Signing &amp; Capabilities 탭을 선택합니다. 그리고 signing부분의 team에서 아까 추가한 애플계정을 선택합니다. 빌드하기아이폰이 맥에 연결된 상태에서 시뮬레이터로 설정된것을 내 아이폰으로 설정하고 왼쪽 상단에 플레이 버튼을 누릅니다.에러가 나지 않는다면 정상적으로 아이폰에 설치됩니다. xcode doesn’t support 에러가 나오면서 빌드가 안되면,xcode doesn’t support 에러시 해결을 참고 해주세요. 아이폰에서 신뢰할 수 없는 개발자라는 팝업이 나오면, 다음 경로에서 신뢰 버튼을 클릭해주어야 합니다. 설정 &gt; 일반 &gt; VPN 및 기기관리 &gt; 개발자이메일 &gt; 해당하는 프로젝트 &gt; 신뢰 이후 앱을 실행하면 잘 작동하게 됩니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"Xcode","slug":"Xcode","permalink":"http://flamingotiger.github.io/tags/Xcode/"},{"name":"빌드","slug":"빌드","permalink":"http://flamingotiger.github.io/tags/빌드/"},{"name":"아이폰","slug":"아이폰","permalink":"http://flamingotiger.github.io/tags/아이폰/"}]},{"title":"mac m1에서 react native 빌드 에러 The linked library 'libPods-ProjectName.a' is missing one or morearchitectures required by this target x86_64","slug":"frontend/ReactNative/react-native-m1-first-build-error","date":"2021-12-14T05:42:58.000Z","updated":"2021-12-14T05:49:03.745Z","comments":true,"path":"frontend/ReactNative/react-native-m1-first-build-error/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-m1-first-build-error/","excerpt":"","text":"시작하기mac m1에서 프로젝트를 생성한 이후 ios에서 빌드를 했을 때 Apple Silicon M1 - The linked library &#39;libPods-ProjectName.a&#39; is missing one or more architectures required by this target: x86_64와 같은 에러가 나와서 빌드가 안되는 경우가 있습니다.해결방법은 정말 간단합니다. 해결xcode를 연이후에 프로젝트에서 build setting을 선택합니다.이후 Excluded architactures에서 debug release에 arm64를 추가해줍니다. 추가하는 방법은 다음과 같습니다. 이후 빌드를 해보면 잘 작동하는 것을 확인할 수 있습니다. 참고스택오버플로우","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"error","slug":"error","permalink":"http://flamingotiger.github.io/tags/error/"},{"name":"build","slug":"build","permalink":"http://flamingotiger.github.io/tags/build/"},{"name":"빌드에러","slug":"빌드에러","permalink":"http://flamingotiger.github.io/tags/빌드에러/"}]},{"title":"M1 mac에서 React native 초기 설치시 에러 해결하기","slug":"frontend/ReactNative/react-native-install-error","date":"2021-12-10T07:39:18.000Z","updated":"2021-12-10T07:49:48.996Z","comments":true,"path":"frontend/ReactNative/react-native-install-error/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-install-error/","excerpt":"","text":"시작하기리액트 네이티브 초기 설정하는 방법은 다음 링크에서 확인할 수 있습니다.초기 설정초기 설정 방법 대로 했는데 ios에서 에러가 날 경우 해결 방법입니다. m1 맥미니, Big sur, node v14.17.0버전에서 테스트를 했습니다. ios 에러처음에 설치를 하고 npx react-native init MyApp --template react-native-template-typescript명령어를 실행했는데 ios부분에서 에러가 난다면 몇가지 시도를 해볼 수 있습니다. rosetta로제타를 자주 사용할 것이기 때문에 로제타 터미널을 복제해서 생성합니다. cocoapods 설치코코아팟은 npm과 같이 의존성 관리하는 패키지 입니다.FFI는 Foreign Function Interface의 줄임말로, Ruby-FFI는 다른 언어의 동적 링크 네이티브 라이브러리를 읽어와서 루비 코드로 실행할 수 있게 해주는 라이브러리입니다. 이 라이브러리를 설치하면 빅서 혹은 m1에서 나오는 에러가 해결되는 경우도 있습니다. 12sudo gem install cocoapodssudo gem install ffi 기존 레거시 삭제기존 레거시는 삭제 시키고 다시 설치레거시 react-native-cli에서는 해당 템플릿을 사용할 수 없고 새로운 CLI에서만 사용할 수 있다고 한다.기존의 cli를 제거하고 npx를 이용하거나 npx를 이용하고 싶지 않다면 새로운 cli를 전역으로 설치해야 한다. 123npm uninstall -g react-native-clinpm i -g @react-native-community/clinpx react-native init MyApp --template react-native-template-typescript 이후에 실행시켜봅니다. 1npm run ios 결과설치와 실행이 잘 되는 것을 확인 할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"rosetta","slug":"rosetta","permalink":"http://flamingotiger.github.io/tags/rosetta/"}]},{"title":"사용중인 포트 프로세스 찾아서 종료시키기","slug":"etc/etc/kill-port","date":"2021-11-29T03:51:31.000Z","updated":"2021-11-29T03:55:58.956Z","comments":true,"path":"etc/etc/kill-port/","link":"","permalink":"http://flamingotiger.github.io/etc/etc/kill-port/","excerpt":"","text":"문제프로젝트에서 서버를 npm run dev npm run start를 통해서 실행했을때, 사용하지 않아도 실행되어있는 경우가 있다.일반적으로 8080과 3000을 많이 사용하는데, 실행이 안된다면, 포트 프로세스를 종료시키는 방법을 사용하면 된다. 해결책8080포트가 접속중인지 확인해 본다. 1lsof -i tcp:8080 다음 명령어소 8080포트를 종료시킨다. 1kill $(lsof -t -i:8080) 다른 포트를 확인 및 종료시키고 싶다면 8080부분을 다른 포트로 변경해서 사용하면된다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"etc","slug":"etc/etc","permalink":"http://flamingotiger.github.io/categories/etc/etc/"}],"tags":[{"name":"nvm","slug":"nvm","permalink":"http://flamingotiger.github.io/tags/nvm/"},{"name":"bash","slug":"bash","permalink":"http://flamingotiger.github.io/tags/bash/"},{"name":"zsh","slug":"zsh","permalink":"http://flamingotiger.github.io/tags/zsh/"},{"name":"not found","slug":"not-found","permalink":"http://flamingotiger.github.io/tags/not-found/"}]},{"title":"Nextjs typescript 절대경로 설정하기","slug":"frontend/react/nextjs-absolute-path","date":"2021-10-20T08:04:51.000Z","updated":"2021-10-21T01:52:44.438Z","comments":true,"path":"frontend/react/nextjs-absolute-path/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/nextjs-absolute-path/","excerpt":"","text":"시작하기상대경로를 사용할 시 패키지 구조가 깊어질 경우 import시에 많이 번거로워지게 됩니다.작은 규모의 어플리케이션이라면 상관없지만 규모가 커질수록 꼬이기 쉬워집니다. 상대경로 1import Acomponent from ‘../../../../component/Acomponent’; 절대경로 1import Acomponent from ‘src/component/Acomponent'; 설정하기tsconfig파일의 baseUrl을 &quot;.&quot;으로 바꾸고 include에 &quot;**/*.tsx&quot;도 추가해줍니다. tsconfig.json12345678910111213&#123; //... \"baseUrl\": \".\", //... \"exclude\": [ \"node_modules\" ], \"include\": [ \"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\" ]&#125; 대부분 이것만 설정해도 절대경로로 사용할수 있습니다.만약 안될시에는 다음 방법을 사용해봅니다. next.config.js파일에서 webpack부분을 추가합니다. next.config.js123456&#123; webpack(config) &#123; config.resolve.modules.push(__dirname); // 추가 return config; &#125;&#125; 이제 import사용시 src로 시작할수 있게 되었습니다.example) 1import Test from \"src/components/Test\"; 여기까지만 해도 충분히 간편하게 경로를 설정할 수 있습니다. 경로를 폴더별로 구분하기다음 방법을 이용하면 폴더별로 더욱 쉽게 경로를 관리할 수 있습니다.src/component/~~~와 같이 절대경로로 작성되어도 길어보이는 것은 같습니다.이것을 더욱 짧고 간결하게 하기위해서 설정을 몇가지 해보겠습니다.nextjs에서는 설정하기 위해서는 몇가지 파일을 수정해주어야 합니다. @components: 컴포넌트 @hooks: 전역으로 사용하는 훅스 @services: api 서비스 @utils: 자주사용하는 함수 및 상수들 next.config.jsnext.config.js 파일을 수정해줍니다. next.config.js1234567891011121314151617181920const path = require('path');// ...const nextConfig = phase =&gt; &#123; //...webpack(config, &#123; webpack &#125;) &#123; config.resolve = &#123; alias: &#123; '@services': path.resolve(__dirname, 'src/services'), '@utils': path.resolve(__dirname, 'src/utils'), '@hooks': path.resolve(__dirname, 'src/hooks'), '@components': path.resolve(__dirname, 'src/components') &#125;, ...config.resolve &#125;; return config; &#125; //...&#125;module.exports = phase =&gt; nextConfig(phase); .babelrcbabel-plugin-module-resolver 패키지를 설치하고 .babelrc 파일을 수정해줍니다. 1npm i babel-plugin-module-resolver .babelrc12345678910111213141516171819202122&#123; \"presets\": [ \"next/babel\" ], \"plugins\": [ //... [ \"module-resolver\", &#123; \"root\": [ \"./src\" ], \"alias\": &#123; \"@services\": \"./src/services\", \"@utils\": \"./src/utils\", \"@hooks\": \"./src/hooks\", \"@components\": \"./src/components\" &#125; &#125; ] ]&#125; tsconfigtsconfig 파일도 수정해 줍니다. 여기서 설정해주지 않으면 컴파일과정에서 에러가 발생합니다. 그리고 자동 입력 기능을 사용할 수 있습니다. 1234567891011&#123; &quot;compilerOptions&quot;: &#123; &lt;!-- ... --&gt; &quot;paths&quot;: &#123; &quot;@services/*&quot;: [&quot;src/services/*&quot;], &quot;@utils/*&quot;: [&quot;src/utils/*&quot;], &quot;@hooks/*&quot;: [&quot;src/hooks/*&quot;], &quot;@components/*&quot;: [&quot;src/components/*&quot;], &#125; &#125;&#125;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"next","slug":"next","permalink":"http://flamingotiger.github.io/tags/next/"}]},{"title":"package.json에 종속되어있는 패키지 최신화하기","slug":"backend/node/npm-check-updates","date":"2021-10-18T07:09:20.000Z","updated":"2021-10-18T07:43:03.343Z","comments":true,"path":"backend/node/npm-check-updates/","link":"","permalink":"http://flamingotiger.github.io/backend/node/npm-check-updates/","excerpt":"","text":"시작하기npm-check-updates을 사용해서 package.json의 devDependencies, dependencies에 종속되어 있는 패키지를 간편하게 최신화 할 수 있다. 패키지 설치npm-check-updates 패키지를 설치합니다. 1npm install -g npm-check-updates 버전확인하기다음 명령어를 입력해서 구버전들을 확인합니다. 1npm outdated 혹은 방금 패키지를 설치한 npm-check-updates를 이용해서 버전을 확인할 수 있습니다. 1ncu 업데이트간편하게 다음 명령어를 입력해줍니다. 12ncu -unpm install 패키지를 확인해보면 버전이 업데이트된 것을 확인할 수 있습니다. 마치며패키지를 최신화하면서 패키지끼리의 연동이 잘못되어 높은 확률로 에러가 나오는 경우가 발생할 수 있습니다.대표적으로 eslint가 그러합니다. 업데이트하고나서 프로젝트를 실행했을때 에러나 경고 문구가 나오는 부분을 잘 읽고, 구글 검색을 통해서 해결하면 최종적으로 패키지 업데이트를 완료했다고 할 수 있습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"node","slug":"backend/node","permalink":"http://flamingotiger.github.io/categories/backend/node/"}],"tags":[{"name":"node","slug":"node","permalink":"http://flamingotiger.github.io/tags/node/"},{"name":"npm","slug":"npm","permalink":"http://flamingotiger.github.io/tags/npm/"},{"name":"npm-check-updates","slug":"npm-check-updates","permalink":"http://flamingotiger.github.io/tags/npm-check-updates/"}]},{"title":"heroku node 서버 배포하기(typescript)","slug":"backend/devOps/heroku-typescript-nodejs","date":"2021-10-12T08:05:24.000Z","updated":"2021-10-14T08:23:35.160Z","comments":true,"path":"backend/devOps/heroku-typescript-nodejs/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/heroku-typescript-nodejs/","excerpt":"","text":"node js 를 이용해서 heroku 서버 배포하기프로젝트 생성12mkdir heroku-nodejs-typescriptcd heroku-nodejs-typescript 초기 설정npm 기본 설정값을 생성합니다. 1npm init -y npm 패키지 설치타입스크립트를 포함하여 express를 설치하여 줍니다. 1npm i @types/express @types/node express nodemon ts-node typescript 타입스크립트 설정tsc 커맨드가 안먹힌다면, typescript를 설치하여 줍니다. 1npm i -g typescript 타입스크립트 설정 파일을 생성해줍니다. 1tsc --init 설정파일이 완료되었다면 tsconfig.json 파일에서 root 바로 밑에 값을 넣어줍니다.include는 src내부의 ts확장자로 끝나는 파일들을 컴파일 하겠다는 설정입니다.exclude는 gitignore처럼 컴파일을 하지 않는 것입니다. 123456\"include\" : [ \"src/**/*.ts\"],\"exclude\" : [ \"node_modules\"] package.json 설정package.json에 스크립트와 엔진을 넣어줍니다.engines에는 node와 npm버전을 입력해주면 됩니다. 123# 버전 확인 방법npm -v # 6.14.12node -v # v14.16.1 12345678910# ...\"scripts\": &#123; \"start\": \"ts-node src/index.ts\", \"dev\": \"nodemon -x ts-node src/index.ts\"&#125;,\"engines\": &#123; \"node\": \"v14.16.1\", \"npm\": \"6.14.12\"&#125;# ... @types 파일들은 모두 devDependencies에서 dependencies로 설치를 해주어야합니다. 아니면 서버 올리고 컴파일 에러가 발생합니다. src/index.ts 생성src 폴더를 만들고 그 내부에 index.ts 파일을 생성합니다. 123456789import express from \"express\";const app = express();const PORT: string | number = process.env.PORT || 5000;app.use(\"*\", (req, res) =&gt; &#123; res.send(\"&lt;h1&gt;서버가 실행되었습니다.&lt;/h1&gt;\");&#125;);app.listen(PORT, () =&gt; console.log(`server port: $&#123;PORT&#125;`)); 테스트로컬 서버 테스트는 npm run dev로 하면됩니다. heroku deployheroku에 가입과 heroku cli 설치는 완료되었다는 전제하에 진행합니다.heroku에 배포해보도록 하겠습니다. 배포하는 방법은 정말 간단합니다. heroku 로그인프로젝트 내부에서 다음 명령어를 입력하면 브라우저가 열리고 로그인할 수 있습니다. 1heroku login heroku createheroku 사이트에서 생성을 하거나 다음 명령어를 입력해서 app을 생성할 수 있습니다. 123heroku create# orheroku create [앱이름] git commit123git init .git add .git commit -m \"heroku setup\" git pushheroku 서버에 배포합니다. 1git push heroku main 마치며nodejs를 통해서 heroku 배포를 해보았습니다.heroku가 무료로 제공하기에 소규모의 개인사이트를 만들떈 적합했습니다.배포하는 과정은 aws보다 비교적 쉬웠습니다. 배포를 하면 기본적으로 https로 배포가 됩니다. 그래서 바로 프론트엔드 서버에서 api 호출이 가능합니다.만약 도메인을 구매하고, 연결을 하고 싶다면 신용카드를 등록해야합니다. 신용카드를 등록하고 나서 배포를 하면 http로 연결이 되기때문에 https로 보안을 하고 싶다면, 유료버전으로 업데이트를 해야합니다. heroku 머리 잘썼네요. 요약해서 도메인을 사용하고 싶다면 신용카드 등록과 유료버전 heroku를 사용해야한다는 것입니다. heroku 명령어 요약1234567891011121314151617# 헤로쿠 생성heroku create# orheroku create [앱이름]# 사이트에서는 master로 되어있지만 기본적으로 main으로 바뀜# 배포할 브런치를 push 및 배포git push heroku main# 터미널에 해당되는 프로젝트 브라우저 열기heroku open# 현재 리모트 상태git remote -v# 앱이름에 해당하는 사이트로 remote 변환heroku git:remote -a [앱이름]","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"heroku","slug":"heroku","permalink":"http://flamingotiger.github.io/tags/heroku/"},{"name":"nodejs","slug":"nodejs","permalink":"http://flamingotiger.github.io/tags/nodejs/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"}]},{"title":"Styled-components Typescript 적용하기 (+Media query)","slug":"style/styled-components-typescript","date":"2021-04-30T03:37:34.000Z","updated":"2021-04-30T05:34:44.464Z","comments":true,"path":"style/styled-components-typescript/","link":"","permalink":"http://flamingotiger.github.io/style/styled-components-typescript/","excerpt":"","text":"시작하기기존에 styled-components 반응형 및 스타일 리셋 설정하기 포스트을 통해서 스타일 최초 설정해보았습니다. theme를 입력했을때 typescript로 자동으로 연결해주는 부분이 미흡했습니다. 타입스크립트를 styled-components 와 제대로 사용해보도록 하겠습니다. 설치하기1npm i styled-components &amp;&amp; npm i -D @types/styled-components styled components를 설치해줍니다. 초기설정테마설정테마로 사용할 폰트, 색상, 레이아웃 등을 선언해줍니다. src/styles/theme.ts12345678910const color = &#123; white: \"white\", black: \"black\",&#125;;export const theme = &#123; color,&#125;;export type Theme = typeof theme; 테마를 불러올수 있게 ThemeProvider로 App을 감싸줍니다. 12345678import &#123; theme &#125; from &apos;./styles/theme.ts&apos;;import &#123; ThemeProvider &#125; from &apos;styled-components&apos;;//...&lt;ThemeProvider theme=&#123;theme&#125;&gt; &lt;App/&gt;&lt;/ThemeProvider&gt;//... 이것만으로 테마를 사용할수는 있습니다만, 타입스크립트를 제대로 사용하기 위해서는 styled.d.ts를 입력해주어야합니다. styled.d.ts를 정의 해주면 다음과 같습니다. 자동완성이나 어떤값이 들어가는지 미리 확인할 수 있기때문에 더욱 styled-components를 사용하기 쉬워집니다. styled.d.ts정의하는 방법은 정말로 간단합니다. src/typing/styled.d.ts12345678910111213import &#123; Theme &#125; from \"../styles/theme\";import &#123; CSSProp &#125; from \"styled-components\";declare module \"styled-components\" &#123; // eslint-disable-next-line @typescript-eslint/no-empty-interface export interface DefaultTheme extends Theme &#123;&#125;&#125;declare module \"react\" &#123; interface Attributes &#123; css?: CSSProp | CSSObject; &#125;&#125; // eslint-disable-next-line @typescript-eslint/no-empty-interface 이 부분은 린트에서 에러가 날때 타입이 {} 빈값으로 되어있는 룰을 무시해주는 역할을 합니다. declare modlue &quot;react&quot;~~~는 코드를 다음과 같이 쉽게 사용하기 위해 초기 설정을 해준것 입니다. 123456789import styled from \"styled-components/macro\";&lt;div css=&#123;` border: 1px solid red; `&#125;&gt; Test&lt;/div&gt;; styled.d.ts파일에서 정의해주는 역할을 합니다. Media query 반응형타입정의를 하고 나면 styled-components 반응형 및 스타일 리셋 설정하기 포스트에서 사용한 코드에서 에러가 나는 것을 확인할수 있습니다. 기존에 작성했던 코드를 수정 혹은 새로 작성하겠습니다. src/styles/media.ts123456789101112131415161718192021222324252627282930313233343536373839404142import &#123; CSSProp, css &#125; from \"styled-components\";type MediaQueryProps = &#123; mobile: number; tablet: number; desktop: number;&#125;;const sizes: MediaQueryProps = &#123; mobile: 580, tablet: 768, desktop: 1284,&#125;;// // Iterate through the sizes and create a media templatetype BackQuoteArgs = string[];const media = &#123; mobile: (literals: TemplateStringsArray, ...args: BackQuoteArgs): CSSProp =&gt; css` @media only screen and (max-width: $&#123;sizes.mobile&#125;px) &#123; $&#123;css(literals, ...args)&#125; &#125; `, tablet: (literals: TemplateStringsArray, ...args: BackQuoteArgs): CSSProp =&gt; css` @media only screen and (max-width: $&#123;sizes.tablet&#125;px) &#123; $&#123;css(literals, ...args)&#125; &#125; `, desktop: (literals: TemplateStringsArray, ...args: BackQuoteArgs): CSSProp =&gt; css` @media only screen and (max-width: $&#123;sizes.desktop&#125;px) &#123; $&#123;css(literals, ...args)&#125; &#125; `,&#125; as Record&lt; keyof typeof sizes, (l: TemplateStringsArray, ...p: BackQuoteArgs) =&gt; CSSProp&gt;;export default media; 이후 테마에 연결을 해주도록 합니다. src/styles/theme.ts12345678910111213import media from \"./media\";const color = &#123; white: \"white\", black: \"black\",&#125;;export const theme = &#123; color, media,&#125;;export type Theme = typeof theme; 이후 사용해보면 정상적으로 작동하는 것을 알 수 있습니다. 회고styled-components에 styled.d.ts를 적용하면 media적용시에 TemplateStringsArray 부분이 에러가 발생했는데 검색으로도 해결하기 힘든 문제였습니다. 구글 검색과 새 프로젝트를 만들어 하나하나 분석해가면서 해보니 해결할 수 있었습니다.","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"styled","slug":"styled","permalink":"http://flamingotiger.github.io/tags/styled/"},{"name":"styled-components","slug":"styled-components","permalink":"http://flamingotiger.github.io/tags/styled-components/"},{"name":"responsive","slug":"responsive","permalink":"http://flamingotiger.github.io/tags/responsive/"},{"name":"css in js","slug":"css-in-js","permalink":"http://flamingotiger.github.io/tags/css-in-js/"}]},{"title":"Favicon 웹사이트에 적용하기","slug":"etc/etc/favicon","date":"2021-04-30T03:36:18.271Z","updated":"2021-04-30T03:36:18.271Z","comments":true,"path":"etc/etc/favicon/","link":"","permalink":"http://flamingotiger.github.io/etc/etc/favicon/","excerpt":"","text":"시작하기파비콘(favicon)이라는 명칭으로 웹사이트 상단 탭에 나오는 아이콘 혹은 브라우저 어플 아이콘등을 뜻합니다.주로 웹사이트를 대표하는 로고를 많이 사용합니다. Favicon 만들기로고파일(png, jpg등)을 준비해줍니다.파비콘 파일을 만들어 주는 Favicon Generator사이트로 이동합니다. 파일 등록 버튼을 눌러 파일을 업로드 합니다.이후 Create favicon 버튼을 클릭하여 favicon 파일을 만듭니다. 다음과 같은 페이지가 나옵니다.Download the generated favicon 링크를 클릭하여 다운로드를 받고 하단의 html 태그들을 복사합니다. 적용하기파일을 프로젝트 내부에 저장하고, 사용하고자하는 페이지 상단 head 부분에 복사한 태그를 넣어줍니다.리액트 프로젝트의 경우 public/index.html 파일의 head 부분에 태그를 붙여넣기 해줍니다.그러면 다음과 같이 적용이 완료됩니다. 에","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"etc","slug":"etc/etc","permalink":"http://flamingotiger.github.io/categories/etc/etc/"}],"tags":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/tags/etc/"},{"name":"favicon","slug":"favicon","permalink":"http://flamingotiger.github.io/tags/favicon/"},{"name":"icon","slug":"icon","permalink":"http://flamingotiger.github.io/tags/icon/"}]},{"title":"리액트 프로젝트에 폰트추가","slug":"frontend/react/react-add-font","date":"2021-04-07T07:29:43.000Z","updated":"2021-04-30T03:36:18.278Z","comments":true,"path":"frontend/react/react-add-font/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-add-font/","excerpt":"","text":"시작하기리액트 프로젝트에서 폰트를 추가 하는 방법을 알아보겠습니다.구글 폰트에서 링크를 통해 적용하는 방법과 폰트를 다운로드해서 프로젝트에 적용하는 방법이 있습니다. 구글 웹폰트를 통해서 적용하기 프로젝트에 직접 적용하기 구글 웹폰트를 통해서 적용하기구글 폰트 사이트에 접속해서 마음에 드는 폰트를 찾습니다. 폰트를 찾았다면 해당 폰트를 선택하고 하단에 +버튼을 클릭해 선택합니다. 폰트 선택을 하고 나면 link와 @import를 사용할 수 있습니다. 프로젝트에 직접 적용하기폰트 설치하기구글 폰트 사이트에 접속해서 마음에 드는 폰트를 찾습니다. 폰트를 선택한 이후 우측 상단에 다운로드 버튼을 클릭해 파일을 다운받습니다.파일 압축을 풀면 내부에 ttf파일들이 있습니다. 다른 브라우저에서 제대로 폰트가 나오려면 파일들을 woff eot파일로 변환을 해주는 과정이 필요합니다. any conv 폰트 변환 사이트로 접속해서 파일들을 업로드 합니다. 파일을 업로드한후 변환하고자 하는 타입으로 설정을 변경합니다. 파일 변환이 완료되었으면 다운로드를 한 이후 파일명을 변경해줍니다. 프로젝트에 설정하기12345678src/ └── static/ ├── images └── fonts/ ├── Roboto-Regular.ttf ├── Roboto-Regular.woff ├── Roboto-Regular.eot └── font.css 폰트를 프로젝트의 src/static/fonts 폴더에 넣어 줍니다. 파일 경로는 이미지와 같이 정적 파일들을 저장하는 폴더에 넣으면 됩니다. 폰트 굵기에 대한 숫자 입니다. 12345678910Font Weight100 Thin200 Extra Light300 Light400 Normal500 Medium600 Semi Bold700 Bold800 Extra Bold900 Ultra Bold static/fonts파일 내부에 css파일을 생성하고 다음과 같이 작성합니다. font.css123456789101112131415161718@font-face &#123; /* 사용할 폰트의 이름 */ font-family: \"Roboto\"; font-display: fallback; /* src: 사용할 폰트의 위치 및 형식 Safari, Android, iOS =&gt; ttf Modern Browsers =&gt; woff IE6-IE8 =&gt; eot */ src: url(\"./Roboto-Regular.ttf\") format(\"truetype\"), url(\"./Roboto-Regular.woff\") format(\"woff\"), url(\"./Roboto-Regular.eot?iefix\") format(\"embedded-opentype\"); /* 사용할 폰트의 기본 스타일 */ font-weight: 400; font-style: normal;&#125; eot부분에 #iefix을 입력해주는 이유는 IE6~8의 경우 format()구문을 인식하지 못하기 때문에 삽입한 것입니다. 이후 최상단 루트 파일에 다음 css를 불러옵니다. src/index.tsx123import React from \"react\";import \"./static/fonts/font.css\";//... 이후 css에서 다음과 같은 코드를 입력하면 폰트가 적용됩니다. 123span &#123; font-family: \"Roboto\";&#125; 마치며두가지 방법으로 폰트를 설정할 수 있습니다. 글꼴파일 용량이 크거나 사이트에 추가적인 HTTP요청이 들어갈 수도 있기에 웹 사이트 로드 속도가 늦어질 수 있습니다. 글꼴을 꼭 사용해야 하는지 잘 고려해야합니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"font","slug":"font","permalink":"http://flamingotiger.github.io/tags/font/"},{"name":"ttf","slug":"ttf","permalink":"http://flamingotiger.github.io/tags/ttf/"},{"name":"woff","slug":"woff","permalink":"http://flamingotiger.github.io/tags/woff/"},{"name":"eot","slug":"eot","permalink":"http://flamingotiger.github.io/tags/eot/"}]},{"title":"Rollup을 사용해서 npm 배포하기","slug":"frontend/DevEnv/rollup-setup","date":"2021-04-07T07:22:19.000Z","updated":"2021-04-30T03:36:18.273Z","comments":true,"path":"frontend/DevEnv/rollup-setup/","link":"","permalink":"http://flamingotiger.github.io/frontend/DevEnv/rollup-setup/","excerpt":"","text":"시작하기제작중인 라이브러리를 npm에 배포하는 방법입니다.webpack 도구와는 조금 다른 rollup을 사용해서 번들링 하도록 하려고 합니다.webpack을 쓸 수도 있는데 rollup을 쓰는 이유는 webpack은 ES Module 형태로 번들을 할 수 없습니다.webpack을 사용 할 때에는 일반적으로 commonjs 형태로 번들링을 하게 됩니다commonjs로 번들링한 라이브러리를 나중에 다른 프로젝트에서 사용하게 되면 Tree-shaking이 지원되지 않습니다. 간단요약webpack은 웹 어플리케이션을 제작시 주로 사용하고rollup은 라이브러리 제작시 사용합니다.lerna는 라이브러리를 패키지 분리할때 사용합니다.lerna예시로는 @name/blabl, @name/blabla1 와 같이 사용합니다. 설치하기rollup 패키지를 설치하겠습니다. 1npm install -D rollup @rollup/plugin-node-resolve @rollup/plugin-commonjs rollup-plugin-terser @rollup/plugin-url @rollup/plugin-image rollup-plugin-typescript2 rollup-plugin-peer-deps-external rollup-plugin-sourcemaps @rollup/plugin-babel @svgr/rollup rollup: rollup 패키지 입니다. @rollup/plugin-node-resolve: node_modules에서 써드파티 모듈을 사용하는 용도로 사용합니다. @rollup/plugin-commonjs: CommonJS 모듈을 ES6으로 변환하는 롤업 플러그인입니다. rollup-plugin-terser: 생성 된 es 번들을 최소화하기위한 롤업 플러그인 후드 아래에서 terser 를 사용합니다. @rollup/plugin-url: 파일을 데이터 URI 또는 ​​ES모듈로 가져오는 롤업 플러그인입니다. @rollup/plugin-image: JPG, PNG, GIF, SVG 및 WebP 파일을 가져 오는 롤업 플러그인입니다. rollup-plugin-typescript2: 타입스크립트를 지원합니다. rollup-plugin-peer-deps-external: peerDependency로 설치된 라이브러리의 코드가 번들링된 결과에 포함되지 않고, import 구문으로 불러와서 사용할 수 있게 해주는 플러그인입니다. rollup-plugin-sourcemaps: rollup으로 번들하기 전에 소스 맵으로 파일을 변환합니다. @rollup/plugin-babel: rollup에서 babel 을 사용 할 수 있게 해주는 플러그인입니다. rollup-plugin-babel은 deprecated되었습니다. 설정하기패키지가 모두 설치가 완료되었습니다.이제 rollup 설정을 해보도록 하겠습니다. peerDependency 설정하기1npm i --peer react react-dom styled-components react, react-dom, styled-components을 peer로 설치해주도록 합니다. package.json12345\"peerDependencies\": &#123; \"react\": \"^16.12.0\", \"react-dom\": \"^16.12.0\", \"styled-components\": \"^5.0.1\"&#125; rollup.config.js 설정하기rollup.config.js 파일을 생성후 설정해주도록 합니다 rollup.config.js123456789101112131415161718192021222324252627282930313233343536373839404142import commonjs from \"@rollup/plugin-commonjs\";import typescript from \"rollup-plugin-typescript2\";import resolve from \"@rollup/plugin-node-resolve\";import svgr from \"@svgr/rollup\";import image from \"@rollup/plugin-image\";import url from \"@rollup/plugin-url\";import peerDepsExternal from \"rollup-plugin-peer-deps-external\";import sourcemaps from \"rollup-plugin-sourcemaps\";import babel from \"@rollup/plugin-babel\";import pkg from \"./package.json\";const extensions = [\".js\", \".jsx\", \".ts\", \".tsx\"];const external = [\"react\", \"react-dom\", \"styled-components\"];const config = &#123; input: pkg.source, output: [ &#123; sourcemap: true, file: pkg.main, format: \"cjs\", &#125;, &#123; sourcemap: true, file: pkg.module, format: \"esm\", &#125;, external, plugins: [ resolve(&#123; extensions &#125;), babel(&#123; exclude: \"node_modules/**\" &#125;), commonjs(&#123; include: \"node_modules/**\" &#125;), typescript(&#123; tsconfig: \"./tsconfig.json\", clean: true &#125;), svgr(), image(), url(), peerDepsExternal(), sourcemaps(), del(&#123; targets: [\"dist/*\"] &#125;), ], ],&#125;;export default config; tsconfig.json 설정tsconfig.json12345678910111213141516171819&#123; \"compilerOptions\": &#123; \"target\": \"es5\", \"module\": \"es2015\", \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"], \"jsx\": \"react\", \"declaration\": true, \"declarationDir\": \"./dist\", \"sourceMap\": true, \"outDir\": \"./dist\", \"strict\": true, \"noImplicitThis\": false /* Raise error on 'this' expressions with an implied 'any' type. */, \"baseUrl\": \"src\", \"esModuleInterop\": true, \"forceConsistentCasingInFileNames\": true &#125;, \"include\": [\"src\"], \"exclude\": [\"node_modules\", \"dist\", \"**/*.stories.tsx\", \"cypress\"]&#125; package.json 및 모듈 설정package.json 과 내보낼 모듈을 설정해주어야합니다. src/index.ts12345678import Rfdd from \"./view/Rfdd\";import RfddOption from \"./view/RfddOption\";export &#123; Rfdd, RfddOption &#125;;// 혹은export &#123; default as Rfdd &#125; from \"./view.Rfdd\";export &#123; default as RfddOption &#125; from \"./view/RfddOption\"; package.json파일을 수정 하겠습니다. package.json12345678910111213141516171819202122232425&#123; \"name\": \"react-free-dropdown\", \"version\": \"1.0.0\", \"description\": \"Easy custom dropdown list with React\", \"main\": \"dist/react-free-dropdown.js\", \"types\": \"dist/index.d.ts\", \"sideEffects\": false, \"scripts\": &#123; \"build\": \"rollup -c\" //... &#125;, \"repository\": &#123; \"type\": \"git\", \"url\": \"git+https://github.com/flamingotiger/react-free-dropdown.git\" &#125;, \"keywords\": [\"free\", \"dropdown\", \"custom\", \"react.js\", \"react\"], \"license\": \"MIT\", \"author\": \"flamingotiger &lt;hhbhong@gmail.com&gt;\", \"license\": \"MIT\", \"bugs\": &#123; \"url\": \"https://github.com/flamingotiger/react-free-dropdown/issues\" &#125;, \"files\": [\"src\", \"dist\"] //...&#125; name: 프로젝트(패키지) 이름을 설정합니다. version: 프로젝트(패키지)의 버전을 설정해주도록 합니다. description: 프로젝트(패키지)의 설명을 지정합니다. main: 프로젝트(패키지)의 기본 진입점(entry point)를 지정합니다. module: 프로젝트(패키지)의 기본 진입점(entry point)를 지정합니다. keywords: 프로젝트(패키지)의 키워드를 배열로 지정합니다. types: 타입스크립트 사용시 기본 진입점(entry point)를 지정합니다. license: 프로젝트(패키지) 사용을 허용하는 방법과 제한 사항을 알 수 있도록 라이센스를 지정합니다. .npmignore파일 최상단 루트 폴더에 .gitignore처럼 .npmignore파일을 생성해줍니다.npm에 배포할 필요없는 폴더 혹은 파일을 지정해줍니다. .npmignore1234567891011121314151617181920212223node_modulesyarn-error.lognpm-debug.lognpm-debug.log.*yarn-error.logyarn.lock.DS_Store.vscode.idea.githubstoriesstorybook-static.storybookcypresscypress.json.npmignore.babelrc.eslintrcjest.config.jstsconfig.json.prettierrcrollup.config.jsrollup.min.config.js NPM 배포이것으로 배포 준비가 완료되었습니다. npm 로그인npm 공식 홈페이지로 접속해서 로그인 해주도록 합니다.로그인 계정이 없다면 회원가입을 해줍니다.회원가입시 이메일 인증을 필수로 해야합니다. npm 배포하기프로젝트로 돌아와서 npm cli 몇가지를 사용합니다. 1cd project 1npm login npm adduser 혹은 npm login을 입력하고 유저이름 비밀번호 그리고 이메일 인증한 이메일도 입력해야합니다. 로그인이 성공했다면 npm publish 를 입력해줍니다. 1npm publish 배포에서 다음과 같은 에러가 발생시 1npm publish --access=public 커맨드를 입력해줍니다.관련 Github Issue 추가로 로그인이 되어있는지 확인하려면npm whoami를 입력해주면 확인할 수 있습니다. 로그아웃은 npm logout을 입력하면 됩니다. 이후 사이트를 확인하면 등록이 된 것을 확인할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"DevEnv","slug":"frontend/DevEnv","permalink":"http://flamingotiger.github.io/categories/frontend/DevEnv/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"npm","slug":"npm","permalink":"http://flamingotiger.github.io/tags/npm/"},{"name":"rollup","slug":"rollup","permalink":"http://flamingotiger.github.io/tags/rollup/"}]},{"title":"flutter에 스타일(margin, padding, border, border-radius) 적용하기","slug":"frontend/flutter/flutter-style","date":"2021-02-22T01:42:48.000Z","updated":"2021-04-30T03:36:18.277Z","comments":true,"path":"frontend/flutter/flutter-style/","link":"","permalink":"http://flamingotiger.github.io/frontend/flutter/flutter-style/","excerpt":"","text":"시작하기웹에서 엘리먼트에 스타일을 넣으려면 css를 사용하는 것은 대부분 아는 사실입니다. 크로스 플랫폼의 react native의 경우에는 js와 같은 방식으로 사용합니다. 하지만 사용방법은 크게 다르지 않죠. flutter에서는 margin, padding, border, border-radius 등을 어떻게 넣을 수 있을까 사용해보도록 하겠습니다. 기본기본적으로 스타일을 넣기 위해서는 Container 클래스를 이용해야 합니다. 1234Container( styles...., child:...) Margin일반적인 css나 js처럼 margin:30 이런 식으로 작성하면 좋겠지만, flutter에서는 조금 다릅니다. 다음과 같이 EdgeInsets이라는 클래스를 사용해야 합니다. 1234Container( margin: EdgeInsets.only(bottom:10), child:...) EdgeInsets에서 margin을 주는 방법이 있습니다. 기존 css와 비교하면서 몇가지 알아보겠습니다. 1234567891011// 전부EdgeInsets.all(10)// 한 지점만EdgeInsets.only(bottom: 4)// 좌위 상위 우위 하위EdgeInsets.fromLTRB(left, top, right, bottom)// 가로와 세로EdgeInsets.symmetric(horizontal: 20, vertical: 10) 1234margin: 10px;margin-bottom: 4px;margin: top right bottom left;margin: 10 20 10 20; Padding패딩도 margin과 사용법은 같습니다. 1234Container( padding: EdgeInsets.all(10), child:...) BorderContainer 클래스에 margin과 padding을 사용했는데, border도 넣고싶다면 다음과 같이 작성하면 됩니다. 1234567891011Container( margin: EdgeInsets.all(4), padding: EdgeInsets.all(10), decoration: BoxDecoration( border: Border.all( color: Colors.black, width: 5, ), ) child:...) Container의 decoration에 BoxDecoration클래스를 이용해서 border를 넣어줄수 있습니다. Border Radiusborder radius 는 기존 border 스타일을 넣는 방법과 흡사하게 BoxDecoration을 사용합니다. 12345678Container( margin: EdgeInsets.all(4), padding: EdgeInsets.all(10), decoration: BoxDecoration( borderRadius: BorderRadius.circular(10) ) child:...) 123456789101112131415161718192021// 전부 - 방법1BorderRadius.circular(10)// 전부 - 방법2BorderRadius.all(Radius.circular(10))// 가로만BorderRadius.horizontal(Radius.circular(10))// 세로만BorderRadius.vertical(Radius.circular(10))// 한곳만BorderRadius.only(topLeft:Radius.circular(10))// topLeft topRight bottomLeft bottomRight// 여러개 사용예시BorderRadius.only( topLeft: Radius.circular(19), bottomLeft: Radius.circular(19)) 마지막으로margin, padding, border, border radius 를 적용하는 방법을 정리해보았는데 기존 css를 사용하는 벙법과는 많이 달라서 처음에는 혼선이 왔지만, 자동완성기능이나 타입이 정해져 있기때문에 더 깔끔하게 코드를 작성할 수 있어서 좋았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"crossplatform","slug":"frontend/crossplatform","permalink":"http://flamingotiger.github.io/categories/frontend/crossplatform/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"http://flamingotiger.github.io/tags/flutter/"},{"name":"dart","slug":"dart","permalink":"http://flamingotiger.github.io/tags/dart/"}]},{"title":"flutter에서 bottom Navigation 구현하기","slug":"frontend/flutter/flutter-bottom-nav","date":"2021-02-22T01:02:16.000Z","updated":"2021-04-30T03:36:18.276Z","comments":true,"path":"frontend/flutter/flutter-bottom-nav/","link":"","permalink":"http://flamingotiger.github.io/frontend/flutter/flutter-bottom-nav/","excerpt":"","text":"시작하기어플리케이션을 사용해보면 하단에 스크린을 손쉽게 이동할 수 있도록 도와주는 네비게이션이 있습니다. 플러터에서도 이 네비가 탑재가 되어있습니다. 구현하기기본 MyApp에서 MyBottomNavigationBar 클래스를 MaterialApp 내부 home에 실행시켜주도록 합니다. main.dart1234567891011121314151617181920212223import 'package:flutter/material.dart';void main() &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); @override _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: '타이틀', debugShowCheckedModeBanner: false, home: MyBottomNavigationBar() ); &#125;&#125; 12345final List&lt;Widget&gt; _children = &lt;Widget&gt;[ FavoriteScreen(), SearchScreen(), SettingScreen(),]; 배열 children은 각자 스크린을 가져옵니다. children[0]는 FavoriteScreen, children[1]는 SearchScreen, children[2]는 SettingScreen를 나타냅니다. 12345int _selectedIndex = 0;&lt;!-- ... --&gt; currentIndex: _selectedIndex,&lt;!-- ... --&gt; 현재 선택된 인텍스입니다. 처음 시작하는 인덱스가 0인데 1로 변경을 한다면 1에 해당하는 페이지가 먼저실행됩니다. BottomNavigation은 BottomNavigationBar 내부에 BottomNavigationBarItem들이 배열로 들어가 있는 형태입니다. 요약하자면 다음과 같은 형태입니다. 12345678Scaffold( body: _children.elementAt(_selectedIndex), bottomNavigationBar: BottomNavigationBar( BottomNavigationBarItem(...), BottomNavigationBarItem(...), BottomNavigationBarItem(...), )) 최종 완성된 코드입니다. main.dart12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import 'package:flutter/material.dart';void main() &#123; runApp(MyApp());&#125;class MyApp extends StatefulWidget &#123; MyApp(&#123;Key key&#125;) : super(key: key); @override _MyAppState createState() =&gt; _MyAppState();&#125;class _MyAppState extends State&lt;MyApp&gt; &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: '타이틀', debugShowCheckedModeBanner: false, home: MyBottomNavigationBar() ); &#125;&#125;class MyBottomNavigationBar extends StatefulWidget &#123; MyBottomNavigationBar(&#123;Key key&#125;) : super(key: key); @override _MyBottomNavigationBarState createState() =&gt; _MyBottomNavigationBarState();&#125;class _MyBottomNavigationBarState extends State&lt;MyBottomNavigationBar&gt; &#123; int _selectedIndex = 0; final List&lt;Widget&gt; _children = &lt;Widget&gt;[ FavoriteScreen(), SearchScreen(), SettingScreen(), ]; void _onItemTapped(int index) &#123; setState(() &#123; _selectedIndex = index; &#125;); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( body: SafeArea(child: _children.elementAt(_selectedIndex)), bottomNavigationBar: BottomNavigationBar( items: const &lt;BottomNavigationBarItem&gt;[ BottomNavigationBarItem( icon: Icon(Icons.favorite, size: 40, color: Colors.black), activeIcon: Icon(Icons.favorite, size: 40, color: Colors.orange), label: 'Favorite', ), BottomNavigationBarItem( icon: Icon(Icons.search, size: 40, color: Colors.black), activeIcon: Icon(Icons.search, size: 40, color: Colors.orange), label: 'search', ), BottomNavigationBarItem( icon: Icon(Icons.setting, size: 40, color: Colors.black), activeIcon: Icon(Icons.setting, size: 40, color: Colors.orange), label: 'setting', ), ], currentIndex: _selectedIndex, selectedItemColor: Colors.orange, showSelectedLabels: false, showUnselectedLabels: false, onTap: _onItemTapped, ), ); &#125;&#125;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"crossplatform","slug":"frontend/crossplatform","permalink":"http://flamingotiger.github.io/categories/frontend/crossplatform/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"http://flamingotiger.github.io/tags/flutter/"},{"name":"dart","slug":"dart","permalink":"http://flamingotiger.github.io/tags/dart/"}]},{"title":"react native android 시작시 adb 에러","slug":"frontend/ReactNative/react-native-adb-error","date":"2021-02-15T09:53:19.000Z","updated":"2021-04-30T03:36:18.274Z","comments":true,"path":"frontend/ReactNative/react-native-adb-error/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-adb-error/","excerpt":"","text":"시작하기react native에서 시뮬레이터가 켜져 있는 상태인데도 npm run android를 하면 adb command not found와 같은 에러가 날때가 있습니다. android studio를 설치하면 자동으로 adb가 설치됩니다.react native 프로젝트를 시작할때 에러가 나오는 것은 경로가 설정이 제대로 되어있지 않기 때문입니다. 해결하기mac기준으로 설명하겠습니다.android studio로 react native의 android 폴더를 열어줍니다.다음으로 상단바에서 android studio &gt; Preferences를 엽니다. 이후 Appearance &amp; Behavior &gt; System Settings를 클릭합니다.다음과 같은 화면에서 Android SDK Location 부분을 복사합니다. 이후 bash_profile을 수정해줍니다. 1vi ~/.bash_profile i를 눌러 맨 하단에 다음코드를 입력하고, 입력이 완료 되었을시에 wq 커맨드로 저장을 합니다. .bash_profile1234...export ANDROID_HOME=\"/Users/flamingotiger/Library/Android/sdk\" # Android SDK Location 복사한것 붙여넣기export PATH=\"$PATH:$ANDROID_HOME/platform-tools\"... 이후 실행을 하면 에러없이 잘 작동합니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"react navigation","slug":"react-navigation","permalink":"http://flamingotiger.github.io/tags/react-navigation/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"}]},{"title":"flutter(플러터) 초기설정 - mac","slug":"frontend/flutter/flutter-setup","date":"2021-02-04T02:00:52.000Z","updated":"2021-04-30T03:36:18.277Z","comments":true,"path":"frontend/flutter/flutter-setup/","link":"","permalink":"http://flamingotiger.github.io/frontend/flutter/flutter-setup/","excerpt":"","text":"시작하기플러터는 구글이 개발한 오픈소스 크로스 플랫폼 개발 프레임워크입니다.크로스 플랫폼이란 react native 와 같이 하나의 개발을 통해 ios, android 개발을 동시에 진행 할 수 있어서 생산성이 높습니다.기존에 react native를 사용해보았기에 flutter와 미약하나마 다른 점을 확인할 수 있었습니다.react native는 자바스크립트 코드를 브릿지를 통해 네이티브 코드로 변환하는데 반해서 flutter는 네이티브로 바로 변환하기에 속도면에서는 더 빠를수 밖에 없습니다. flutter 설정flutter 사이트운영체제에 맞는 flutter sdk를 설치 합니다. 파일 설치하고 설정을 해야합니다. zsh의 경우에는 vi 편집기로 zshrc를 열어서 flutter를 설치한 위치를 다음과 같이 넣어줍니다. 123vi ~/.zshrcexport PATH=$PATH:/Users/flamingotiger/flutter/bin PATH에 “”큰 따옴표는 지우고 입력합니다.저는 다운로드받은 파일을 홈부분에 옮겼습니다. bash의 경우에는 bash_profile에 넣어줍니다. 123vi ~/.bash_profileexport PATH=\"$PATH:/Users/flamingotiger/flutter/bin\" 이후 flutter가 작동이 잘하는지 확인합니다. 설정을 완료하는 데 필요한 플랫폼 의존성이 있는지 확인할 수 있습니다. 1flutter doctor 다음과 같이 필요한 것 혹은 설정완료된 리스트가 나옵니다. 마지막으로 vscode 에디터에서 flutter설정을 해보도록 하겠습니다.extensions에서 flutter를 설치합니다. 이것으로 설정이 완료 되었습니다. 다음으로 프로젝트 생성을 해보겠습니다. 프로젝트 생성프로젝트 생성은 아주 간편합니다.다음을 입력하면 간편하게 프로젝트가 생성됩니다. 1flutter create 프로젝트이름 프로젝트가 생성이 완료되었다면 다음 커맨드를 입력합니다. 12cd 프로젝트이름flutter run run을 하게되면 실행중인 시뮬레이터와 연결이 되어 작동합니다.이것으로 간편하게 플러터 프로젝트를 설정해보고 생성까지 해보았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"crossplatform","slug":"frontend/crossplatform","permalink":"http://flamingotiger.github.io/categories/frontend/crossplatform/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"http://flamingotiger.github.io/tags/flutter/"},{"name":"dart","slug":"dart","permalink":"http://flamingotiger.github.io/tags/dart/"}]},{"title":"throttle(쓰로틀링) 과 debounce(디바운싱)로 성능 향상 시키기","slug":"javascript/throttle-debounce","date":"2021-01-19T01:12:04.000Z","updated":"2021-04-30T03:36:18.281Z","comments":true,"path":"javascript/throttle-debounce/","link":"","permalink":"http://flamingotiger.github.io/javascript/throttle-debounce/","excerpt":"","text":"시작하기사이트 퍼포먼스를 향상 시키기위해서 사용하는 방법 중 하나입니다. 스크롤 혹은 인풋 박스에서 너무 많은 이벤트를 호출하여 불필요한 메모리를 소모하여 퍼포먼스를 떨어뜨립니다. 이 문제를 해결하기 위한 방법으로 Throttling(쓰로틀링)과 debouncing(디바운싱)이 있습니다. 기본 개념쓰로틀링은 마지막 함수가 호출된 이후 지정한 시간이 지나기 전에 호출되지 않도록 하는 것입니다.디바운싱은 연속적인 함수호출중 마지막 혹은 맨처음 함수가 호출되는 것입니다. 설정Lodash 혹은 underscore 패키지에서 지원하는 Throttle과 Debounce를 사용하겠습니다.npm 기반의 프로젝트로 가정하고 설명을 시작하겠습니다. 프로젝트에 lodash 패키지를 설치합니다.npm i lodash그러면 준비가 완료되었습니다. Scroll에서 Throttle과 Debounce웹사이트 스크롤을 했을때 한번 호출하고자 하나, 이벤트는 수십개가 호출되는 경우가 있습니다. 이 상황에서 쓰로틀링과 디바운싱을 사용해보며 설명하겠습니다. 123456789101112131415161718192021222324let count = &#123; normal: 1, throttle: 1, debounce: 1,&#125;;const normalScroll = () =&gt; &#123; count = &#123; ...count, normal: count.normal + 1 &#125;;&#125;;const throttleScroll = () =&gt; &#123; throttle(() =&gt; &#123; count = &#123; ...count, throttle: count.throttle + 1 &#125;; &#125;, 500);&#125;;const debounceScroll = () =&gt; &#123; debounce(() =&gt; &#123; count = &#123; ...count, debounce: count.debounce + 1 &#125;; &#125;, 500);&#125;;document.addEventListener(\"scroll\", () =&gt; &#123; normalScroll(); throttleScroll(); debounceScroll();&#125;); 위와 같은 코드를 통해서 스크롤을 한다면 이벤트 발생시 기본과 쓰로틀링 디바운싱이 서로 다른 시간에 카운트 한다는 것을 알 수 있습니다. 12345const throttleScroll = () =&gt; &#123; throttle(() =&gt; &#123; count = &#123; ...count, throttle: count.throttle + 1 &#125;; &#125;, 500);&#125;; 쓰로틀링의 첫번째 인자는 실제로 구동이 될 함수입니다. 두번째 인자는 시간으로, 이벤트 발생하는 동안 500ms같격의 시간에 함수를 호출하겟다는 의미입니다 12345const debounceScroll = () =&gt; &#123; debounce(() =&gt; &#123; count = &#123; ...count, debounce: count.debounce + 1 &#125;; &#125;, 500);&#125;; 디바운싱의 첫번째 인자도 마찬가지로 실제로 구동이 될 함수입니다. 두번째 인자는 시간으로, 쓰로틀링과 달리 이벤트 발생하는 처음 시작했거나 마지막 500ms이후의 시간에 함수를 딱 한번 호출하겟다는 의미입니다. 다음 인풋에서도 같은 방식으로 사용할 수 있습니다. Input에서 Debounceinput에서 onchange이벤트를 이용하면 자음과 모음을 각자 입력할때마다 이벤트가 호출됩니다.처음, ㄱ, ㄴ, ㅏ와 같이 이러한 각 단위는 실제 검색에서는 유용한 데이터를 불러올 수 없습니다.무의미한 이벤트를 발생시킵니다. 이 부분에서 이벤트를 덜 발생시키기 위해서 Debounce를 사용합니다. 12345678910111213141516171819202122232425262728293031323334import React, &#123; useState, useCallback &#125; from \"react\";import &#123; debounce &#125; from \"lodash\";import \"./input.css\";const Input = () =&gt; &#123; const [value, setValue] = useState(\"\"); const [search, setSearch] = useState(\"\"); const delaySetValue = useCallback( debounce((value) =&gt; &#123; setSearch(value); &#125;, 500), [] ); const handleInputChange = (e) =&gt; &#123; delaySetValue(e.currentTarget.value); setValue(e.currentTarget.value); &#125;; return ( &lt;div&gt; &lt;input className=\"input\" type=\"text\" placeholder=\"Debounce 입력\" value=&#123;value&#125; onChange=&#123;handleInputChange&#125; /&gt; &lt;p className=\"text\"&gt;&#123;search&#125;&lt;/p&gt; &lt;/div&gt; );&#125;;export default Input; value: Input에 입력되는 부분입니다. search: debounce를 통해 이벤트 마지막 500ms이후에 등록됩니다. 이것으로 input과 scroll에서 throttle과 debounce를 사용하는 방법을 알아 보았습니다.방금 작성한 예시외에도 다양한 부분에서 throttle 및 debounce를 사용할 수 있습니다. 적절하게 사용하면 api call 횟수가 줄거나 이벤트 호출이 줄어 메모리 절약에 많은 도움이 될 것입니다.","categories":[{"name":"Js / Ts","slug":"Js-Ts","permalink":"http://flamingotiger.github.io/categories/Js-Ts/"},{"name":"javascript","slug":"Js-Ts/javascript","permalink":"http://flamingotiger.github.io/categories/Js-Ts/javascript/"}],"tags":[]},{"title":"Gatsby에 markdown 설정하기","slug":"frontend/react/gatsby-add-readme","date":"2020-11-18T08:14:10.000Z","updated":"2021-04-30T03:36:18.277Z","comments":true,"path":"frontend/react/gatsby-add-readme/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/gatsby-add-readme/","excerpt":"","text":"시작하기gatsby는 정적 페이지로 제작시 많이 이용합니다. 예로 블로그나 소개 페이지 같은 경우에 용이합니다.데이터 베이스를 연결하지 않고 markdown파일로 글을 작성 후 데이터를 불러와 화면에 뿌릴수 있습니다.markdown파일로 작성시 재사용에 좋습니다. 그러면 gatsby에 markdown를 추가해보도록 하겠습니다. 플러그인 설치기존에 설치되어있는 플러그인 gatsby-source-filesystem은 추가 옵션을 설정해주어야 하고,gatsby-transformer-remark플러그인을 설치해야합니다. 1npm i gatsby-transformer-remark 이후 gatsby-config.js파일을 수정합니다. gatsby-config.js12345678910111213module.exports = &#123; plugins: [ ... &#123; resolve: `gatsby-source-filesystem`, options: &#123; name: `markdown-pages`, path: `$&#123;__dirname&#125;/src/blogs`, &#125;, &#125;, `gatsby-transformer-remark`, ... ] 다음과 같이 코드를 추가합니다. 경로 생성과 페이지 생성그 다음 markdown을 node로 실행을 해주어야 불러올수 있습니다. gatsby-node.js파일을 수정해주도록 합니다. gatsby-node.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647const &#123; createFilePath &#125; = require(`gatsby-source-filesystem`);exports.onCreateNode = (&#123; node, getNode, actions &#125;) =&gt; &#123; const &#123; createNodeField &#125; = actions; if (node.internal.type === `MarkdownRemark`) &#123; const relativeFilePath = createFilePath(&#123; node, getNode, basePath: `blog`, &#125;); createNodeField(&#123; node, name: `slug`, value: `/blog$&#123;relativeFilePath&#125;`, &#125;); &#125;&#125;;const path = require(`path`);exports.createPages = async (&#123; graphql, actions &#125;) =&gt; &#123; const &#123; createPage &#125; = actions; const result = await graphql(` query &#123; allMarkdownRemark &#123; edges &#123; node &#123; fields &#123; slug &#125; &#125; &#125; &#125; &#125; `); result.data.allMarkdownRemark.edges.forEach((&#123; node &#125;) =&gt; &#123; createPage(&#123; path: node.fields.slug, component: path.resolve(`./src/templates/blog.js`), context: &#123; // Data passed to context is available // in page queries as GraphQL variables. slug: node.fields.slug, &#125;, &#125;); &#125;);&#125;; 다음 코드를 설명하자면, onCreateNode는 경로 설정하는 부분으로 실제 url 입력시 인식하는 부분입니다. createPages는 onCreateNode 경로 설정된 부분에 실제로 페이지를 만들어주는 부분입니다. md파일 생성마크 다운 파일을 생성하도록 하겠습니다. 포맷은 다음과 같습니다. 1234567---title: \"테스트\"slug: \"/blog/test/\"date: \"2020-11-18\"---# 제목 slug 부분이 실제 라우팅되는 주소입니다. 템플릿 생성마지막으로 템플릿을 생성해보도록 하겠습니다. 다음과 같이 템플릿을 작성합니다. 이 부분은 실제 markdown파일을 불러올 페이지입니다. src/templates/blog.js1234567891011121314151617181920212223242526272829import React from \"react\";import &#123; graphql &#125; from \"gatsby\";export default function Blog(&#123; path, data &#125;) &#123; console.log(data); const blog = data.markdownRemark; return ( &lt;div&gt; &lt;div&gt;Hello blog&lt;/div&gt; &lt;div&gt; &lt;h1&gt;&#123;blog.frontmatter.title&#125;&lt;/h1&gt; &lt;div dangerouslySetInnerHTML=&#123;&#123; __html: blog.html &#125;&#125; /&gt; &lt;/div&gt; &lt;/div&gt; );&#125;export const query = graphql` query($slug: String!) &#123; markdownRemark(fields: &#123; slug: &#123; eq: $slug &#125; &#125;) &#123; html frontmatter &#123; title &#125; &#125; &#125;`; 드디어 기본 설정이 완료 되었습니다. 서버실행이제 확인을 해보도록 합니다. 서버를 실행합니다. 서버가 정상적으로 실행이 되었다면 생성한 .md파일의 slug로 url을 입력해봅니다. 페이지가 자동으로 생성됩니다. 실제 파일로 생성되는것이 아니라 markdown을 html으로 변환시켜주는 것입니다. 마크다운 하나를 불러오는 방법이었습니다.여러개를 전부 불러오려면 어떻게 해야할까요? markdown 전부 불러오기src/pages/index.js1234567891011121314151617181920212223242526272829303132333435363738394041import React from \"react\";import &#123; Link, graphql &#125; from \"gatsby\";export const query = graphql` query &#123; allMarkdownRemark(sort: &#123; fields: [frontmatter___date], order: DESC &#125;) &#123; totalCount edges &#123; node &#123; id frontmatter &#123; title date(formatString: \"DD MMMM, YYYY\") &#125; fields &#123; slug &#125; excerpt &#125; &#125; &#125; &#125;`;const IndexPage = (&#123; data &#125;) =&gt; &#123; const blog = data.allMarkdownRemark; return ( &lt;div&gt; &lt;h4&gt;&#123;blog.totalCount&#125; blogs&lt;/h4&gt; &#123;blog.edges.map((&#123; node &#125;) =&gt; &#123; return ( &lt;div key=&#123;node.id&#125;&gt; &lt;Link to=&#123;node.fields.slug&#125;&gt;&#123;node.frontmatter.title&#125;&lt;/Link&gt; &lt;/div&gt; ); &#125;)&#125; &lt;/div&gt; );&#125;;export default WorkPage; 이것으로 gatsby에서 markdown을 추가하는 방법을 알아보았습니다.더 자세한 튜토리얼은 공식홈페이지를 확인해주세요","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"gatsby","slug":"gatsby","permalink":"http://flamingotiger.github.io/tags/gatsby/"},{"name":"markdown","slug":"markdown","permalink":"http://flamingotiger.github.io/tags/markdown/"}]},{"title":"AWS EC2 forever사용하기","slug":"backend/devOps/aws-forever","date":"2020-10-28T05:21:49.000Z","updated":"2021-04-30T03:36:18.270Z","comments":true,"path":"backend/devOps/aws-forever/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/aws-forever/","excerpt":"","text":"시작하기forever 설치하기설치하는 방법은 간단합니다. ec2에 연결되어있는 상태에서 다음 커맨드를 입력합니다. 1npm install forever -g forever를 글로벌로 설치해줍니다. 다음 커맨드를 입력해 서버를 실행하겠습니다. 123cd 해당프로젝트forever start -c \"npm run start\" ./# 예시) forever start -c \"npm run dev\" ./ -c 는 커맨드를 실행시켜주는 옵션입니다. 입력하고 나면 다음과 같은 메시지가 나옵니다. 123456warn: --minUptime not set. Defaulting to: 1000mswarn: --spinSleepTime not set. Your script will exit if it does not stay up for at least 1000msinfo: Forever processing file: ./(node:18700) Warning: Accessing non-existent property 'padLevels' of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:18700) Warning: Accessing non-existent property 'padLevels' of module exports inside circular dependency (node:18700) Warning: Accessing non-existent property &#39;padLevels&#39; ....이 부분은 크게 신경 안쓰셔도 됩니다.에러가 아닌 경고 부분이기 때문에 작동은 제대로 됩니다. 확인1forever list forever list 커맨드를 입력하면 다음과같이 forever의 기록이 나옵니다. 123info: Forever processes runningdata: uid command script forever pid id logfile uptimedata: [0] tUBd npm run start 19368 19375 /home/ec2-user/.forever/tUBd.log 0:0:0:6.338 12lsof -i :서버포트# 예시) lsof -i :8080 위의 커맨드를 입력하면 실제 구동되고 있는 포트를 볼수 있습니다. 12COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEnode 18729 ec2-user 19u IPv6 128760 0t0 TCP *:webcache (LISTEN) 다음과 같이 서버가 켜져 있는것을 확인할 수 있습니다. 종료12forever stop list의 pid# 예시) forever stop 19375 종료하고자하는 forever의 pid를 입력해줍니다.forever를 종료하면 forever list에는 정지가 되었다고 나옵니다.하지만 확인해보면 포트는 남아있는것을 확인할 수 있습니다.포트도 종료시켜줍니다. 12kill -9 \"PID\"# 예시) kill -9 \"18729\" 포트를 종료시키는 커맨드입니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://flamingotiger.github.io/tags/aws/"},{"name":"amazon web service","slug":"amazon-web-service","permalink":"http://flamingotiger.github.io/tags/amazon-web-service/"},{"name":"ec2","slug":"ec2","permalink":"http://flamingotiger.github.io/tags/ec2/"},{"name":"forever","slug":"forever","permalink":"http://flamingotiger.github.io/tags/forever/"}]},{"title":"AWS linux2에서 certbot nginx 인증하기","slug":"backend/devOps/aws-linux2-certbot-nginx","date":"2020-10-27T05:38:43.000Z","updated":"2021-04-30T03:36:18.270Z","comments":true,"path":"backend/devOps/aws-linux2-certbot-nginx/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/aws-linux2-certbot-nginx/","excerpt":"","text":"시작하기https를 사용하기 위해서는 인증을 해야합니다. 여러 인증하는 방법중에 nginx와 certbot을 이용한 인증 방법을 하도록 하겠습니다. 확인하기1yum repolist 커맨드를 입력했을시 EPEL (Extra Packages for Enterprise Linux)이 없다면 certbot을 설치할 패키지를 가지고 있는 저장소가 없다는 뜻입니다. 최신 저장소를 추가하기 위해서는 epel-release 패키지가 필요합니다. 1rpm -qa epel-release 커맨드를 입력했을때 아무것도 나오지 않는다면 설치가 안된 것입니다.그렇다면 설치를 해야합니다. 설치 준비하기EPEL7 저장소 패키지 다운로드를 해보겠습니다. 이는 Certbot에 필요한 종속성을 제공하는 데 필요합니다. ssh로 ec2에 연결합니다. 연결방법을 모르신다면 이전 ssh연결 포스트를 참고해주세요. 1cd /home/ec2-user 홈 디렉토리로 이동후 EPEL을 설치합니다. 1sudo wget -r --no-parent -A 'epel-release-*.rpm' http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/ wget은 웹에서 자동적으로 파일을 받아오는데 사용되는 유틸리티입니다. HTTP, HTTPS, FTP 프로토콜을 지원합니다. 옵션-r, --recursive재귀적인(recursive) 다운로드를 한다. -np, --no-parent주어진 디렉토리의 상부 디렉토리는 다운받지 않는다. -A acclist, --accept acclist받거나 파일 확장자를 지정한다 다음으로 패키지를 설치합니다. 1sudo rpm -Uvh dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-*.rpm 다음으로 EPEL을 활성화 합니다. 1sudo yum-config-manager --enable epel* 1sudo yum repolist 커맨드를 입력하면 없었던 EPEL이 추가된 것을 확인할 수 있습니다. Certbox 설치 및 실행하기Certbox을 설치합니다. 12sudo yum install -y certbotsudo yum install certbot-nginx 설치가 완료되었다면 12sudo service nginx stopsudo certbot --nginx certbot nginx를 실행합니다. 아이피를 선택합니다. 그리고 나면 이 기존 인증서를 다시 설치하려고 할지 아니면 덮어쓸지 정합니다. 이 커맨드 실행이 끝나면 자동으로 etc/nginx/nginx.conf 파일을 수정합니다. 이후 nginx 서버를 다시 켜줍니다. 1sudo service nginx restart 등록한 도메인으로 들어가면 다음과 같이 https로 접속이 되는것을 확인할 수 있습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://flamingotiger.github.io/tags/aws/"},{"name":"amazon web service","slug":"amazon-web-service","permalink":"http://flamingotiger.github.io/tags/amazon-web-service/"},{"name":"ec2","slug":"ec2","permalink":"http://flamingotiger.github.io/tags/ec2/"},{"name":"nginx","slug":"nginx","permalink":"http://flamingotiger.github.io/tags/nginx/"},{"name":"certbot","slug":"certbot","permalink":"http://flamingotiger.github.io/tags/certbot/"}]},{"title":"AWS route53를 이용해서 vercel 도메인 연결하기","slug":"backend/devOps/aws-route53-domain-connect","date":"2020-10-27T01:56:43.000Z","updated":"2021-04-30T03:36:18.270Z","comments":true,"path":"backend/devOps/aws-route53-domain-connect/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/aws-route53-domain-connect/","excerpt":"","text":"시작하기도메인을 구입한 상태여야 합니다. vercel 설정vercel로 접속해 해당 프로젝트에 edit을 버튼을 클릭합니다. 도메인 탭으로 들어와서 구입한 도메인을 입력합니다.에러가 나오면서 다음과 같은 값이 나옵니다. value라는 값을 복사해줍니다. Route53에서 사용할 값입니다.에러를 해결하기 위해서는 aws에서 설정해주어야합니다. Route53 설정aws Route53에 접속합니다. 대쉬보드 왼쪽 상단에 DNS관리에 호스팅을 선택해서 들어갑니다. 호스팅 영역에 구입한 도메인을 선택합니다.없다면 생성해줍니다. 도메인을 선택하면 상세 페이지로 들어오게 됩니다. 레코드 생성버튼을 클릭합니다. 생성부분에 IP는 이전의 vercel에서 복사했던 value 부분을 넣어주면 됩니다. 그리고 vercel의 도메인을 확인하면 적용되어있는 것을 확인할 수 있습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://flamingotiger.github.io/tags/aws/"},{"name":"amazon web service","slug":"amazon-web-service","permalink":"http://flamingotiger.github.io/tags/amazon-web-service/"},{"name":"ec2","slug":"ec2","permalink":"http://flamingotiger.github.io/tags/ec2/"},{"name":"domain","slug":"domain","permalink":"http://flamingotiger.github.io/tags/domain/"},{"name":"route53","slug":"route53","permalink":"http://flamingotiger.github.io/tags/route53/"}]},{"title":"AWS EC2 nginx 사용하기","slug":"backend/devOps/aws-ec2-nginx","date":"2020-10-26T07:50:47.000Z","updated":"2021-04-30T03:36:18.270Z","comments":true,"path":"backend/devOps/aws-ec2-nginx/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/aws-ec2-nginx/","excerpt":"","text":"시작하기ec2에서 nginx를 사용하는 방법을 알아 보겠습니다. 선행 설치이전 nginx 포스트에서 nginx를 설치를 먼저 해야합니다. 깃헙 설치하기 포스트 aws node 설치하기 공식 사이트 EC2 포트설정하기aws에서 네트워크 및 보안에 인스턴스에 해당하는 보안 그룹을 선택합니다.그리고 인바운드 규칙 편집 버튼을 선택합니다.네트워크 및 보안 &gt; 인스턴스 &gt; 인바운스 규칙편집 http와 사용자 지정포트를 입력해줍니다. 추후 https를 사용할 것이기에 https도 추가해줍니다. EC2 깃 프로젝트 설치하기인스턴스 터미널에서 다음 커맨드로 프로젝트를 준비합니다. 12345git clone 프로젝트cd 프로젝트npm inpm run start 그러면 준비가 완료 되었습니다. nginx 연동하기ec2에 nginx가 설치되어 있는상태에서 1service nginx status 커맨드를 입력하면 다음과 같이 서버가 실행이 되어있어야합니다. 퍼블릭IP를 URL에 입력하면 다음과 같은 화면이 나옵니다. nginx 기본 포트는 80으로 설정되어있습니다.이 포트에서 설정을 변경시켜줍니다. nginx 설정 변경기본팁설정을 변경하기 위해서는 기본적으로 vi편집기의 간단한 명령어를 알아야합니다.당황하지말고 따라하면됩니다. 처음에는 기본적으로 읽기모드로 되어있습니다.i를 클릭하면 입력모드로 글자를 입력할 수 있습니다.다시 읽기모드로 가기위해서는 esc를 누르면 됩니다. 읽기모드에서 편집을 하고 나서 저장후 닫고 싶으면 :wq를 입력하고, 저장하지 않고 닫고 싶다면 :q를 입력하고 enter를 누르면 됩니다. 글을 지울때 입력모드에서 del이나 backspace로 지울수 있는데 한줄 단위로 지우고 싶다면편집모드에서 dd를 누르면 한줄이 삭제 됩니다. 1sudo vi /etc/nginx/nginx.conf sudo로 하는 이유는 nginx.conf파일이 읽기전용 파일이기때문에 관리자 권한으로 강제로 덮어쓰기를 하기 위해서 입니다. 123location / &#123; proxy_pass http://127.0.0.1:8080/;&#125; conf파일의 server부분에 location을 추가합니다. conf파일이 변경되었기 때문에 nginx를 다시 재시동합니다. 1sudo service nginx restart nginx를 재시동하고나서 프로젝트를 실행합니다. 12cd 프로젝트명npm run start 퍼블릭 IP, DNS로 접속하면 따로 포트를 입력없이 연결되는것을 확인할 수 있습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://flamingotiger.github.io/tags/aws/"},{"name":"amazon web service","slug":"amazon-web-service","permalink":"http://flamingotiger.github.io/tags/amazon-web-service/"},{"name":"ec2","slug":"ec2","permalink":"http://flamingotiger.github.io/tags/ec2/"},{"name":"nginx","slug":"nginx","permalink":"http://flamingotiger.github.io/tags/nginx/"}]},{"title":"AWS애서 nginx 설치하기 (Amazon Linux 2 EC2)","slug":"backend/devOps/aws-nginx-install","date":"2020-10-26T05:35:12.000Z","updated":"2021-04-30T03:36:18.270Z","comments":true,"path":"backend/devOps/aws-nginx-install/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/aws-nginx-install/","excerpt":"","text":"시작하기Amazon Linux 2 EC2에서 nginx 웹서버를 설치하도록 합니다.amazon-linux-extras에는 nginx1 밖에 없으므로 nginx1을 먼저 설치해주도록합니다. nginx1 설치1sudo amazon-linux-extras enable nginx1 nginx1을 설치를 하면 마지막부분에 다음과 같은 커맨드가 나옵니다. 다음과 같이 설치를 진행합니다. 1sudo yum clean metadata &amp;&amp; sudo yum install nginx -y 다음 커맨드로 설치가 되었는지 확인할 수 있습니다. 1yum list installed nginx","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://flamingotiger.github.io/tags/aws/"},{"name":"amazon web service","slug":"amazon-web-service","permalink":"http://flamingotiger.github.io/tags/amazon-web-service/"},{"name":"ec2","slug":"ec2","permalink":"http://flamingotiger.github.io/tags/ec2/"},{"name":"nginx","slug":"nginx","permalink":"http://flamingotiger.github.io/tags/nginx/"}]},{"title":"AWS EC2 터미널 연결하기","slug":"backend/devOps/aws-ec2-connect-ssh","date":"2020-10-26T05:15:59.000Z","updated":"2021-04-30T03:36:18.269Z","comments":true,"path":"backend/devOps/aws-ec2-connect-ssh/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/aws-ec2-connect-ssh/","excerpt":"","text":"시작하기AWS EC2 인스턴스에서 터미널을 열고 하기에는 번거롭거나 끊기는 경우가 종종 발생합니다.그래서 로컬의 터미널에서 aws ec2를 연결해서 사용해보겠습니다. 인스턴스 확인ec2애서 연결하고자하는 인스턴스의 퍼블릭 IPv4 DNS주소를 복사합니다. ec2 연결하기ec2를 연결하기 위해서는 pem키가 필요합니다. 1ssh -i ~/Downloads/AWS_EC2_KeyPair_0.pem ec2-user@ec2-54-180-147-141.ap-northeast-2.compute.amazonaws.com ssh -i [Pem키 경로] [사용자이름@이전에 복사한 DNS]를 입력합니다.입력하면 다음과 같은 에러가 나옵니다. 이 에러는 bad permission으로 권한이 없다는 얘기입니다. 1234567# 사용자이름Amazon Linux AMI: ec2-userCentos AMI: centosFedora AMI: ec2-userRHEL AMI: ec2-user / rootSUSE: ec2-user / rootUbuntu AMI: ubuntu / root 그러면 권한을 주도록 합니다. 1chmod 400 ~/Downloads/AWS_EC2_KeyPair_0.pem chmod 400 [Pem키 경로] 이후 다시 접속 요청을 해봅니다. 1ssh -i ~/Downloads/AWS_EC2_KeyPair_0.pem ec2-user@ec2-54-180-147-141.ap-northeast-2.compute.amazonaws.com 연결이 완료되는 것을 확인할 수 있습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://flamingotiger.github.io/tags/aws/"},{"name":"amazon web service","slug":"amazon-web-service","permalink":"http://flamingotiger.github.io/tags/amazon-web-service/"},{"name":"ec2","slug":"ec2","permalink":"http://flamingotiger.github.io/tags/ec2/"}]},{"title":"AWS EC2에서 ssh키 생성과 git설치하기","slug":"backend/devOps/aws-ec2-install-git","date":"2020-10-23T07:02:26.000Z","updated":"2021-04-30T03:36:18.269Z","comments":true,"path":"backend/devOps/aws-ec2-install-git/","link":"","permalink":"http://flamingotiger.github.io/backend/devOps/aws-ec2-install-git/","excerpt":"","text":"시작하기AWS EC2 인스턴스에서 ssh키를 생성하고 git을 설치해 보겠습니다.ec2에서 인스턴스로 들어가 인스턴스에 연결이라는 버튼을 클릭한 후 다시 연결을 누르면 터미널 창```이 열립니다.123456## 설치하기### ssh키 생성```shellssh-keygen -t rsa 터미널에서 커맨드를 입력한이후 비밀번호 설정을 하지 않고 생성을 하기위해서 엔터를 입력합니다.그러면 SSH키가 생성이 됩니다. 이후 키를 확인해서 깃헙에 권한을 주어야합니다.키를 확인하는 방법은 ssh키를 생성했던 위치에서 1cat ~/.ssh/id_rsa.pub 커맨드를 입력해줍니다.그러면 ~~~~```라는 긴 텍스트 문장을 확인할 수 있습니다. 복사를 해줍니다.123456789101112131415161718192021222324이후 깃허브 페이지로 이동합니다.![SSH and GPG keys](/image/backend/devOps/aws-ec2-install-git-0.png)깃허브 오른쪽상단 마이페이지로 들어가 SSH and GPG keys탭을 선택합니다.![SSH keys](/image/backend/devOps/aws-ec2-install-git-1.png)New SSH keys버튼을 클릭해 자기가 원하는 이름과 이전에 복사했었던 ssh key를 붙여넣습니다.## git 설치하기ec2에 git을 사용하려면 git을 설치해야합니다.Yum을 이용하면 쉽게 git 설치가 가능합니다.`yum`이란?rpm기반 시스템용 패키지 관리 도구입니다. 윈도우 OS로 예를 들면 exe 파일로 설치/삭제 등을 하는 프로그램입니다.간단한 명령어 입니다.```shellyum install 설치yum update 업데이트yum remove 삭제yum replolist 저장소 확인yum list 패키지 목록 보기yum list installed 설치된 패키지 목록 보기 git 설치 12345sudo yum update -ysudo yum install git -ygit version 커맨드를 입력하면 git이 설치되는 것을 확인할 수 있습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"devOps","slug":"backend/devOps","permalink":"http://flamingotiger.github.io/categories/backend/devOps/"}],"tags":[{"name":"aws","slug":"aws","permalink":"http://flamingotiger.github.io/tags/aws/"},{"name":"amazon web service","slug":"amazon-web-service","permalink":"http://flamingotiger.github.io/tags/amazon-web-service/"},{"name":"ec2","slug":"ec2","permalink":"http://flamingotiger.github.io/tags/ec2/"}]},{"title":"React native firebase 페이스북 로그인 적용하기","slug":"frontend/ReactNative/react-native-firebase-facebook-login","date":"2020-07-15T04:29:40.000Z","updated":"2021-04-30T03:36:18.274Z","comments":true,"path":"frontend/ReactNative/react-native-firebase-facebook-login/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-facebook-login/","excerpt":"","text":"시작하기firebase 적용포스트를 통해 설정을 마친 상태여야 합니다.react-native v0.60 이상을 기준으로 작성하였습니다. 페이스북 개발자 계정설정페이스북 개발자 홈페이지에 로그인을 합니다. 오른쪽 상단 내 앱을 선택한 후 새 앱추가를 합니다. 내 앱 생성이 완료되면 Add a product에서 페이스북 로그인을 추가합니다. Firebase 설정설정 &gt; 기본설정에 접속하면 앱 아이디와 앱 시크릿 코드를 확인 할 수 있습니다. firebase로 접속해서 Authentication &gt; Sign-in method에 facebook을 선택해서 활성화 시켜줍니다.다음과 같은 팝업이 나옵니다.아까 보았던 앱 아이디와 앱 시크릿 코드를 입력해줍니다.하단에 나와있는 OAuth 리디렉션 url은 페이스북 로그인 설정에서 추가해줍니다. React native설정기본적인 설정은 완료되었습니다. 이제 다음으로 react native에서 사용해보겠습니다.react-native-fbsdk 패키지를 설치합니다. 1npm install --save react-native-fbsdk 다음 ios를 선택해서 하나하나 추가 및 수정해나가도록 해봅니다. 코코아팟으로 설정하고 pod &#39;FBSDKLoginKit&#39;이 부분을 /ios/Podfile에서 pod ‘~‘ 가 많은 부분 하단에 추가해줍니다. 번들 식별자는 xcode에서 확인할 수 있습니다. 다음 이미지의 두번째에 있는 텍스트가 번들 식별자입니다. 3번의 앱에 대한 sso활성화를 합니다. 뭔가 엄청나게 복잡한 값들이 나와있죠? 쉽게 할 수 있습니다. xcode에서 info.plist를 소스코드로 열어줍니다.그러면 다음과 같이 코드가 적혀있습니다. 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt; //===== 여기에 붙여넣기 4-2, 4-6 //... 코드들 //...&lt;/dict&gt;&lt;/plist&gt; 페이스북 사이트에서 보았던 4-2,4-6코드를 사이에 붙여넣습니다. 앱 델리게이트 연결해야 하는 단계가 왔습니다. 하지만.. 저희 프로젝트에서는 AppDelegate.swift라는 파일이 없습니다. 그래서 다른 방법으로 델리게이트를 연결하겠습니다. xcode에서 AppDelegate.m파일을 열어줍니다.상단에 다음코드를 추가합니다. 1#import &lt;FBSDKCoreKit/FBSDKCoreKit.h&gt; 그리고 AppDelegate부분에 두줄을 추가합니다. 12345678//...@implementation AppDelegate- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123; [[FBSDKApplicationDelegate sharedInstance] application:application // 추가 didFinishLaunchingWithOptions:launchOptions]; // 추가//... 마지막으로 @end바로 위에 다음 코드를 추가합니다. 1234567891011//...- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options&#123; return [[FBSDKApplicationDelegate sharedInstance]application:app openURL:url options:options];&#125;@end xcode를 열어서 info탭 맨하단에 있는 URL schema부분에서 fb+APPID를 입력합니다. 앱아이디는 페이스북 개발자 페이지에서 확인할 수 있습니다. 예를들면 fb123456789012345이런 형식으로 스키마를 등록합니다. 버튼 등의 단계들은 react native단에서 할것이기 때문에 다음 단계들은 넘어가보도록 합니다. 사용하기설정이 완료되었으니 이제 사용해보겠습니다. FacebookSignIn.jsx1234567import React from \"react\";import &#123; Button &#125; from \"react-native\";const FacebookSignIn = (&#123; onFacebookButtonPress &#125;) =&gt; &#123; return &lt;Button title=\"Facebook Sign-In\" onPress=&#123;onFacebookButtonPress&#125; /&gt;;&#125;;export default FacebookSignIn; 페이스북 로그인에 사용할 버튼을 생성합니다. App.jsx123456789101112131415161718192021222324252627282930import React from \"react\";import auth from \"@react-native-firebase/auth\";import &#123; LoginManager, AccessToken &#125; from \"react-native-fbsdk\";import FacebookSignIn from \"./FacebookSignIn\";const App = () =&gt; &#123; const handleFacebookButtonPress = async () =&gt; &#123; try &#123; const result = await LoginManager.logInWithPermissions([ \"public_profile\", \"email\", ]); if (result.isCancelled) &#123; throw \"User cancelled the login process\"; &#125; const data = await AccessToken.getCurrentAccessToken(); if (!data) &#123; throw \"Something went wrong obtaining access token\"; &#125; const facebookCredential = auth.FacebookAuthProvider.credential( data.accessToken ); const &#123;user&#125; = auth().signInWithCredential(facebookCredential); console.log('user data', user); &#125; catch (error) &#123; console.error(error); &#125; &#125;; return &lt;FacebookSignIn onFacebookButtonPress=&#123;handleFacebookButtonPress&#125; /&gt;;&#125;; 이것으로 페이스북 로그인 기능을 적용해보았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"firebase","slug":"firebase","permalink":"http://flamingotiger.github.io/tags/firebase/"},{"name":"facebook login","slug":"facebook-login","permalink":"http://flamingotiger.github.io/tags/facebook-login/"}]},{"title":"React native firebase 구글 로그인 적용하기","slug":"frontend/ReactNative/react-native-firebase-google-login","date":"2020-07-13T04:15:09.000Z","updated":"2021-04-30T03:36:18.274Z","comments":true,"path":"frontend/ReactNative/react-native-firebase-google-login/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase-google-login/","excerpt":"","text":"시작하기firebase 적용포스트를 통해 설정을 마친 상태여야 합니다. 라이브러리 설치1@react-native-community/google-signin 설치가 완료되면 초기화시키는 작업이 필요합니다. App.jsx1234567891011import &#123; GoogleSignin &#125; from '@react-native-community/google-signin';const App = () =&gt; &#123; useEffect(() =&gt; &#123; const socialGoogleConfigure = async () =&gt; &#123; await GoogleSignin.configure(&#123; webClientId: GOOGLE_WEB_CLIENT_ID &#125;); &#125;; socialGoogleConfigure(); &#125;, []); xcode의 GoogleService-info.plist를 열어서 clientId를 찾아서 webClientId 부분에 넣으면 됩니다.client_id.apps.googleusercontent.com과 같은 형식으로 생겼습니다. GoogleSignInCustomButton.jsx123456789101112131415import React from \"react\";import &#123; Button &#125; from \"react-native\";import auth from \"@react-native-firebase/auth\";import &#123; GoogleSignin &#125; from \"@react-native-community/google-signin\";const GoogleSignInCustomButton = () =&gt; &#123; const onGoogleButtonPress = async () =&gt; &#123; const &#123; idToken &#125; = await GoogleSignin.signIn(); const googleCredential = auth.GoogleAuthProvider.credential(idToken); return auth().signInWithCredential(googleCredential); &#125;; return &lt;Button title=\"구글로그인\" onPress=&#123;onGoogleButtonPress&#125; /&gt;;&#125;;export default GoogleSignInCustomButton; 이것으로 로그인 기능을 간단하게 구현해보았습니다. 에러ios에서 추가로 설정해야하는 부분이 있습니다.xcode에서 프로젝트를 선택하고 info탭으로 이동하면 맨 하단에 URL types가 있습니다. 그 부분에서 GoogleService-Info.plist파일의 REVERSED_CLIENT_ID부분을 복사해서 url스키마에 붙여넣기 합니다. 자세한 내용은 구글 ios 로그인 공식 사이트를 참고해주시면 됩니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"firebase","slug":"firebase","permalink":"http://flamingotiger.github.io/tags/firebase/"},{"name":"google login","slug":"google-login","permalink":"http://flamingotiger.github.io/tags/google-login/"}]},{"title":"React native 에러 혹은 여러 상황시에 초기화 방법","slug":"frontend/ReactNative/react-native-reset","date":"2020-07-09T07:37:00.000Z","updated":"2021-04-30T03:36:18.275Z","comments":true,"path":"frontend/ReactNative/react-native-reset/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-reset/","excerpt":"","text":"시작하기React native를 하다보면 오픈 라이브러리를 추가하거나 코드를 수정할때 제대로 작성했지만 동작하지 않는 경우가 종종 있습니다. 빌드한 데이터가 남아 있어서 일가능성이 있습니다. 그래서 초기화를 해보도록 하겠습니다. react-native1npm start --reset-cache React native에서 사용하는 메트로 서버 캐시를 초기화줍니다. ios프로젝트의 Xcode를 열어줍니다. 1Cmd + Shift + K 다음 커맨드를 입력하고 1rm -rf ~/Library/Developer/Xcode/DerivedData 다음 커맨드를 입력하여 빌드시 생성된 자료들을 초기화 시켜줍니다. 12cd iospod install cocoapod의 라이브러리들을 설치해줍니다. android12cd android./gradlew clean android 폴더에서 커맨드를 입력하고 android studio로 들어가 동기화 시키는 작업을 해주셔야 합니다. 끝으로다음과 같은 방법으로 하면 몇 가지의 이슈는 해결이 됩니다. 저 방법으로도 안된다면 구글 검색을 통해 다른 방법을 찾아야 될 것같습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"}]},{"title":"React native firebase 적용하기","slug":"frontend/ReactNative/react-native-firebase","date":"2020-07-06T06:34:20.000Z","updated":"2021-04-30T03:36:18.274Z","comments":true,"path":"frontend/ReactNative/react-native-firebase/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-firebase/","excerpt":"","text":"시작하기firebase는 손쉬운 방법으로 데이터 관리를 할수 있는 서비스 입니다. 서버의 인프라를 고민할 필요가 없습니다. 그리고 백엔드를 작업해야할 시간이 단축되는 장점이 있습니다. ios메인 페이지에 로그인을 한 후 프로젝트 등록합니다. xcode에서 Bundle Identifier를 복사 붙여넣기 합니다. 구성파일을 이미지와 같이 넣어줍니다.구성파일을 넣을때 Copy items if needed를 체크 해줍니다. ios내부의 podfile을 열어 pod ~~이렇게 되어있는 부분쪽에 다음과 같은 값을 넣어줍니다. android안드로이드 추가 버튼을 클릭합니다. bundle.grade파일에서 applicationId를 찾아 입력합니다. 구성파일을 다운받아 android 상단에 넣어 줍니다. 이미지를 참고해서 해당 코드를 입력합니다. 마지막으로 IDE의 표시줄에 있는 ‘지금 동기화’를 누르면 완료가 됩니다. React-native에서 적용방법 사이트적용방법 사이트에서 초기 설정을 자세한 방법으로 알 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"firebase","slug":"firebase","permalink":"http://flamingotiger.github.io/tags/firebase/"}]},{"title":"React native realm (typescript) 적용하기","slug":"frontend/ReactNative/react-native-realm","date":"2020-07-03T00:58:50.000Z","updated":"2021-04-30T03:36:18.275Z","comments":true,"path":"frontend/ReactNative/react-native-realm/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-realm/","excerpt":"","text":"시작하기react natvie 애플리케이션에서 로컬db로 저장하는 방법은 여러종류가 있습니다.sqlite, AsyncStorage, realm 등이 있습니다.이중에 realm을 사용해보도록 하겠습니다. 공식홈페이지에서는 기존 스토리지보다 더욱빠르고 향상된 기능을 제공한다고 합니다. 설치하기react-native v0.60이상에서 작성하였습니다. 1npm install --save realm realm 패키지를 설치합니다. 1cd ios &amp;&amp; pod install &amp;&amp; cd .. ios에 cocoapod을 설치합니다.다음으로 realm studio를 설치합니다. Realm studio시뮬레이터에서 사용하는 realm 데이터를 ui로 시각화해서 보기 위한 툴이 있습니다.realm studio가 그러한 서비스를 제공합니다. MySQLWorkbench, Robo 3T와 흡사한 기능을 하는 것이죠.Realm studio홈페이지에서 해당하는 운영체제로 다운로드합니다. 시작하기간단한 user데이터를 realm에 저장해보겠습니다. src/db/index.ts12345678910111213141516171819202122232425import Realm from \"realm\";export interface IUser &#123; id: string; name: string; email: string;&#125;class User &#123; public static schema: Realm.ObjectSchema;&#125;User.schema = &#123; name: \"User\", primaryKey: \"id\", properties: &#123; id: \"string\", name: \"string\", email: \"string\", &#125;,&#125;;let realm = new Realm(&#123; schema: [User] &#125;);export default realm; User의 스키마를 정해줍니다. 다음으로 생성을 하는 유저 생성하는 기능을 추가해보겠습니다. App.tsx123456789101112131415161718192021import React from \"react\";import &#123; View, Text &#125; from \"react-native\";import realm from \"./src/db\";const App = () =&gt; &#123; const createUser = () =&gt; &#123; realm.write(() =&gt; &#123; realm.create(\"User\", &#123; id: \"테스트유저아이디\", name: \"테스트유저이름\", email: \"테스트유저이메일@gmail.com\", &#125;); &#125;); &#125;; return ( &lt;View&gt; &lt;Text&gt;Realm&lt;/Text&gt; &lt;Button title=\"Create User\" onPress=&#123;createUser&#125; /&gt; &lt;/View&gt; );&#125;; 설정이 완료되었습니다. 데이터 저장하기App.tsx123456789101112131415161718192021import React, &#123; useEffect &#125; from \"react\";import &#123; View, Text &#125; from \"react-native\";import Realm from \"realm\";import realm from \"./src/db\";const App = () =&gt; &#123; useEffect(() =&gt; &#123; Realm.open(&#123;&#125;).then((realm) =&gt; &#123; console.log(\"Realm is located at: \" + realm.path); &#125;); &#125;, []); const createUser = () =&gt; &#123; // ... &#125;; return ( &lt;View&gt; &lt;Text&gt;Realm&lt;/Text&gt; &lt;Button title=\"Create User\" onPress=&#123;createUser&#125; /&gt; &lt;/View&gt; );&#125;; 다음과 같이 입력하면 시뮬레이터에서 로컬로 저장했을시 실제 데이터의 위치 경로를 알려줍니다. 1Realm is located at: /Users/&lt;Name&gt;/Library/Developer/CoreSimulator/Devices/&lt;Value&gt;/data/Containers/Data/Application/&lt;Value&gt;/Documents/default.realm 위와 같이 console이 찍히는 것을 확인할 수 있습니다.console을 확인하는 방법으로는 command(ctrl) + d를 입력해서 debug를 선택하면 됩니다. 1open /Users/&lt;Name&gt;/Library/Developer/CoreSimulator/Devices/&lt;Value&gt;/data/Containers/Data/Application/&lt;Value&gt;/Documents/default.realm 터미널을 열어서 다음 path를 입력하면 이전에 설치했던 realm studio가 실행됩니다. 이전에 생성했던 createUser버튼을 클릭합니다.이후 realm을 확인하면 데이터가 추가된 것을 확인 할 수 있습니다. 데이터 불러오기데이터를 저장했으면 불러와서 사용을 해야합니다. App.tsx1234567891011121314151617181920212223242526272829import React, &#123; useEffect, useState &#125; from \"react\";import &#123; View, Text &#125; from \"react-native\";import Realm from \"realm\";import realm from \"./src/db\";const App = () =&gt; &#123; const [user, setUser] = useState&lt;IUser | null&gt;(null); useEffect(() =&gt; &#123; const getUser = async () =&gt; &#123; try &#123; let localUser: Results&lt;IUser&gt; = await realm.objects(\"User\"); setUser(localUser[0]); &#125; catch (e) &#123; Alert.alert(\"유저데이터가 없어요\"); &#125; &#125;; getUser(); &#125;, []); const createUser = () =&gt; &#123; // ... &#125;; return ( &lt;View&gt; &lt;Text&gt;Realm&lt;/Text&gt; &lt;Text&gt;Email: &#123;user?.email&#125;&lt;/Text&gt; &lt;Button title=\"Create User\" onPress=&#123;createUser&#125; /&gt; &lt;/View&gt; );&#125;; async await와 try catch를 이용해서 유저를 불러오는데 만약 없다면 alert을 띄워줍니다.이것으로 realm을 사용해보았습니다. 손쉬운 사용법으로 로컬 디비를 다룰수 있습니다. React native ios build시 node: command not found Node.js 에러 해결방법 (추가: 7/13)React native에서 npm install realm로 realm을 설치하고 나서 xcode에서 빌드를 하면 다음과 같은 에러가 나오는 경우가 있습니다. node: command not found Node.js라는 에러이죠. /bin/sh터미널에서 실행할 대 PATH부모 셸에서 노드를 가져와 노드가 작동하기 때문일 것으로 추측합니다. 노드가 작동하는 일반적인 터미널에서 다음과 같이 시도해보시길 바랍니다. 1ln -s $(which node) /usr/local/bin/node 커맨드에 입력후 빌드시 에러가 해결되는 것을 확인할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"realm","slug":"realm","permalink":"http://flamingotiger.github.io/tags/realm/"}]},{"title":"React native splash screen 적용하기","slug":"frontend/ReactNative/react-native-splash-screen","date":"2020-07-02T04:29:38.000Z","updated":"2021-04-30T03:36:18.275Z","comments":true,"path":"frontend/ReactNative/react-native-splash-screen/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-splash-screen/","excerpt":"","text":"시작하기애플리케이션을 처음실행하면 홈화면이 등장하기전에 로고가 나오는 페이지를 splash screen이라 합니다.react native splash screen패키지를 이용해서 splash screen를 구현해보겠습니다. 설치하기react-native v0.60 이상에서는 자동으로 링크해주기 때문에 추가로 link를 할 필요는 없습니다. 1npm i react-native-splash-screen 123cd iospod installcd .. npm패키지를 설치하고 ios에 패키지를 설치해줍니다. 설정하기안드로이드에서 설정React native프로젝트의 android폴더를 android studio로 열어줍니다.MainActivity.java파일을 수정하겠습니다. app/java/com.[프로젝트이름]/MainActivity.java123456789101112import android.os.Bundle; // 추가!!import com.facebook.react.ReactActivity;import org.devio.rn.splashscreen.SplashScreen; // 추가!!public class MainActivity extends ReactActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; SplashScreen.show(this); // 추가!! super.onCreate(savedInstanceState); &#125; // ...&#125; 그리고 안드로이드에서 사용할 Splash 스크린을 생성해야 합니다.res내부에 layout/launch_screen.xml을 생성하고 아래와 같이 소스를 추가합니다. res/layout/launch_screen.xml123456&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;ImageView android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:src=\"@drawable/launch_screen\" android:scaleType=\"centerCrop\" /&gt;&lt;/RelativeLayout&gt; 위에 코드를 그대로 사용하셔도 되지만 Splash 이미지 파일명이 다른 경우 android:background=”@drawable/launch_screen”의 launch_screen부분을 생성하신 이미지 파일명으로 고쳐서 사용하시면 됩니다.자세한 내용은 react-native-splash-screen 깃헙을 참고해주시면 됩니다. ios에서 설정React native프로젝트의 ios폴더를 xcode로 열어줍니다. images.xcassets폴더에서 +버튼을 클릭하면, images를 생성할 수 있습니다. 다음부분에 이미지를 각각 사이즈에 맞춰서 넣어줍니다. 넣는 방법은 각각의 이미지를 드래그해서 넣으면 됩니다.각각200x200, 400x400, 600x600 사이즈에 맞추었습니다. Launch Screen.storyboard프로젝트 폴더에서 Launch Screen.storyboard 파일을 만들어주도록 합니다. launch screen을 선택해서 생성합니다.이후 screen을 수정해보겠습니다.Launch Screen.storyboard파일을 열고 기존에 텍스트나 그런것들 다 지워줍니다.그리고 상단의 +버튼을 클릭합니다. 아이폰 홈버튼 이미지 파레트 아이콘 세개가 보이는데 그중에 이미지를 클릭하면 workspace에 추가한 이미지들이 나옵니다. 그 중에서 아까 추가해주었던 로고이미지를 끌어당기면서 아이폰모양에 가져다댑니다.그러면 이미지가 생성이 됩니다. 생성된 이미지를 클릭한 후 오른쪽의 탭에서 뾰족한 아이콘을 클릭합니다. 이미지의 Content Mode는 Aspect Fit으로 설정해줍니다. 자모양의 아이콘을 클릭하고 Autoresizing을 가운데에 선만 활성상태가 되도록 클릭해줍니다. Launch Screen 커스텀이 완료되었습니다. 코드 수정사용하기 위해서는 코드를 수정해주어야합니다. 12345678910111213141516#import \"AppDelegate.h\"#import &lt;React/RCTBundleURLProvider.h&gt;#import &lt;React/RCTRootView.h&gt;#import \"RNSplashScreen.h\" // 추가@implementation AppDelegate- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123; [RNSplashScreen show]; // here //... return YES;&#125;@end 다음으로 react native에서 코드를 추가해보겠습니다. React nativereact native에서는 간단하게 적용할 수 있습니다. App.jsx1234567891011//...import SplashScreen from \"react-native-splash-screen\";const App = () =&gt; &#123; //... useEffect(() =&gt; &#123; SplashScreen.hide(); &#125;, []); //...&#125;;//... 앱 아이콘 추가하기ios 앱아이콘을 추가하고자 할때 App icon generator 사이트에서 보유한 로고를 넣으면 자동 변환한 파일을 다운받을 수 있습니다.그리고 xcode에서 사이즈에 맞는 이미지 하나씩 넣어주면 적용됩니다.splash나 앱 로고가 적용이 안될시 삭제후 다시 실행해보시면 적용되는것을 확인 할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"},{"name":"splash screen","slug":"splash-screen","permalink":"http://flamingotiger.github.io/tags/splash-screen/"}]},{"title":"React-native 프로젝트 이름변경","slug":"frontend/ReactNative/react-native-rename","date":"2020-07-02T04:06:03.000Z","updated":"2021-04-30T03:36:18.275Z","comments":true,"path":"frontend/ReactNative/react-native-rename/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-rename/","excerpt":"","text":"시작하기기본 토대가 되는 프로젝트를 만들어 놓고, 프로젝트 생성시에 사용하고 싶을때 이름만 변경해야 하는데 그 과정이 복잡합니다. web 프로젝트와 다르게 react native에서는 많은 파일의 이름을 바꾸어주어야 하기 때문이죠.이러한 과정을 간단하게 해주는 패키지가 있습니다. 변경하기react-native-rename패키지를 설치합니다. 1npm install -g react-native-rename 그 다음 이름을 변경할 프로젝트 내부에서 다음을 입력합니다. 1react-native-rename \"변경할 이름\" 그러면 이름이 변경됩니다.다음으로 이름에 대해 연결을 시켜줘야합니다.안드로이드는 자동으로 연결됩니다.ios의 경우에는 다음과 같은 커맨드를 입력해주어야합니다. 12cd iospod install 커맨드를 입력한 후 실행을 시켜주면 됩니다. 1npm run ios","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"}]},{"title":"React native 절대경로 (absolute path) 설정하기","slug":"frontend/ReactNative/react-native-absolute-path","date":"2020-07-02T01:08:53.000Z","updated":"2021-04-30T03:36:18.274Z","comments":true,"path":"frontend/ReactNative/react-native-absolute-path/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-absolute-path/","excerpt":"","text":"시작하기React native 공식 홈페이지에서 제시하는 absolute path가 적용 되지 않는 경우가 있습니다. React native 초기설정 포스트를 통해서 생성한경우 1npx react-native init ProjectName --template react-native-template-typescript 템플릿으로 생성된것에 대해서 absolute path설정을 하겠습니다. 설정하기설정하는 방법은 간단합니다.다음과 같이 몇 줄만 추가해주면됩니다. 123&#123; \"compilerOptions\": &#123; \"baseUrl\": \".\" metro.config.js12345678910111213141516const path = require(\"path\");module.exports = &#123; resolver: &#123; extraNodeModules: &#123; src: path.resolve(__dirname, \"src\"), &#125;, &#125;, transformer: &#123; getTransformOptions: async () =&gt; (&#123; transform: &#123; experimentalImportSupport: false, inlineRequires: false, &#125;, &#125;), &#125;,&#125;; 설정이 완료되면, 다음과 같이 사용할 수 있습니다. 1import Home from \"src/screens/Home\"; npm run ios or npm run android를 하면 실행이 됩니다.만약 안될경우 npm start reset--cache커맨드 입력후 다시 실행시켜줍니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"react navigation","slug":"react-navigation","permalink":"http://flamingotiger.github.io/tags/react-navigation/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"}]},{"title":"React navigation v5 설정하기","slug":"frontend/ReactNative/react-native-react-navigation","date":"2020-06-30T03:37:52.000Z","updated":"2022-01-07T08:26:34.573Z","comments":true,"path":"frontend/ReactNative/react-native-react-navigation/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-react-navigation/","excerpt":"","text":"시작하기웹 React에서 사용하는 react-router-dom과 같이 react native에서 페이지네이션을 위해 react navigation을 사용하도록 하겠습니다. 설치하기React native 초기설정 포스트를 통해 프로젝트를 생성합니다. React Native 0.60이상에서 연결은 자동으로 되기때문에 이전버젼에 사용하던 react-native link을 따로 실행할 필요가 없습니다. 1npm install @react-navigation/native react navigation을 설치 합니다. 1npm install @react-navigation/stack 스택 네비게이터 라이브러리 설치합니다. 1npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view React Native 프로젝트에 종속성 설치 합니다. Mac을 사용 중이고 iOS 용으로 개발중인 경우 연결을 완료하려면 Cocoapods 를 통해 포드를 설치해야합니다. 1npx pod-install ios App.tsx12345678910111213141516171819202122232425262728293031import * as React from 'react';import &#123; View, Text &#125; from 'react-native';import &#123; NavigationContainer &#125; from '@react-navigation/native';import &#123; createStackNavigator &#125; from '@react-navigation/stack';const HomeScreen:React.FC = () =&gt; &#123; return ( &lt;View style=&#123;&#123; flex: 1, alignItems: 'center', justifyContent: 'center' &#125;&#125;&gt; &lt;Text&gt;Home Screen&lt;/Text&gt; &lt;/View&gt; );&#125;type StackParamList = &#123; Home: undefined; Detail: undefined;&#125;;const Stack = createStackNavigator&lt;StackParamList&gt;();function App() &#123; return ( &lt;NavigationContainer&gt; &lt;Stack.Navigator&gt; &lt;Stack.Screen name=\"Home\" component=&#123;HomeScreen&#125; /&gt; &lt;/Stack.Navigator&gt; &lt;/NavigationContainer&gt; );&#125;export default App; Detail screen 추가App.tsx1234567891011121314151617181920const DetailsScreen:React.FC = () =&gt; &#123; return ( &lt;View style=&#123;&#123; flex: 1, alignItems: 'center', justifyContent: 'center' &#125;&#125;&gt; &lt;Text&gt;Details Screen&lt;/Text&gt; &lt;/View&gt; );&#125;const Stack = createStackNavigator();function App() &#123; return ( &lt;NavigationContainer&gt; &lt;Stack.Navigator initialRouteName=\"Home\"&gt; &lt;Stack.Screen name=\"Home\" component=&#123;HomeScreen&#125; /&gt; &lt;Stack.Screen name=\"Detail\" component=&#123;DetailScreen&#125; /&gt; &lt;/Stack.Navigator&gt; &lt;/NavigationContainer&gt; );&#125; Detailscreen을 추가했습니다.다음으로 환면간에 이동을 구현해보겠습니다. 화면 이동App.tsx1234567891011121314151617export type IHomeNavigationProps = &#123; navigation: StackNavigationProp&lt;StackParamList, ROUTE_NAMES.HOME&gt;;&#125;;interface IHomeScreenProps extends IHomeNavigationProps &#123; route: RouteProp&lt;StackParamList, ROUTE_NAMES.HOME&gt;;&#125;const HomeScreen:React.FC&lt;IHomeScreenProps&gt; = (&#123;navigation&#125;) =&gt; &#123; return ( &lt;View style=&#123;&#123; flex: 1, alignItems: 'center', justifyContent: 'center' &#125;&#125;&gt; &lt;Text&gt;Home Screen&lt;/Text&gt; &lt;Button title=\"Go to Details\" onPress=&#123;() =&gt; navigation.navigate(\"Detail\")&#125; /&gt; &lt;/View&gt; );&#125;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"},{"name":"react navigation","slug":"react-navigation","permalink":"http://flamingotiger.github.io/tags/react-navigation/"},{"name":"리액트 네이티브","slug":"리액트-네이티브","permalink":"http://flamingotiger.github.io/tags/리액트-네이티브/"}]},{"title":"D3로 pie chart 그리기","slug":"frontend/d3/d3-piechart","date":"2020-06-29T01:27:07.000Z","updated":"2021-04-30T03:36:18.276Z","comments":true,"path":"frontend/d3/d3-piechart/","link":"","permalink":"http://flamingotiger.github.io/frontend/d3/d3-piechart/","excerpt":"","text":"시작하기d3 bar차트 포스트에서 다루었던 데이터를 토대로 pie차트를 만들어보겠습니다. 기본설정123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgDimensions = &#123; width: 300, height: 300, &#125;; const radius = Math.min(svgDimensions.width, svgDimensions.height) / 2; const data = [420, 80, 130, 210, 510, 80]; const svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", svgDimensions.width) .attr(\"height\", svgDimensions.height) .style(\"border\", \"1px solid rgba(0,0,0,0.1)\"); const g = svg .append(\"g\") .attr( \"transform\", `translate($&#123;svgDimensions.width / 2&#125;, $&#123;svgDimensions.height / 2&#125;)` ); const color = d3.scaleOrdinal([ \"#ff9800\", \"#ffa726\", \"#ffb74d\", \"#ffcc80\", \"#ffe0b2\", \"#fff3e0\", ]); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; color: 데이터 배열의 값 인덱스를 색상 스케일에 전달하면 해당 색상 값이 반환됩니다. g: 생성 된 파이가 SVG의 경계에 맞도록 Math.min (width, height) / 2로 반경을 계산합니다 pie차트를 그릴 기본적인 색상 및 사이즈 규격을 정해주도록 합니다. pie그리기12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgDimensions = &#123; width: 300, height: 300, &#125;; const radius = Math.min(svgDimensions.width, svgDimensions.height) / 2; const data = [420, 80, 130, 210, 510, 80]; const svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", svgDimensions.width) .attr(\"height\", svgDimensions.height) .style(\"border\", \"1px solid rgba(0,0,0,0.1)\"); const g = svg .append(\"g\") .attr( \"transform\", `translate($&#123;svgDimensions.width / 2&#125;, $&#123;svgDimensions.height / 2&#125;)` ); const color = d3.scaleOrdinal([ \"#ff9800\", \"#ffa726\", \"#ffb74d\", \"#ffcc80\", \"#ffe0b2\", \"#fff3e0\", ]); const pie = d3.pie(); const arc = d3.arc().innerRadius(0).outerRadius(radius); const arcs = g .selectAll(\"arc\") .data(pie(data)) .enter() .append(\"g\") .attr(\"class\", \"arc\"); arcs .append(\"path\") .attr(\"fill\", (d, i) =&gt; color(i)) .attr(\"d\", arc); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; pie: pie를 그린다고 선언을 합니다. arc: innerRadius 와 outerRadius로 내부 반지름이 0이고 외부 반지름이 미리 계산된 반지름으로 호를 정의합니다. arcs: 이제 각 데이터 값에 대한 그룹 요소를 만듭니다. path: 앞서 생성 된 호를 제공하고 색상 스케일의 색상으로 채 웁니다. 추가 - hover했을때 transition과 text텍스트 값을 추가합니다. 123456789101112//...arcs .append(\"text\") .attr(\"transform\", (d) =&gt; `translate($&#123;arc.centroid(d)&#125;)`) .text((d) =&gt; d.value) .attr(\"font-family\", \"sans-serif\") .attr(\"font-size\", \"18px\") .attr(\"font-weight\", \"bold\") .attr(\"fill\", \"#fff\") .attr(\"text-anchor\", \"middle\") .attr(\"display\", \"none\");//... 마우스 이벤트를 추가합니다.마우스 hover되었을때와 나왔을때의 기능을 구현합니다. 123456789101112131415161718192021222324252627//...const arcs = g .selectAll(\"arc\") .data(pie(data)) .enter() .append(\"g\") .attr(\"class\", \"arc\") .on(\"mouseover\", onMouseOver) // 이벤트 추가 .on(\"mouseout\", onMouseOut); // 이벤트 추가function onMouseOut(d, i) &#123; d3.select(this) .select(\"path\") .transition() .duration(200) .style(\"fill\", color(i)); d3.select(this).select(\"text\").attr(\"display\", \"none\");&#125;function onMouseOver(d, i) &#123; d3.select(this) .select(\"path\") .transition() .duration(200) .style(\"fill\", \"#e65100\"); d3.select(this).select(\"text\").attr(\"display\", \"block\");&#125; 최종코드123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgDimensions = &#123; width: 300, height: 300, &#125;; const radius = Math.min(svgDimensions.width, svgDimensions.height) / 2; const data = [420, 80, 130, 210, 510, 80]; const svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", svgDimensions.width) .attr(\"height\", svgDimensions.height) .style(\"border\", \"1px solid rgba(0,0,0,0.1)\"); const g = svg .append(\"g\") .attr( \"transform\", `translate($&#123;svgDimensions.width / 2&#125;, $&#123;svgDimensions.height / 2&#125;)` ); const color = d3.scaleOrdinal([ \"#ff9800\", \"#ffa726\", \"#ffb74d\", \"#ffcc80\", \"#ffe0b2\", \"#fff3e0\", ]); const pie = d3.pie(); const arc = d3.arc().innerRadius(0).outerRadius(radius); const arcs = g .selectAll(\"arc\") .data(pie(data)) .enter() .append(\"g\") .attr(\"class\", \"arc\") .on(\"mouseover\", onMouseOver) .on(\"mouseout\", onMouseOut); arcs .append(\"path\") .attr(\"fill\", (d, i) =&gt; color(i)) .attr(\"d\", arc); arcs .append(\"text\") .attr(\"transform\", (d) =&gt; `translate($&#123;arc.centroid(d)&#125;)`) .text((d) =&gt; d.value) .attr(\"font-family\", \"sans-serif\") .attr(\"font-size\", \"18px\") .attr(\"font-weight\", \"bold\") .attr(\"fill\", \"#fff\") .attr(\"text-anchor\", \"middle\") .attr(\"display\", \"none\"); function onMouseOut(d, i) &#123; d3.select(this) .select(\"path\") .transition() .duration(200) .style(\"fill\", color(i)); d3.select(this).select(\"text\").attr(\"display\", \"none\"); &#125; function onMouseOver(d, i) &#123; d3.select(this) .select(\"path\") .transition() .duration(200) .style(\"fill\", \"#e65100\"); d3.select(this).select(\"text\").attr(\"display\", \"block\"); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"d3","slug":"frontend/d3","permalink":"http://flamingotiger.github.io/categories/frontend/d3/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://flamingotiger.github.io/tags/javascript/"},{"name":"d3","slug":"d3","permalink":"http://flamingotiger.github.io/tags/d3/"},{"name":"pie","slug":"pie","permalink":"http://flamingotiger.github.io/tags/pie/"}]},{"title":"D3로 bar chart 그리기","slug":"frontend/d3/d3-barchart","date":"2020-06-25T08:10:58.000Z","updated":"2021-04-30T03:36:18.276Z","comments":true,"path":"frontend/d3/d3-barchart/","link":"","permalink":"http://flamingotiger.github.io/frontend/d3/d3-barchart/","excerpt":"","text":"시작하기d3포스트에서 다루었던 기본을 토대로 bar차트를 만들어 보도록 하겠습니다. 축그리기처음 html파일을 생성하고, 다음과 cdn d3를 불러와줍니다. 12345678&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt; 가장 먼저 svg, svg의 사이즈를 추가해줍니다. 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgWidth = 300, svgHeight = 300; const data = [40, 80, 130, 210, 100, 20]; const svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", svgWidth) .attr(\"height\", svgHeight) .style(\"border\", \"1px solid rgba(0,0,0,0.1)\"); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; X축그리기먼저 x축을 그려보겠습니다. 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgWidth = 300, svgHeight = 300; const data = [40, 80, 130, 210, 100, 20]; const svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", svgWidth) .attr(\"height\", svgHeight) .style(\"border\", \"1px solid rgba(0,0,0,0.1)\"); const padding = 30; // xAxis const xAxisScale = d3 .scaleBand() .domain(data.map((d, i) =&gt; i)) // 실제값의 범위 index값 .range([padding, svgWidth - padding]) // 변환할 값의 범위 .padding(0.1); // 내부 padding const xAxis = d3.axisBottom().scale(xAxisScale); const xAxisTranslate = svgWidth - padding; svg .append(\"g\") .call(xAxis) .attr(\"transform\", `translate(0, $&#123;xAxisTranslate&#125;)`); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; xAxisScale: axis축을 그려줄 범위를 정해줍니다. 이 변수값은 함수입니다. console.log(typeof xAxisScale) // function xAxis: axis 아랫방향으로 scale을 적용한 축을 그립니다.console.log(typeof xAxis) // function xAxisTranslate: 왼쪽 상단부터 시작되기때문에 translate로 세로 높이에 패딩을 뺄셈한 만큼 이동해주어야합니다.이후 svg에 call함수로 xAxis를 실행시켜줍니다. Y축그리기y축도 x축과 비슷하게 작성할 수 있습니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgWidth = 300, svgHeight = 300; const data = [40, 80, 130, 210, 100, 20]; const svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", svgWidth) .attr(\"height\", svgHeight) .style(\"border\", \"1px solid rgba(0,0,0,0.1)\"); const padding = 30; // xAxis const xAxisScale = d3 .scaleBand() .domain(data.map((d, i) =&gt; i)) // 실제값의 범위 .range([padding, svgWidth - padding]) // 변환할 값의 범위 .padding(0.1); const xAxis = d3.axisBottom().scale(xAxisScale); // yAxis const yAxisScale = d3 .scaleLinear() .domain([0, d3.max(data)]) // 실제값의 범위 .range([svgHeight - padding, padding]); // 변환할 값의 범위(역으로 처리) const yAxis = d3.axisLeft().scale(yAxisScale); const xAxisTranslate = svgWidth - padding; svg .append(\"g\") .call(xAxis) .attr(\"transform\", `translate(0, $&#123;xAxisTranslate&#125;)`); svg .append(\"g\") .attr(\"class\", \"x-axis\") .call(yAxis) .attr(\"transform\", `translate($&#123;padding&#125;, 0)`); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; yAxisScale: axis축을 그려줄 범위를 정해줍니다. 이 변수값은 함수입니다. console.log(typeof yAxisScale) // function yAxis: axis 왼쪽방향으로 scale을 적용한 축을 그립니다.console.log(typeof yAxis) // function data 바인딩data값을 바형태의 차트로 그릴수 있도록 하겠습니다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgWidth = 300, svgHeight = 300; const data = [40, 80, 130, 210, 100, 20]; const svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", svgWidth) .attr(\"height\", svgHeight) .style(\"border\", \"1px solid rgba(0,0,0,0.1)\"); const padding = 30; // xAxis const xAxisScale = d3 .scaleBand() .domain(data.map((d, i) =&gt; i)) // 실제값의 범위 .range([padding, svgWidth - padding]) // 변환할 값의 범위 .padding(0.1); const xAxis = d3.axisBottom().scale(xAxisScale); // yAxis const yAxisScale = d3 .scaleLinear() .domain([0, d3.max(data)]) // 실제값의 범위 .range([svgHeight - padding, padding]); // 변환할 값의 범위(역으로 처리) const yAxis = d3.axisLeft().scale(yAxisScale); const xAxisTranslate = svgWidth - padding; svg .append(\"g\") .attr(\"class\", \"x-axis\") .call(xAxis) .attr(\"transform\", `translate(0, $&#123;xAxisTranslate&#125;)`); svg .append(\"g\") .attr(\"class\", \"y-axis\") .call(yAxis) .attr(\"transform\", `translate($&#123;padding&#125;, 0)`); // data const rectWidth = 40; svg .selectAll(\"rect\") .data(data) .enter() .append(\"rect\") .attr(\"height\", (d) =&gt; svgHeight - yAxisScale(d) - padding) .attr(\"width\", xAxisScale.bandwidth()) .attr(\"x\", (d, i) =&gt; xAxisScale(i)) .attr(\"y\", (d) =&gt; yAxisScale(d)) .attr(\"fill\", \"orange\"); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; selectAll로 rect를 선택한다고 선언한뒤에 data를 enter하여 엘리먼트가 생성되고 각각에 __data__값이 저장 됩니다. 각 사각형의 width, height, x좌표, y좌표를 데이터 기준으로 뿌려줍니다. height: data의 값입니다. width: 앞에 xAxisScale에서 너비(xAxisScale.bandwidth())를 가져올수 있습니다. 각각 계산해서 구현할 수도 있지만, 연결 되어있는 편이 관리하기 더 편리합니다. x: width와 마찬가지로 xAxisScale에서 사용한 위치(xAxisScale(i))를 가져올수 있습니다. x축과 키값이 같아야합니다. y: yAxisScale(d) yAxis 값에 연동됩니다. j쿼리와 비슷한 사용법이라 쉽게 차트를 그릴수 있었습니다. 추가 - hover했을때 transition과 texthover했을때 간단한 트랜지션과 데이터 값 텍스트가 나오게 해보겠습니다. 처음으로 text가 나올 부분인 g태그 하나 추가합니다.text가 기본상태에서는 나오지 않게 display none을 넣어주었습니다. 1234567891011121314151617181920212223242526272829303132333435363738394041// ...svg .append(\"g\") .attr(\"class\", \"x-axis\") .call(xAxis) .attr(\"transform\", `translate(0, $&#123;xAxisTranslate&#125;)`);svg .append(\"g\") .attr(\"class\", \"y-axis\") .call(yAxis) .attr(\"transform\", `translate($&#123;padding&#125;, 0)`);svg.append(\"g\").attr(\"class\", \"val\"); // text영역// dataconst rectWidth = 40;svg .selectAll(\"rect\") .data(data) .enter() .append(\"rect\") .attr(\"height\", (d) =&gt; svgHeight - yAxisScale(d) - padding) .attr(\"width\", xAxisScale.bandwidth()) .attr(\"x\", (d, i) =&gt; xAxisScale(i)) .attr(\"y\", (d) =&gt; yAxisScale(d)) .attr(\"fill\", \"orange\");// 텍스트값 추가svg .select(\".val\") .selectAll(\"text\") .data(data) .enter() .append(\"text\") .attr(\"x\", (d, i) =&gt; xAxisScale(i) + xAxisScale.bandwidth() / 2) .attr(\"y\", (d) =&gt; yAxisScale(d)) .text((d) =&gt; d) .attr(\"font-family\", \"sans-serif\") .attr(\"font-size\", \"11px\") .attr(\"fill\", \"black\") .attr(\"text-anchor\", \"middle\") .attr(\"display\", \"none\");//... 마우스 이벤트를 추가합니다.마우스 hover되었을때와 나왔을때의 기능을 구현합니다. 1234567891011121314151617181920212223242526272829// ...svg .selectAll(\"rect\") .data(data) .enter() .append(\"rect\") .attr(\"height\", (d) =&gt; (d) =&gt; svgHeight - yAxisScale(d) - padding) .attr(\"width\", xAxisScale.bandwidth()) .attr(\"x\", (d, i) =&gt; xAxisScale(i)) .attr(\"y\", (d) =&gt; yAxisScale(d)) .attr(\"fill\", \"orange\") .on(\"mouseover\", onMouseOver) .on(\"mouseout\", onMouseOut);//...function onMouseOut(d, i) &#123; d3.select(this).transition().duration(400).style(\"fill\", \"orange\"); d3.select(\".val\") .selectAll(\"text\") .filter((d, index) =&gt; index === i) .attr(\"display\", \"none\");&#125;function onMouseOver(d, i) &#123; d3.select(this).transition().duration(400).style(\"fill\", \"red\"); d3.select(\".val\") .selectAll(\"text\") .filter((d, index) =&gt; index === i) .attr(\"display\", \"block\");&#125; 최종코드123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;meta charset=\"utf-8\"&gt; &lt;head&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; const svgWidth = 300, svgHeight = 300; const data = [420, 80, 130, 210, 510, 80]; const svg = d3.select(\"body\") .append(\"svg\") .attr(\"width\", svgWidth) .attr(\"height\", svgHeight) .style(\"border\",\"1px solid rgba(0,0,0,0.1)\"); const padding = 30; // xAxis const xAxisScale = d3.scaleBand() .domain(data.map((d,i) =&gt; i)) // 실제값의 범위 .range([padding, svgWidth - padding]) // 변환할 값의 범위 .padding(0.1); const xAxis = d3.axisBottom().scale(xAxisScale); // yAxis const yAxisScale = d3.scaleLinear() .domain([0, d3.max(data)]) // 실제값의 범위 .range([svgHeight - padding, padding]); // 변환할 값의 범위(역으로 처리) const yAxis = d3.axisLeft().scale(yAxisScale); const xAxisTranslate = svgWidth - padding; svg.append(\"g\").attr(\"class\", \"x-axis\").call(xAxis).attr(\"transform\", `translate(0, $&#123;xAxisTranslate&#125;)`); svg.append(\"g\").attr(\"class\", \"y-axis\").call(yAxis).attr(\"transform\", `translate($&#123;padding&#125;, 0)`); svg.append(\"g\").attr(\"class\", \"val\"); // data const rectWidth = 40; svg.selectAll(\"rect\") .data(data) .enter() .append(\"rect\") .attr(\"height\", d =&gt; svgHeight - yAxisScale(d) - padding) .attr(\"width\", xAxisScale.bandwidth()) .attr(\"x\", (d,i) =&gt; xAxisScale(i)) .attr(\"y\", d =&gt; yAxisScale(d)) .attr(\"fill\", \"orange\") .on(\"mouseover\", onMouseOver) .on(\"mouseout\", onMouseOut) svg.select(\".val\") .selectAll(\"text\") .data(data) .enter() .append(\"text\") .attr(\"x\", (d,i) =&gt; xAxisScale(i) + (xAxisScale.bandwidth() / 2)) .attr('y', d =&gt; yAxisScale(d)) .text(d =&gt; d) .attr(\"font-family\", \"sans-serif\") .attr(\"font-size\", \"11px\") .attr(\"fill\", \"black\") .attr(\"text-anchor\", \"middle\") .attr(\"display\", \"none\"); function onMouseOut(d,i)&#123; d3.select(this) .transition() .duration(400) .style(\"fill\", \"orange\"); d3.select('.val') .selectAll(\"text\").filter((d,index) =&gt; index === i) .attr(\"display\", \"none\"); &#125; function onMouseOver(d,i)&#123; d3.select(this) .transition() .duration(400) .style(\"fill\", \"red\"); d3.select('.val') .selectAll(\"text\").filter((d,index) =&gt; index === i) .attr(\"display\", \"block\"); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"d3","slug":"frontend/d3","permalink":"http://flamingotiger.github.io/categories/frontend/d3/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://flamingotiger.github.io/tags/javascript/"},{"name":"d3","slug":"d3","permalink":"http://flamingotiger.github.io/tags/d3/"},{"name":"bar","slug":"bar","permalink":"http://flamingotiger.github.io/tags/bar/"}]},{"title":"D3 기본 알아보기","slug":"frontend/d3/d3-use-html","date":"2020-06-23T06:53:57.000Z","updated":"2021-04-30T03:36:18.276Z","comments":true,"path":"frontend/d3/d3-use-html/","link":"","permalink":"http://flamingotiger.github.io/frontend/d3/d3-use-html/","excerpt":"","text":"시작하기웹에서 차트를 그리기 위해서는 다양한 방법이있습니다. chartjs, vxchart 등 라이브러리가 많습니다. 그중에 기본이 되는 d3을 얕게 한번 알아보겠습니다. 선택기1document.querySelectorAll(\"pre, code\"); 일반적으로 자바스크립트에서 엘리먼트다수를 선택할때 사용하는 방법입니다. 1d3.selectAll(\"pre, code\"); d3에서 선택할때 사용하는 방법입니다.선택값은 배열입니다. 스타일 속성주기selectAll에 선택된 모든 엘리먼트에 속성이나 스타일을 줄 수 있습니다. 12var circles = d3.selectAll(\"circle\");circles.attr(\"cx\", 20).attr(\"cy\", 20).attr(\"r\", 20).style(\"fill\", \"red\"); 메소드 체이닝을 통해서 간단하게 스타일을 줄 수 있습니다. 요소 추가하기append 메소드를 이용하면 새요소를 추가할 수 있습니다. 12345678var body = d3.select(\"body\");var h1 = body.append(\"h1\");h1.text(\"Hello h1!!\");// section 각 태그들 내부에 h1을 추가합니다.var section = d3.selectAll(\"section\");var h1 = section.append(\"h1\");h1.text(\"Hello section h1!\"); 1234d3.selectAll(\"section\").style(\"backgroundColor\", \"red\");.append(\"h1\");text(\"Hello section h1!\"); style메소드까지는 대상이 section이었습니다.append메소드를 사용하면 새로운 h1을 대상으로 지정합니다. 데이터 입력1234567891011121314151617181920var svg = d3.select(\"svg\");var data = [ &#123; x: 110.0, y: 129.14 &#125;, &#123; x: 58.0, y: 118.14 &#125;, &#123; x: 113.0, y: 88.24 &#125;, &#123; x: 91.0, y: 118.07 &#125;, &#123; x: 181.0, y: 60.26 &#125;,];var circle = svg.selectAll(\"circle\").data(data);circle .enter() .append(\"circle\") .attr(\"cx\", function (data) &#123; return data.x; &#125;) .attr(\"cy\", function (data) &#123; return data.y; &#125;) .attr(\"r\", 10) .style(\"fill\", \"red\"); 데이터 객체 배열 data를 svg내부의 circle을 선택해서 enter로 넣습니다.만약 없다면 데이터 수만큼 생성됩니다.append로 내부에 circle을 추가합니다. 속성으로 데이터 값의 x, y를 사용합니다. 기존에 요소가 없는 새로운데이터를 입력시123456789101112var circle = svg .selectAll(\"circle\") .data(data) .enter() .append(\"circle\") .attr(\"cx\", function (data) &#123; return data.x; &#125;) .attr(\"cy\", function (data) &#123; return data.y; &#125;) .attr(\"r\", 2.5); 기존 요소에 결합한 새 데이터12345678910var circle = svg .selectAll(\"circle\") .data(data) .attr(\"cx\", function (data) &#123; return data.x; &#125;) .attr(\"cy\", function (data) &#123; return data.y; &#125;) .attr(\"r\", 2.5); 키 기능join을 제어할 수 있습니다.기본적으로 join은 index입니다. 12345678910111213141516171819202122232425var svg = d3.select(\"svg\");var data = [ &#123; name: \"Alice\", x: 110.0, y: 129.14 &#125;, &#123; name: \"Bob\", x: 58.0, y: 118.14 &#125;, &#123; name: \"Carol\", x: 113.0, y: 88.24 &#125;, &#123; name: \"Dave\", x: 91.0, y: 118.07 &#125;, &#123; name: \"Edith\", x: 181.0, y: 60.26 &#125;,];function key(d) &#123; return d.name;&#125;var circle = svg .selectAll(\"circle\") .data(data, key) .enter() .append(\"circle\") .attr(\"cx\", function (data) &#123; console.log(data); return data.x; &#125;) .attr(\"cy\", function (data) &#123; return data.y; &#125;) .attr(\"r\", 10) .style(\"fill\", \"red\"); 키 함수는 각 데이터에 대해 고유 한 문자열을 반환합니다.자세한 사항은 Thinking with joins에서 확인할 수 있습니다. 데이터 로딩stock.json12345678910[ &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"Jan 2000\", \"price\": 1394.46 &#125;, &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"Feb 2000\", \"price\": 1366.42 &#125;, &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"Mar 2000\", \"price\": 1498.58 &#125;, &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"Apr 2000\", \"price\": 1452.43 &#125;, &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"May 2000\", \"price\": 1420.6 &#125;, &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"Jun 2000\", \"price\": 1454.6 &#125;, &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"Jul 2000\", \"price\": 1430.83 &#125;, &#123; \"symbol\": \"S&amp;P 500\", \"date\": \"Aug 2000\", \"price\": 1517.68 &#125;] 123456var format = d3.time.format(\"%b %Y\");d3.json(\"./stocks.json\", function (stocks) &#123; stocks.forEach(function (d) &#123; d.date = format.parse(d.date); &#125;);&#125;); 날짜구문을 분석해서 변환해야 합니다. Scales과 Axes속성 및 스타일은 위치와 모양을 제어한다.scale은 데이터 공간에서 시각적인 공간으로 매핑되는 함수이다. 123var x = d3.scaleLinear().domain([10, 20]).range([0, 700]);x(16); // 240 위의 코드를 보자면 선형 스케일은 단순히 변환합니다.스케일의 도메인은 예상되는 데이터 값(예시로 10 ~ 20)이며 원하는 출력값입니다.0은 차트 왼쪽이고 700은 찬트의 오른쪽입니다. d3.scaleSqrtd3.scaleLogsqrt (또는 pow) 스케일은 지수 변환을 적용합니다.log 스케일은 로그 변환을 적용합니다. Domains과 Ranges123var x = d3.scaleLinear() .domain([0, d3.max(numbers)]) .range([0, 700]); d3.min 과 d3.max도메인을 계산합니다. 12345678var x = d3.scaleLog().domain(d3.extent(numbers)).range([0, 700]);function value(d) &#123; return d.value;&#125;var x = d3.scaleLog() .domain(d3.extent(objects, value)) // 원하는 경우 array.map을 사용할 수 있습니다. .range([0, 720]); d3.extent는 최소값과 최대값을 동시에 계산합니다. Interpolators12345var x = d3.scaleLinear().domain([12, 24]).range([\"steelblue\", \"brown\"]);x(16); // #666586var x = d3.scaleLinear().domain([12, 24]).range([\"0px\", \"720px\"]);x(16); // 240px RGB 보간을 위해 색상이 자동으로 감지됩니다.문자열 보간은 포함 된 숫자와 일치합니다. 매우 유연합니다. 123456var x = d3.scaleLinear() .domain([12, 24]) .range([\"steelblue\", \"brown\"]) .interpolate(d3.interpolateHsl);x(16); // #3cb05f 원하는 경우 보간기를 명시 적으로 설정할 수 있습니다. Ordinal Scales123456var x = d3.scaleOrdinal() .domain([\"A\", \"B\", \"C\", \"D\"]) .rangeRoundBands([0, 720], 0.2);x(\"B\"); // 206, bar positionx.rangeBand(); // 137, bar width 여기서 scale은 막대의 왼쪽 위치를 반환하는 반면 rangeBand 메서드는 막대 너비를 반환합니다. rangeBands (여기서 .2)에 대한 두 번째 인수는 막대 사이에 예약 할 패딩의 양입니다. rangeRoundBands 메서드는 앤티 앨리어싱이 모호해지지 않도록 전체 픽셀로 반올림한다는 점을 제외하고 rangeBands와 동일합니다. Axes12// var yAxis = d3.svg.axis().scale(y).orient(\"left\");var yAxis = d3.axisLeft().scale(y); 주어진 스케일에 대한 축을 생성하고 원하는대로 구성합니다. 1svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis); 선택을 호출하여 축을 렌더링합니다. Ticks사람이 읽을 수있도록 값에 대해 정량적 척도를 작성 할 수 ​​있습니다. 12var x = d3.scaleLinear().domain([12, 24]).range([0, 700]);x.ticks(5); // [12, 14, 16, 18, 20, 22, 24] Svg 좌표transforms를 이용해서 origin의 위치를 정의할 수 있다. 123456789var svg = d3 .select(\"body\") .append(\"svg\") .attr(\"width\", outerWidth) .attr(\"height\", outerHeight);var g = svg .append(\"g\") .attr(\"transform\", \"translate(\" + marginLeft + \",\" + marginTop + \")\"); Svg 기본svg에서 사용하는 요소들 입니다. 12345&lt;rect x=\"0\" y=\"0\" width=\"0\" height=\"0\" rx=\"0\" ry=\"0\"&gt; // 사각형&lt;circle cx=\"0\" cy=\"0\" r=\"0\"&gt; // 원&lt;line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\"&gt; // 선&lt;text x=\"0\" y=\"0\" dx=\"0\" dy=\"0\" text-anchor=\"start\"&gt; // 텍스트 본문&lt;path d=\"M152.64962091501462,320.5600780855698L133.88913955606318,325.4363177123538L134.96890954443046,330.37917634921996L131.19348249532786,331.158393614812L98.56681109628815,335.53933807857004L91.14450799488135,333.796620...\"&gt; // 경로 path에서는 다른 숫자로된 언어가 필요합니다. Path Generatord3.linex와 y로 경로를 정의할 수 있습니다. 123456789101112var x = d3.scaleLinear(), y = d3.scaleLinear();var line = d3.line() .x(function (d) &#123; return x(d.x); &#125;) .y(function (d) &#123; return y(d.y); &#125;);svg.append(\"path\").datum(objects).attr(\"class\", \"line\").attr(\"d\", line); 데이터 접근 자로 스케일을 구성하여 위치를 정의합니다.데이터를 직접 라인 생성기로 전달하거나 selection.attr을 통해 전달해야 합니다. d3.svg.areax, y0 및 y1로 경로를 정의할 수 있습니다. 123456789101112var x = d3.scaleLinear(), y = d3.scaleLinear();var area = d3.svg .area() .x(function (d) &#123; return x(d.x); &#125;) .y0(height) .y1(function (d) &#123; return y(d.y); &#125;); 스택되지 않은 영역 차트의 경우 y0는 일정합니다. Radial Areas &amp; Linesd3.arc파이 및 도넛형 차트의 경로생성기입니다. 1234567var myArc = &#123; innerRadius: 0, outerRadius: 360, startAngle: 0, // 12 o'clock endAngle: 1.2, // radians&#125;;var arc = d3.arc().innerRadius(0).outerRadius(360); 기본적으로 호 관련 속성이있는 객체를 입력으로 사용합니다. d3.pie12// pie의 기본레이아웃var pie = d3.pie(); d3.pie를 사용하여 데이터에서 시작 및 끝 각도를 계산할 수 있습니다.. Layouts12345678910111213141516171819202122232425262728293031323334d3.treemap;d3.tree;d3.pack;d3.partition;d3.force;d3.bundle;d3.voronoi;d3.chord;var treemap = d3.treemap().padding(4).size([width, height]);function x(d) &#123; return d.x;&#125;function y(d) &#123; return d.y;&#125;function dx(d) &#123; return d.dx;&#125;function dy(d) &#123; return d.dy;&#125;svg .selectAll(\".cell\") .data(treemap.nodes(root)) .enter() .append(\"rect\") .attr(\"class\", \"cell\") .attr(\"x\", x) .attr(\"y\", y) .attr(\"width\", dx) .attr(\"height\", dy); 계층적 레이아웃은 데이터의 공유 표현을 사용합니다. 12var parent = &#123;\"children\": […]&#125;, child = &#123;\"value\": …&#125;; 마지막으로d3 기본이 다져진다면 아무리 어려운 그래프라도 처음에는 어렵겠지만, 차근차근 하다보면 충분히 만들수 있습니다.D3.js 창시자인 엠보스톡의 워크샵을 참고했습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"d3","slug":"frontend/d3","permalink":"http://flamingotiger.github.io/categories/frontend/d3/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://flamingotiger.github.io/tags/javascript/"},{"name":"d3","slug":"d3","permalink":"http://flamingotiger.github.io/tags/d3/"}]},{"title":"Docker를 이용해서 mysql 설치하기","slug":"backend/db/docker-mysql-install","date":"2020-06-23T04:47:16.000Z","updated":"2021-04-30T03:36:18.269Z","comments":true,"path":"backend/db/docker-mysql-install/","link":"","permalink":"http://flamingotiger.github.io/backend/db/docker-mysql-install/","excerpt":"","text":"시작하기docker hub에서 간편하게 mysql을 설치할 수 있습니다.Mysql docker hub 홈페이지기본적으로 docker가 설치 되어있어야합니다. 설치하기터미널에서 다음 명령어를 입력하여 이미지를 내려받습니다. 1docker pull mysql 빠르게 mysql 설치가 완료됩니다. 1docker run --name mysql -p 3306:3306 -d mysql –name옵션을 사용해서 이름을 mysql로 지정합니다.-p옵션을 사용해서 3306포트로 연결합니다.-d옵션을 사용해서 백그라운드로 mysql을 실행합니다. workbench 설치 및 설정하기mysql workbench 홈페이지로 접속해서 설치해주도록합니다. 설치가 완료되었으면 workbench를 실행해서 mysql connections의 +버튼을 눌러 하나의 커넥션을 추가해줍니다. 이것으로 docker로 mysql 설치 및 설정을 해보았습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"db","slug":"backend/db","permalink":"http://flamingotiger.github.io/categories/backend/db/"}],"tags":[{"name":"node","slug":"node","permalink":"http://flamingotiger.github.io/tags/node/"},{"name":"mysql","slug":"mysql","permalink":"http://flamingotiger.github.io/tags/mysql/"}]},{"title":"Deepcopy Shallowcopy 차이 알아보기","slug":"javascript/deepcopy-shallowcopy","date":"2020-06-22T04:08:07.000Z","updated":"2021-04-30T03:36:18.281Z","comments":true,"path":"javascript/deepcopy-shallowcopy/","link":"","permalink":"http://flamingotiger.github.io/javascript/deepcopy-shallowcopy/","excerpt":"","text":"시작하기객체를 두번이상 사용할때 원하지 않았는데 원본의 객체가 수정되는 경우가 있습니다.자바스크립트 객체를 안전하게 복사하는 방법을 알아보겠습니다. 기본데이터 저장12345let a = \"Javascript\";let b = a; // b에 a를 할당b = \"Typescript\";console.log(b); // \"Typescript\"console.log(a); // \"Javascript\" b에 a를 할당하면 복사본이 생성됩니다. 이 새로운 값에 값을 변경하면 b는 변경되지만 a는 변경되지 않습니다. 복합데이터 저장가장 문제가 되는 복합데이터입니다. Object, Array가 이에 해당됩니다. 변수를 할당하면 해당 값에 대한 참조 포인터가 생성됩니다. 123456789const a = &#123; name: \"flamingo\", age: 27, email: \"email@gmail.com\",&#125;;let b = a;b.name = \"tiger\";console.log(b.name); // tigerconsole.log(a.name); // flamingo b의 이름만 바꾸었을뿐인데 a의 이름도 같이 바뀌었습니다. 이런 변수가 변경된 값이 아닌 원래 값을 가지고 있기를 기대하고 있어서 문제가 발생합니다. 객체와 배열을 올바르게 복사하는 방법을 알아보겠습니다. ShallowcopyObject.assign (ES5)ES5에서는 Object.assign()을 통해서 복사할 수 있습니다. 12345678const a = &#123; name: \"flamingo\", age: 27,&#125;;let b = Object.assign(&#123;&#125;, a);b.name = \"tiger\";console.log(b); // tigerconsole.log(a); // flamingo Spread (ES6)ES6에서는 spread로 복사를 할 수 있습니다. 12345678const a = &#123; name: \"flamingo\", age: 27,&#125;;let b = &#123; ...a &#125;;b.name = \"tiger\";console.log(b); // tigerconsole.log(a); // flamingo 이렇게만 하면 간단하겠지만 문제가 있습니다.객체 내부에 중첩된 객체가 있을경우 입니다. 123456789101112131415161718192021222324252627282930313233const a = &#123; a1: &#123; name: \"a1\", a2: &#123; name: \"a2\" &#125; &#125;&#125;;let b = &#123; ...a &#125;;b.a1.name = \"b1\";b.a1.a2.name = \"b2\";console.log(b);/*&#123; a1: &#123; name: \"b1\", a2: &#123; name: \"b2\" &#125; &#125;&#125;*/console.log(a);/*&#123; a1: &#123; name: \"b1\", a2: &#123; name: \"b2\" &#125; &#125;&#125;*/ b에서만 바꾸고 싶지만 a에서도 같이 바뀌는것을 확인할 수 있습니다.해결하기 위한방법으로 수동으로 복사를 하거나 deepcopy를 이용하면 됩니다. 수동복사위에서 사용한 예시를 이용해서 수동으로 복사해보겠습니다. 123456789101112131415161718192021222324252627282930313233const a = &#123; a1: &#123; name: \"a1\", a2: &#123; name: \"a2\" &#125; &#125;&#125;;let b = &#123; ...a, a1: &#123; ...a.a1, a2: &#123; ...a.a1.a2 &#125;&#125; &#125;;b.a1.name = \"b1\";b.a1.a2.name = \"b2\";console.log(b);/*&#123; a1: &#123; name: \"b1\", a2: &#123; name: \"b2\" &#125; &#125;&#125;*/console.log(a);/*&#123; a1: &#123; name: \"a1\", a2: &#123; name: \"a2\" &#125; &#125;&#125;*/ 각자 제대로 복사된 것을 확인할 수 있습니다. Deepcopy123456789101112131415161718192021222324252627282930313233const a = &#123; a1: &#123; name: \"a1\", a2: &#123; name: \"a2\" &#125; &#125;&#125;;let b = JSON.parse(JSON.stringify(a));b.a1.name = \"b1\";b.a1.a2.name = \"b2\";console.log(b);/*&#123; a1: &#123; name: \"b1\", a2: &#123; name: \"b2\" &#125; &#125;&#125;*/console.log(a);/*&#123; a1: &#123; name: \"a1\", a2: &#123; name: \"a2\" &#125; &#125;&#125;*/ 참조를 끊어주는 방법으로 간단하게 복사하였습니다. 하지만 이 방법에도 문제가 있습니다.객체 내부에 함수가 있다면 그 함수 값은 복사하지 않는다는 것입니다. 손쉬운 copy방법lodash라이브러리를 이용하면 손쉽게 deepcopy를 할 수 있습니다. 1npm install lodash 1234const objects = [&#123; 'a': 1 &#125;, &#123; 'b': 2 &#125;]; const deep = _.cloneDeep(objects);console.log(deep[0] === objects[0]); 이것으로 여러가지의 복사방법을 알아보았습니다.","categories":[{"name":"Js / Ts","slug":"Js-Ts","permalink":"http://flamingotiger.github.io/categories/Js-Ts/"},{"name":"javascript","slug":"Js-Ts/javascript","permalink":"http://flamingotiger.github.io/categories/Js-Ts/javascript/"}],"tags":[]},{"title":"Node 절대경로 설정하기","slug":"backend/node/node-absolute-path","date":"2020-05-26T08:03:23.000Z","updated":"2021-04-30T03:36:18.270Z","comments":true,"path":"backend/node/node-absolute-path/","link":"","permalink":"http://flamingotiger.github.io/backend/node/node-absolute-path/","excerpt":"","text":"시작하기node와 typescript사용환경에서 절대경로 설정을 해보도록 하겠습니다.절대경로로 설정하는 방법은 두가지가 있습니다. 설정하기설정방법은 nodemon 으로 설정하는 방법과 ts-node-dev로 설정하는 방법이 있습니다. 공통적으로 tsconfig.json을 수정해줍니다. tsconfig.json12345&#123; //... \"baseUrl\": \"src\" //...&#125; nodemonts-node-dev를 설치 해줍니다. 1npm install -D nodemon nodemon.json 파일을 생성합니다. nodemon.json123456&#123; \"ignore\": [\"node_modules\"], \"watch\": [\"src\"], \"exec\": \"ts-node ./src/index.ts\", \"ext\": \"ts\"&#125; 이후 package.json파일을 수정합니다. package.json1234567&#123;//... \"scripts\": &#123;//... \"dev\": \"NODE_PATH=./src nodemon\",//...&#125; nodemon 설정이 완료되었습니다. ts-node-devts-node-dev를 설치 해줍니다. 1npm install -D ts-node-dev package.json파일을 수정합니다. package.json1234567&#123;//... \"scripts\": &#123;//... \"dev\": \"ts-node-dev src/index.ts\",//...&#125; ts-node-dev 설정이 완료되었습니다. 최종사용하실때에는 다음과 같이 사용하면 됩니다. src/index.ts123import express from \"express\";import &#123; port &#125; from \"src/config\"; // 절대경로//... 두가지 방법으로 알아 보았습니다.사용하기 더 쉬운방법으로 사용하면됩니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"node","slug":"backend/node","permalink":"http://flamingotiger.github.io/categories/backend/node/"}],"tags":[{"name":"path","slug":"path","permalink":"http://flamingotiger.github.io/tags/path/"},{"name":"node","slug":"node","permalink":"http://flamingotiger.github.io/tags/node/"},{"name":"method","slug":"method","permalink":"http://flamingotiger.github.io/tags/method/"},{"name":"absolute","slug":"absolute","permalink":"http://flamingotiger.github.io/tags/absolute/"}]},{"title":".gitignore 적용안되는 이슈 해결방법","slug":"etc/etc/git-ignore","date":"2020-05-26T07:23:11.000Z","updated":"2021-04-30T03:36:18.271Z","comments":true,"path":"etc/etc/git-ignore/","link":"","permalink":"http://flamingotiger.github.io/etc/etc/git-ignore/","excerpt":"","text":"시작하기gitignore을 사용하지 않고 파일을 업로드 했는데 모르고, node_modules 폴더도 같이 업로드 했을때.황급하게 .gitignore파일에 node_modules을 입력하고 올려도 적용이 안되는 이슈가 있습니다.git의 캐시 문제이기 때문에 캐시를 지워주고 다시 파일을 업로드 해주면 됩니다. 123git rm -r --cached .git add .git commit -m \"Remove node_modules\" 다음과 같이 커맨드를 입력해주면 정상적으로 작동합니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"etc","slug":"etc/etc","permalink":"http://flamingotiger.github.io/categories/etc/etc/"}],"tags":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/tags/etc/"},{"name":"git","slug":"git","permalink":"http://flamingotiger.github.io/tags/git/"},{"name":"terminal","slug":"terminal","permalink":"http://flamingotiger.github.io/tags/terminal/"}]},{"title":"Gatsby에 typescript 적용하기","slug":"frontend/react/gatsby-typescript","date":"2020-05-26T06:20:19.000Z","updated":"2021-04-30T03:36:18.278Z","comments":true,"path":"frontend/react/gatsby-typescript/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/gatsby-typescript/","excerpt":"","text":"시작하기Gatsby는 React에 기반한 무료 오픈 소스 프레임 워크로 개발자가 정적 웹 사이트를 구축 할 수 있습니다. 설치하기Gatsby CLI 설치 1npm install -g gatsby-cli 프로젝트 생성 1gatsby new gatsby-project 프로젝트로 이동 1cd gatsby-project 개발 서버 시작 1gatsby develop 타입스크립트 추가하기12npm i -D typescriptnpm i gatsby-plugin-typescript 타입스크립트와 gatsby 타입스크립트 플러그인을 설치합니다. gatsby-config.js1234567//...plugins: [ //... `gatsby-plugin-typescript`, //...]//... 플러그인을 설정파일에 추가합니다. tsconfig.json 파일을 생성합니다. tsconfig.json12345678910111213141516&#123; \"compilerOptions\": &#123; \"module\": \"commonjs\", \"target\": \"esnext\", \"jsx\": \"preserve\", \"lib\": [\"dom\", \"esnext\"], \"baseUrl\": \".\", \"strict\": true, \"noEmit\": true, \"isolatedModules\": true, \"esModuleInterop\": true, \"noUnusedLocals\": false, \"allowJs\": true &#125;, \"exclude\": [\"node_modules\", \"public\", \".cache\"]&#125; 이후 js확장자를 tsx로 사용하면 됩니다. 추가) sass/scss사용node-sass와 gatsby-plugin-sass를 설치합니다. 1npm i -D node-sass gatsby-plugin-sass 타입스크립트와 같이 플러그인을 추가합니다. gatsby-config.js1234567//...plugins: [ //... `gatsby-plugin-sass`, //...]//...","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"gatsby","slug":"gatsby","permalink":"http://flamingotiger.github.io/tags/gatsby/"},{"name":"scss","slug":"scss","permalink":"http://flamingotiger.github.io/tags/scss/"}]},{"title":"React 상태 관리 라이브러리 Recoil-js 사용해보기","slug":"frontend/recoil/react-recoil-js","date":"2020-05-17T05:42:52.000Z","updated":"2021-04-30T03:36:18.280Z","comments":true,"path":"frontend/recoil/react-recoil-js/","link":"","permalink":"http://flamingotiger.github.io/frontend/recoil/react-recoil-js/","excerpt":"","text":"시작하기리액트 유럽에서 리액트의 새로운 상태관리 라이브러리 recoil을 발표했습니다.기존에 사용하던 redux 라이브러리와 어떤차이가 있는지 사용해보도록 하겠습니다.Recoil js홈페이지에서 자세한 내용을 확인 할 수 있습니다.Recoil 소개 유투브 설치하기1npx create-react-app my-app 프로젝트를 생성합니다. 1npm install recoil recoil을 설치합니다. 설정Redux에서 최상단에 provider를 사용해주는 것과 같이 최상단에 RecoilRoot를 설정해주어야합니다. index.js1234567891011121314151617181920import React from \"react\";import ReactDOM from \"react-dom\";import \"./index.css\";import App from \"./App\";import * as serviceWorker from \"./serviceWorker\";import &#123; RecoilRoot &#125; from \"recoil\";ReactDOM.render( &lt;React.StrictMode&gt; &lt;RecoilRoot&gt; &lt;App /&gt; &lt;/RecoilRoot&gt; &lt;/React.StrictMode&gt;, document.getElementById(\"root\"));// If you want your app to work offline and load faster, you can change// unregister() to register() below. Note this comes with some pitfalls.// Learn more about service workers: https://bit.ly/CRA-PWAserviceWorker.unregister(); RecoilRoot : 프로젝트의 최상단에 설정해주어야 내부에서 recoil을 사용할 수 있습니다. atom: key와 value를 설정해줍니다. 기본 state입니다. selector: reducer와 흡사합니다. selector에서 atom의 값을 가져오고, switch문으로 매개변수의 해당부분을 찾아, 값을 변형시켜 반환할 수 있습니다. useRecoilState: useState와 흡사하게 [value, setValue]형식으로 setValue로 값을 변경 할 수 있습니다. useRecoilValue: 오로지 recoil의 값만 가져오고 싶으면 사용합니다. 사용하기Counter예시를 만들어 보도록 하겠습니다. src/Counter.js1234567891011import React from \"react\";export default () =&gt; &#123; return ( &lt;div&gt; &lt;p&gt;Counter Component State : 0&lt;/p&gt; &lt;button type=\"button\"&gt;+&lt;/button&gt; &lt;button type=\"button\"&gt;-&lt;/button&gt; &lt;/div&gt; );&#125;; src/App.js12345678910111213import React from \"react\";import Counter from \"./Counter\";function App() &#123; return ( &lt;&gt; &lt;p&gt;App Count State: 0&lt;/p&gt; &lt;Counter /&gt; &lt;/&gt; );&#125;export default App; 컴포넌트를 추가합니다. src/atoms.js123456import &#123; atom &#125; from \"recoil\";export const CountState = atom(&#123; key: \"CountState\", default: 0,&#125;); count의 state값을 설정합니다. 사용하기src/Counter.js123456789101112131415161718192021222324import React from \"react\";import &#123; useRecoilState &#125; from \"recoil\";import &#123; CountState &#125; from \"./atoms\";export default () =&gt; &#123; const [count, setCount] = useRecoilState(CountState); return ( &lt;div&gt; &lt;p&gt;Counter Component State : &#123;count&#125;&lt;/p&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; setCount((prevState) =&gt; prevState + 1)&#125; &gt; + &lt;/button&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; setCount((prevState) =&gt; prevState - 1)&#125; &gt; - &lt;/button&gt; &lt;/div&gt; );&#125;; src/App.js12345678910111213141516import React from \"react\";import Counter from \"./Counter\";import &#123; useRecoilValue &#125; from \"recoil\";import &#123; CountState &#125; from \"./atoms\";function App() &#123; const count = useRecoilValue(CountState); return ( &lt;&gt; &lt;p&gt;App Count State: &#123;count&#125;&lt;/p&gt; &lt;Counter /&gt; &lt;/&gt; );&#125;export default App; 실행을 해보면 다음과 같이 작동이 잘 되는것을 확인할 수 있습니다. Selector 사용하기selector를 통해서 카운터가 증가인 상태인지 감소한 상태인지를 나타내는 라벨을 설정해보겠습니다. src/atoms.js123456789101112131415161718192021222324252627import &#123; atom, selector &#125; from \"recoil\";export const CountState = atom(&#123; key: \"CountState\", default: 0,&#125;);export const CountTypeState = atom(&#123; key: \"CountTypeState\", default: \"normal\",&#125;);export const CountLabelState = selector(&#123; key: \"CountLabelState\", get: (&#123; get &#125;) =&gt; &#123; const count = get(CountState); const countType = get(CountTypeState); switch (countType) &#123; case \"increment\": return `증가 =&gt; $&#123;count&#125;`; case \"decrement\": return `감소 =&gt; $&#123;count&#125;`; default: return `$&#123;count&#125;`; &#125; &#125;,&#125;); 현재 카운터의 상태를 나타낼 CountTypeState 값,CountTypeState값 변경에 따라 CountLabelState 다른값을 반환합니다. src/Counter.js1234567891011121314151617181920212223242526272829303132import React from \"react\";import &#123; useRecoilState, useRecoilValue &#125; from \"recoil\";import &#123; CountState, CountTypeState, CountLabelState &#125; from \"./atoms\";export default () =&gt; &#123; const [, setCount] = useRecoilState(CountState); const [, setCountType] = useRecoilState(CountTypeState); const countLabel = useRecoilValue(CountLabelState); return ( &lt;div&gt; &lt;p&gt;Counter Component State : &#123;countLabel&#125;&lt;/p&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; &#123; setCountType(\"increment\"); setCount((prevState) =&gt; prevState + 1); &#125;&#125; &gt; + &lt;/button&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; &#123; setCountType(\"decrement\"); setCount((prevState) =&gt; prevState - 1); &#125;&#125; &gt; - &lt;/button&gt; &lt;/div&gt; );&#125;; setCount로 카운터의 값을 변경하고, setCountType으로 지금 값이 increment인지 decrement인지 값을 저장합니다.이후 selector를 통해 countLabel로 값이 나타납니다. src/App.js12345678910111213141516import React from 'react';import Counter from './Counter';import &#123; useRecoilValue &#125; from 'recoil';import &#123; CountLabelState &#125; from './atoms';function App() &#123; const countLabel = useRecoilValue(CountLabelState); return ( &lt;&gt; &lt;p&gt;App Count State: &#123;countLabel&#125;&lt;/p&gt; &lt;Counter /&gt; &lt;/&gt; );&#125;export default App; Recoil을 사용해보았는데 정말 만족스럽습니다.redux의 경우 action reducers를 설정하고 combineReducers로 합쳐주고 사용할때는 dispatch를 통해서 사용을 하는 방식의 많이 복잡한 과정이 필요한데, recoil의 경우에는 hooks에 최적화되고 더욱 단순해진 것 같습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"recoil","slug":"frontend/recoil","permalink":"http://flamingotiger.github.io/categories/frontend/recoil/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"recoil","slug":"recoil","permalink":"http://flamingotiger.github.io/tags/recoil/"},{"name":"recoiljs","slug":"recoiljs","permalink":"http://flamingotiger.github.io/tags/recoiljs/"},{"name":"recoil-js","slug":"recoil-js","permalink":"http://flamingotiger.github.io/tags/recoil-js/"}]},{"title":"Git 명령어 단축해보기","slug":"etc/etc/git-shortcut","date":"2020-05-12T04:29:50.000Z","updated":"2021-04-30T03:36:18.271Z","comments":true,"path":"etc/etc/git-shortcut/","link":"","permalink":"http://flamingotiger.github.io/etc/etc/git-shortcut/","excerpt":"","text":"시작하기터미널과 쉘을 이용해서 간단한 단축어를 만들어 보겠습니다. 쉘 스크립트git add . &amp;&amp; git commit -m “텍스트 입력” 하는 과정이 입력하기 너무 길기에 단축을 해보았습니다.프로젝트 내부에 git.sh파일을 생성합니다. git.sh123456#!/bin/bashecho Easy Github push generatorecho Enter Commit Title:read commitgit add . &amp;&amp; git commit -m \"$commit\" 그리고 package.json 파일의 scripts부분에 추가합니다. package.json123456//... \"scripts\": &#123; //... \"git\": \"bash ./git.sh\", &#125;//... 이제 npm run git을 실행하면 커밋의 이름을 입력할 수 있습니다. 터미널 단축어npm run git로 단축이 되었지만 좀더 단축을 하고 싶어졌습니다.또한, 다른 명령어 예) git status도 단축으로 사용하고 싶어졌습니다.단축어를 생성해보겠습니다. 사용법은 간단합니다. open ~/.zshrc 맨 하단에 alias 변수명=&#39;실제 입력될 값&#39;형식으로 등록합니다.그리고 저장합니다. 123alias gc='npm run git'alias gs='git status'alias gp='git push' 다음과 같이 등록을 시켜놓습니다. 실제로 사용할시 터미널에서gs만 입력을 해도 git status가 입력되는 것과 같은 효과를 가지게 됩니다.gc로 커밋을 남기고 gp로 push를 할 수 있습니다. 깃뿐만아니라 docker등 터미널로 사용하는 것을 단축어로 등록할 수 있습니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"etc","slug":"etc/etc","permalink":"http://flamingotiger.github.io/categories/etc/etc/"}],"tags":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/tags/etc/"},{"name":"git","slug":"git","permalink":"http://flamingotiger.github.io/tags/git/"},{"name":"terminal","slug":"terminal","permalink":"http://flamingotiger.github.io/tags/terminal/"}]},{"title":"React Next js에서 카카오맵 사용하기","slug":"frontend/react/react-kakao-map","date":"2020-05-08T07:35:30.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-kakao-map/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-kakao-map/","excerpt":"","text":"시작하기지도를 표시해주는 어플리케이션을 만들기 위해서는 맵이 필요한데 많은 api중에 카카오 맵 오픈소스api를 사용해보도록 하겠습니다. 개발자계정 로그인카카오맵 개발자 사이트에 접속해서 로그인을 해줍니다. 로그인후 내 어플리케이션을 선택합니다. 어플리케이션을 추가해주도록합니다. 추가한 어플리케이션을 선택하면 대시보드가 나옵니다. 좌측의 플랫폼을 선택합니다. 하단에 web 플랫폼을 등록합니다.url을 입력할시 다음과 같은 방법으로 입력합니다.끝에 /를 붙이지 않고 엔터로 다음줄에 여러 개의 url을 입력할수 있습니다. 예시) 12http://localhost:3000http://localhost 이것으로 기본준비는 완료되었습니다. next js에 적용하기kakaomap을 사용하기 위해서는 앱키가 필요합니다.대시보드에서 앱키를 선택한이후 JavaScript 키를 복사합니다. pages/_document.tsx1234567891011121314151617181920//... importexport default class MyDocument extends Document&lt;Props&gt; &#123; //... render() &#123; const kakaoKey = \"복사한 API키 붙여넣기\"; return ( &lt;html lang=\"ko\"&gt; &lt;Head&gt; &lt;script type=\"text/javascript\" src=&#123;`//dapi.kakao.com/v2/maps/sdk.js?appkey=$&#123;kakaoKey&#125;&amp;libraries=services`&#125; /&gt; //... head 코드 &lt;/Head&gt; &lt;body&gt;//... body 코드&lt;/body&gt; &lt;/html&gt; ); &#125;&#125;//... _document.tsx의 Head부분에 script를 추가해주도록 합니다.이제 사용 할 준비가 되었습니다. 두가지 파일을 만들겠습니다. pages/map.tsx - pagesrc/KakaomapComponent.tsx - kakaomap component pages/map.tsx1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import React, &#123; useEffect &#125; from \"react\";import KakaomapComponent from \"src/KakaomapComponent\";const Map: React.FC = () =&gt; &#123; const kakaoMap = React.useRef&lt;HTMLDivElement&gt;(null); useEffect(() =&gt; &#123; if (kakaoMap &amp;&amp; kakaoMap.current) &#123; const x = 126.570667; const y = 33.450701; const coords = new (window as any).daum.maps.LatLng(y, x); // 지도의 중심좌표 const options = &#123; center: coords, level: 2, &#125;; const map = new (window as any).daum.maps.Map(kakaoMap.current, options); const marker = new (window as any).daum.maps.Marker(&#123; position: coords, map, &#125;); // 맵의 중앙으로 이동 map.relayout(); map.setCenter(coords); // 마커를 중앙으로 이동 marker.setPosition(coords); // 일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성합니다 const mapTypeControl = new (window as any).daum.maps.MapTypeControl(); // 지도에 컨트롤을 추가해야 지도위에 표시됩니다 // kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다 map.addControl( mapTypeControl, (window as any).kakao.maps.ControlPosition.TOPRIGHT ); // 지도 확대 축소를 제어할 수 있는 줌 컨트롤을 생성합니다 const zoomControl = new (window as any).daum.maps.ZoomControl(); map.addControl( zoomControl, (window as any).daum.maps.ControlPosition.RIGHT ); &#125; &#125;, [kakaoMap]); return &lt;KakaomapComponent ref=&#123;kakaoMap&#125; /&gt;;&#125;;export default Map; import KakaomapComponent from &#39;src/KakaomapComponent&#39;;절대경로를 사용해주었습니다. next js에서 설정이 안되어 있다면 Nextjs typescript 절대경로 설정하기 포스트를 참고해주세요. src/KakaomapComponent12345678910111213141516import React, &#123; forwardRef, Ref &#125; from \"react\";type KakaomapComponentProps = &#123; ref: Ref&lt;HTMLDivElement&gt;;&#125;;const KakaomapComponent: React.FC&lt;KakaomapComponentProps&gt; = forwardRef( (props, ref) =&gt; &#123; return ( &lt;div style=&#123;&#123; width: \"400px\", height: \"300px\" &#125;&#125;&gt; &lt;div ref=&#123;ref&#125; style=&#123;&#123; width: \"100%\", height: \"100%\" &#125;&#125; /&gt; &lt;/div&gt; ); &#125;);export default KakaomapComponent; kakaomap을 보여줄 영역을 선택하기 위해서 Ref를 사용했습니다 forwardRef에 대해서는 React Ref사용하기 포스트를 참고 해주세요. 결과물 이것으로 카카오맵 오픈소스를 이용해서 지도를 사용해보았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"next","slug":"next","permalink":"http://flamingotiger.github.io/tags/next/"},{"name":"kakaomap","slug":"kakaomap","permalink":"http://flamingotiger.github.io/tags/kakaomap/"}]},{"title":"React Ref사용하기","slug":"frontend/react/react-ref","date":"2020-05-08T01:34:44.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-ref/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-ref/","excerpt":"","text":"시작하기React에서 엘리먼트로 접근해서 사용하기 위해서는 Ref를 사용하는 것을 권장하고 있습니다.input focus, element 사이즈 측정 등에서 이용합니다. 사용법Ref를 사용하는 여러가지 방법이 있습니다. 다양한 방법을 알아보겠습니다. class에서 사용하기class에서 Ref를 사용하는 방법은 12345678910111213141516171819202122232425262728293031import React from \"react\";type Props = &#123;&#125;;type State = &#123;&#125;;class App extends React.Component&lt;Props, State&gt; &#123; private divRef: HTMLDivElement | null = null; constructor(props: Props) &#123; super(props); this.state = &#123;&#125;; this.divRef = null; &#125; componentDidMount() &#123; console.log(this.divRef); &#125; render() &#123; return ( &lt;div ref=&#123;(ref) =&gt; &#123; this.divRef = ref; &#125;&#125; &gt; app &lt;/div&gt; ); &#125;&#125;export default App; 다음과 같은 방법으로 사용하여 콘솔을 찍어보면 &lt;div&gt;app&lt;/div&gt; 값이 도출됩니다. 다른방법으로 createRef를 사용해 보면 또 다른 값이 나옵니다. 1234567891011121314151617181920212223import React, &#123; createRef &#125; from \"react\";type Props = &#123;&#125;;type State = &#123;&#125;;class App extends React.Component&lt;Props, State&gt; &#123; private div: React.RefObject&lt;HTMLDivElement&gt;; constructor(props: Props) &#123; super(props); this.state = &#123;&#125;; this.div = React.createRef(); &#125; componentDidMount() &#123; console.log(this.div); &#125; render() &#123; return &lt;div ref=&#123;this.div&#125;&gt;app&lt;/div&gt;; &#125;&#125;export default App; 결과는 {current: &lt;div&gt;app&lt;/div&gt;}으로 나오게됩니다.ref를 사용할때 this.div.current 방식으로 사용해야 되는 것이죠. hooks에서 사용하기hooks에서는 createRef와 사용법이 같습니다. 1234567891011import React, &#123; useRef, useEffect &#125; from \"react\";const App: React.FC = () =&gt; &#123; const ref = useRef&lt;HTMLDivElement&gt;(null); useEffect(() =&gt; &#123; console.log(ref); &#125;, [ref]); return &lt;div ref=&#123;ref&#125;&gt;app&lt;/div&gt;;&#125;; 결과는 {current: &lt;div&gt;app&lt;/div&gt;}으로 class에서 createRef 값과 같은 값이 나오게됩니다. Props로 Ref넘겨주기리스트를 map메소드를 이용해서 뿌려줄때 뿌려주는대상이 라면 직접 ref를 넣으면 되지만 컴포넌트라면?그럴경우 사용하는 것이 react의 forwardRef입니다. 쉽게 생각해서 ref를 props처럼 넘겨준다고 생각하면 됩니다. 조금전에 만들었던 예시와 작은 컴포넌트 하나를 생성하겠습니다. 123456789101112131415import React, &#123; useRef, useEffect &#125; from \"react\";const App: React.FC = () =&gt; &#123; const ref = useRef&lt;HTMLDivElement&gt;(null); useEffect(() =&gt; &#123; console.log(ref); &#125;, [ref]); return &lt;RefComponent ref=&#123;ref&#125;&gt;app&lt;/RefComponent&gt;;&#125;;const RefComponent: React.FC = (&#123; ref &#125;: Ref&lt;HTMLDivElement&gt;) =&gt; &#123; return &lt;div ref=&#123;ref&#125;&gt;ref&lt;/div&gt;;&#125;; 일반적으로 이렇게 작성을 생각하게 되는데 이럴경우 ref가 제대로 전달이 되지 않습니다.그럼 forwardRef을 사용해보도록 하겠습니다. 123456789101112131415161718import React, &#123; useRef, useEffect, forwardRef &#125; from \"react\";const App: React.FC = () =&gt; &#123; const ref = useRef&lt;HTMLDivElement&gt;(null); useEffect(() =&gt; &#123; console.log(ref); &#125;, [ref]); return &lt;RefComponent ref=&#123;ref&#125;&gt;app&lt;/RefComponent&gt;;&#125;;type Props = &#123; ref: Ref&lt;HTMLDivElement&gt;;&#125;;const RefComponent: React.FC = forwardRef((props, ref) =&gt; &#123; return &lt;div ref=&#123;ref&#125;&gt;ref&lt;/div&gt;;&#125;); 상위 컴포넌트는 변하는것이 없습니다.하위 컴포넌트에 forwardRef()를 한번감싸줍니다.forwardRef의 첫번째 매개변수는 props이고 두번째 변수가 ref입니다. 두번째의 ref를 엘리먼트에 넣어주고 확인을 해보겠습니다.결과값으로 {current: &lt;div&gt;app&lt;/div&gt;}이 나오는 것을 확인할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"ref","slug":"ref","permalink":"http://flamingotiger.github.io/tags/ref/"}]},{"title":"React에서 IntersectionObserver API로 infiniteScroll 구현하기","slug":"frontend/react/intersection-observer-api","date":"2020-04-09T08:34:35.000Z","updated":"2021-04-30T03:36:18.278Z","comments":true,"path":"frontend/react/intersection-observer-api/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/intersection-observer-api/","excerpt":"","text":"시작하기IntersectionObserver API 란?기존에는 infiniteScroll을 구현하려면 Element.getBoundingClientRect(), addEventListener에 scroll, resize등을 사용해야만 했습니다. IntersectionObserver API는 대상 요소와 상위 요소 또는 최상위 문서의 뷰포트 와의 교차에서 변경 사항을 비동기 적으로 관찰하는 방법을 제공합니다. 사용법1234567let options = &#123; root: document.querySelector(\"#scrollArea\"), rootMargin: \"0px\", threshold: 1.0,&#125;;let observer = new IntersectionObserver(callback, options); callback뷰포트와 타겟이 겹쳤을때 실행되는 함수 입니다. 12345678910111213let callback = (entries, observer) =&gt; &#123; entries.forEach((entry) =&gt; &#123; // Each entry describes an intersection change for one observed // target element: // entry.boundingClientRect // entry.intersectionRatio // entry.intersectionRect // entry.isIntersecting // entry.rootBounds // entry.target // entry.time &#125;);&#125;; options뷰포트와 그 범위를 설정해줄수 있습니다. root대상의 가시성을 확인하기위한 뷰포트로 사용되는 요소입니다. 대상의 조상이어야합니다. 지정하지 않거나 if 인 경우 기본적으로 브라우저 뷰포트로 설정됩니다 null. rootMargin뿌리 주위의 여백. CSS margin속성 과 유사한 값을 가질 수 있습니다 10px 20px 30px 40px”( 예 : “ (상단, 우측, 하단, 좌측). 값은 백분율 일 수 있습니다.이 값 세트는 교차점을 계산하기 전에 루트 요소의 경계 상자의 양쪽을 늘리거나 줄 이도록합니다. 모두 0입니다. threshold관찰자의 콜백을 실행해야하는 대상 가시성 비율을 나타내는 단일 숫자 또는 숫자 배열입니다. 가시성이 50 %를 초과하는 시점 만 감지하려는 경우 0.5 값을 사용할 수 있습니다. 가시성이 다른 25 %를 초과 할 때마다 콜백을 실행하려면 배열 [0, 0.25, 0.5, 0.75, 1]을 지정합니다. 기본값은 0입니다 (하나의 픽셀 만 표시되면 콜백이 실행됨을 의미). 1.0 값은 모든 픽셀이 표시 될 때까지 임계 값이 전달 된 것으로 간주되지 않음을 의미합니다. React에서 구현하기기본 jsx, css를 작성해줍니다. App.js12345678910111213141516171819202122232425262728import React, &#123; useState &#125; from \"react\";const App = () =&gt; &#123; const [datas, setData] = useState([ &#123; name: \"기린\", id: 0 &#125;, &#123; name: \"강아지\", id: 1 &#125;, &#123; name: \"토끼\", id: 2 &#125;, &#123; name: \"호랑이\", id: 3 &#125;, &#123; name: \"사자\", id: 4 &#125;, ]); return ( &lt;div className=\"wrapper\"&gt; &lt;section className=\"card-grid\" id=\"target-root\"&gt; &#123;datas.map((animal, index) =&gt; &#123; return ( &lt;div key=&#123;index&#125; className=\"card\"&gt; &lt;p&gt;아이디: &#123;animal.id&#125;&lt;/p&gt; &lt;p&gt;이름:&#123;animal.name&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;)&#125; &lt;/section&gt; &lt;/div&gt; );&#125;;export default App; App.css12345678910111213141516171819202122232425262728293031323334353637.wrapper &#123; display: flex; align-items: center; justify-content: center; height: 100vh;&#125;.card-grid &#123; display: flex; flex-direction: column; align-items: center; width: 100%; height: 350px; border: 1px solid black; overflow: auto;&#125;.card &#123; display: flex; align-items: center; justify-content: center; flex-direction: column; border: 2px solid black; width: 50%; padding: 40px 20px; margin: 20px; font-weight: bold;&#125;.last &#123; background-color: purple; color: white;&#125;p &#123; margin: 5px;&#125; css를 추가합니다. App.js123//...import \"./App.css\";//... 이제 본격적으로 구현해보도록 하겠습니다.인피니티 스크롤은 보이는 부분이 마지막 카드에 도달했을때 새롭게 불러오는 방식입니다.ref를 두가지로 정해줍니다. 1. 뷰포트, 2. 교차할 마지막 카드 App.js1234567891011121314151617181920212223242526272829303132333435import React, &#123; useRef, useState &#125; from \"react\";const App = () =&gt; &#123; const [datas, setData] = useState([ &#123; name: \"기린\", id: 0 &#125;, &#123; name: \"강아지\", id: 1 &#125;, &#123; name: \"토끼\", id: 2 &#125;, &#123; name: \"호랑이\", id: 3 &#125;, &#123; name: \"사자\", id: 4 &#125;, ]); const viewport = useRef(null); const target = useRef(null); return ( &lt;div className=\"wrapper\"&gt; &lt;section className=\"card-grid\" id=\"target-root\" ref=&#123;viewport&#125;&gt; &#123;datas.map((animal, index) =&gt; &#123; const lastEl = index === datas.length - 1; return ( &lt;div key=&#123;index&#125; className=&#123;`card $&#123;lastEl &amp;&amp; \"last\"&#125;`&#125; ref=&#123;lastEl ? target : null&#125; &gt; &lt;p&gt;아이디: &#123;animal.id&#125;&lt;/p&gt; &lt;p&gt;이름:&#123;animal.name&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;)&#125; &lt;/section&gt; &lt;/div&gt; );&#125;;export default App; 기본 구조는 완료되었습니다.이제 intersection observer api를 사용해보도록 하겠습니다. App.js12345678910111213141516171819//...const loadItems = () =&gt; &#123; setData((prevState) =&gt; &#123; const animals = [ &#123; name: \"고양이\" &#125;, &#123; name: \"코끼리\" &#125;, &#123; name: \"원숭이\" &#125;, &#123; name: \"고라니\" &#125;, &#123; name: \"기린\" &#125;, &#123; name: \"표범\" &#125;, ]; const id = prevState[prevState.length - 1].id; const animalId = animals.map((animal, index) =&gt; &#123; return &#123; ...animal, id: id + index + 1 &#125;; &#125;); return [...prevState, ...animalId]; &#125;);&#125;;//... 마지막 카드와 뷰포트가 겹치게 되었을때 불러올 다음 동물 데이터 함수 입니다. App.js123456789101112131415161718192021222324252627//...useEffect(() =&gt; &#123; const options = &#123; root: viewport.current, // viewport threshold: 0, &#125;; const handleIntersection = (entries, observer) =&gt; &#123; entries.forEach((entry) =&gt; &#123; if (!entry.isIntersecting) &#123; return; &#125; loadItems(); // 데이터를 불러옵니다. observer.unobserve(entry.target); // 기존 타겟을 unobserve 하고 observer.observe(target.current); // 데이터 변경된 새로운 카드 타겟을 observe 합니다. &#125;); &#125;; const io = new IntersectionObserver(handleIntersection, options); if (target.current) &#123; io.observe(target.current); // target &#125; return () =&gt; io &amp;&amp; io.disconnect();&#125;, [target, viewport]);//... intersection observer api로 infinifyScroll을 구현해보았습니다. 최종코드 App.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import React, &#123; useRef, useEffect, useState &#125; from \"react\";import \"./App.css\";const App = () =&gt; &#123; const [datas, setData] = useState([ &#123; name: \"기린\", id: 0 &#125;, &#123; name: \"강아지\", id: 1 &#125;, &#123; name: \"토끼\", id: 2 &#125;, &#123; name: \"호랑이\", id: 3 &#125;, &#123; name: \"사자\", id: 4 &#125;, ]); const viewport = useRef(null); const target = useRef(null); const loadItems = () =&gt; &#123; setData((prevState) =&gt; &#123; const animals = [ &#123; name: \"고양이\" &#125;, &#123; name: \"코끼리\" &#125;, &#123; name: \"원숭이\" &#125;, &#123; name: \"고라니\" &#125;, &#123; name: \"기린\" &#125;, &#123; name: \"표범\" &#125;, ]; const id = prevState[prevState.length - 1].id; const animalId = animals.map((animal, index) =&gt; &#123; return &#123; ...animal, id: id + index + 1 &#125;; &#125;); return [...prevState, ...animalId]; &#125;); &#125;; useEffect(() =&gt; &#123; const options = &#123; root: viewport.current, threshold: 0, &#125;; const handleIntersection = (entries, observer) =&gt; &#123; entries.forEach((entry) =&gt; &#123; if (!entry.isIntersecting) &#123; return; &#125; loadItems(); observer.unobserve(entry.target); observer.observe(target.current); &#125;); &#125;; const io = new IntersectionObserver(handleIntersection, options); if (target.current) &#123; io.observe(target.current); &#125; return () =&gt; io &amp;&amp; io.disconnect(); &#125;, [viewport, target]); return ( &lt;div className=\"wrapper\"&gt; &lt;section className=\"card-grid\" id=\"target-root\" ref=&#123;viewport&#125;&gt; &#123;datas.map((animal, index) =&gt; &#123; const lastEl = index === datas.length - 1; return ( &lt;div key=&#123;index&#125; className=&#123;`card $&#123;lastEl &amp;&amp; \"last\"&#125;`&#125; ref=&#123;lastEl ? target : null&#125; &gt; &lt;p&gt;아이디: &#123;animal.id&#125;&lt;/p&gt; &lt;p&gt;이름:&#123;animal.name&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;)&#125; &lt;/section&gt; &lt;/div&gt; );&#125;;export default App;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"IntersectionObserverAPI","slug":"IntersectionObserverAPI","permalink":"http://flamingotiger.github.io/tags/IntersectionObserverAPI/"},{"name":"infiniteScroll","slug":"infiniteScroll","permalink":"http://flamingotiger.github.io/tags/infiniteScroll/"}]},{"title":"Canvas 기본 설정 및 사용해보기","slug":"frontend/html5/canvas-start","date":"2020-04-02T01:03:46.000Z","updated":"2021-04-30T03:36:18.277Z","comments":true,"path":"frontend/html5/canvas-start/","link":"","permalink":"http://flamingotiger.github.io/frontend/html5/canvas-start/","excerpt":"","text":"시작하기HTML5에서 부터 등장한 새로운 기능인 canvas기능을 살펴보겠습니다.HTML canvas요소는 웹 페이지에 그래픽을 그리는 용도로 사용됩니다.canvas에 그래픽을 그리기 위해서는 Javascript를 사용해야합니다.canvas에는 Path, Rect, Circle, Text, Image 등을 추가하는 여러 가지 방법이 있습니다. 캔버스 그리기 전 기본설정vscode를 사용한다면 html에서 웹서버를 구동할 수 있게 해주는 live server 패키지를 설치해줍니다. 이후 폴더에서 Go Live라는 버튼을 클릭하면 웹서버로 구동됩니다. 이 live server를 사용한 이유는 &lt;script type=&quot;module&quot; src=&quot;./App.js&quot;&gt;&lt;/script&gt; 이부분에서 type module을 불러오기 위해서 입니다. 벤버스 기본 설정이제 캔버스를 작성해보도록 하겠습니다. index.html12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\"&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"./style.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"module\" src=\"./App.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; stylesheet.css123456789101112131415161718192021* &#123; outline: 0; margin: 0; padding: 0;&#125;html &#123; width: 100%; height: 100%;&#125;body &#123; width: 100%; height: 100%; background-color: #fff;&#125;canvas &#123; width: 100%; height: 100%;&#125; html과 css설정이 완료 되었다면 본격적인 canvas를 설정하겠습니다. App.js1234567891011121314151617181920212223242526272829303132class App &#123; constructor() &#123; this.canvas = document.createElement(\"canvas\"); document.body.appendChild(this.canvas); this.ctx = this.canvas.getContext(\"2d\"); this.pixelRatio = window.devicePixelRatio &gt; 1 ? 2 : 1; window.addEventListener(\"resize\", this.resize.bind(this), false); this.resize(); window.requestAnimationFrame(this.animate.bind(this)); &#125; resize() &#123; this.stageWidth = document.body.clientWidth; this.stageHeight = document.body.clientHeight; this.canvas.width = this.stageWidth * this.pixelRatio; this.canvas.height = this.stageHeight * this.pixelRatio; this.ctx.scale(this.pixelRatio, this.pixelRatio); &#125; animate() &#123; window.requestAnimationFrame(this.animate.bind(this)); this.ctx.clearRect(0, 0, this.stageWidth, this.stageHeight); &#125;&#125;window.onload = () =&gt; &#123; new App();&#125;; 다음과 같은 코드를 작성했습니다. 이 코드의 의미는 다음과 같습니다. this.canvas = document.createElement(&quot;canvas&quot;);: 캔버스 엘리먼트 생성. document.body.appendChild(this.canvas);: body태그 내부 하단에 캔버스 엘리먼트 주입. this.ctx = this.canvas.getContext(&quot;2d&quot;);: 캔버스 2d 컨택스트 가져오기 (실제로 그려지는 요소입니다). this.pixelRatio = window.devicePixelRatio &gt; 1 ? 2 : 1;: 현재 표시 장치의 물리적 픽셀과 CSS 픽셀의 비율을 반환. window.requestAnimationFrame(this.animate.bind(this));: 애니메이션이 구현되는 부분입니다. 사각형 그리기사각형을 그리는 방법으로 크게 두가지로 볼수 있습니다.첫번재는 rect로 그리는 방법, 두번째는 fillRect메소드를 이용하는 방법입니다.두가지 모두 사용해보도록 하겠습니다. 123456789101112131415161718192021222324252627282930313233343536373839class App &#123; constructor() &#123; this.canvas = document.createElement(\"canvas\"); document.body.appendChild(this.canvas); this.ctx = this.canvas.getContext(\"2d\"); this.pixelRatio = window.devicePixelRatio &gt; 1 ? 2 : 1; window.addEventListener(\"resize\", this.resize.bind(this), false); this.resize(); window.requestAnimationFrame(this.animate.bind(this)); &#125; resize()&#123; this.stageWidth = document.body.clientWidth; this.stageHeight = document.body.clientHeight; this.canvas.width = this.stageWidth * this.pixelRatio; this.canvas.height = this.stageHeight * this.pixelRatio; this.ctx.scale(this.pixelRatio, this.pixelRatio); &#125; animate()&#123; window.requestAnimationFrame(this.animate.bind(this)); this.ctx.clearRect(0, 0, this.stageWidth, this.stageHeight); this.draw(); &#125; draw()&#123; this.ctx.beginPath(); this.ctx.fillStyle = \"red\"; this.ctx.rect(50, 50, 300, 200); this.ctx.fill(); this.ctx.closePath(); &#125;&#125;window.onload = () =&gt; &#123; new App();&#125;; rect로 그려본 결과입니다. 다음으로 fillRect를 사용해보겠습니다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445class App &#123; constructor() &#123; this.canvas = document.createElement(\"canvas\"); document.body.appendChild(this.canvas); this.ctx = this.canvas.getContext(\"2d\"); this.pixelRatio = window.devicePixelRatio &gt; 1 ? 2 : 1; window.addEventListener(\"resize\", this.resize.bind(this), false); this.resize(); window.requestAnimationFrame(this.animate.bind(this)); &#125; resize() &#123; this.stageWidth = document.body.clientWidth; this.stageHeight = document.body.clientHeight; this.canvas.width = this.stageWidth * this.pixelRatio; this.canvas.height = this.stageHeight * this.pixelRatio; this.ctx.scale(this.pixelRatio, this.pixelRatio); &#125; animate() &#123; window.requestAnimationFrame(this.animate.bind(this)); this.ctx.clearRect(0, 0, this.stageWidth, this.stageHeight); this.draw(); &#125; draw() &#123; // Rect this.ctx.beginPath(); this.ctx.fillStyle = \"red\"; this.ctx.rect(50, 50, 300, 200); this.ctx.fill(); this.ctx.closePath(); // fillRect this.ctx.beginPath(); this.ctx.fillStyle = \"blue\"; this.ctx.fillRect(80, 80, 200, 200); this.ctx.closePath(); &#125;&#125;window.onload = () =&gt; &#123; new App();&#125;; fillRect로 그려본 결과입니다. rect는 영역을 잡아주고 fill()을 통해서 내부의 색을 채워주는 방법입니다.fillRect는 그러한 과정을 한번헤 해결해주는 메소드입니다. 이와같은 방법으로 canvas를 통해서 그래픽을 이용한 도형이나 효과를 줄 수 있습니다.canvas를 통해서 웹으로 구현할 수 없는 한계가 없어지는듯 합니다. 이외의 다른 도형을 그리는 방법은 다음 웹사이트에서 찾아볼수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"html5","slug":"frontend/html5","permalink":"http://flamingotiger.github.io/categories/frontend/html5/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"canvas","slug":"canvas","permalink":"http://flamingotiger.github.io/tags/canvas/"},{"name":"html5","slug":"html5","permalink":"http://flamingotiger.github.io/tags/html5/"}]},{"title":"Nextjs jest와 enzyme로 테스트하기","slug":"frontend/Testing/jest-next-testing","date":"2020-03-27T05:02:29.000Z","updated":"2021-04-30T03:36:18.276Z","comments":true,"path":"frontend/Testing/jest-next-testing/","link":"","permalink":"http://flamingotiger.github.io/frontend/Testing/jest-next-testing/","excerpt":"","text":"시작하기Nextjs에 jest로 테스트를 추가해보도록 하겠습니다.이전 포스트에서 i18n과 redux등을 추가 했었는데요.테스트를 할때 useTranslation, useSelector, useDispatch가 에러가 나는 것도 해결해 보도록 하겠습니다. 설치하기1yarn add -D jest ts-jest enzyme enzyme-adapter-react-16 enzyme-to-json @types/enzyme-adapter-react-16 @types/enzyme @types/jest jest: Jest는 단순성에 중점을 둔 JavaScript Testing Framework입니다. ts-jest: Jest를 사용하여 TypeScript로 작성된 프로젝트를 테스트 할 수 있습니다. enzyme: Enzyme은 React의 JavaScript 테스트 유틸리티로 React Components의 출력을보다 쉽게 ​​테스트 할 수 있습니다. enzyme-adapter-react-16: 사용중인 React버전에 맞는 adapter를 설치해주어야합니다. enzyme-to-json: 매우 쉽고 깨끗하고 간단한 스냅 샷 테스트를 작성할 수 있습니다. 이것으로 설치가 완료되었습니다. 설정하기jest와 enzyme 설정을 해주도록 하겠습니다. src/setupTests.ts12345import &#123; configure &#125; from \"enzyme\";import Adapter from \"enzyme-adapter-react-16\";configure(&#123; adapter: new Adapter() &#125;);export default undefined; 처음으로 adapter설정을 해줍니다. jest.config.js123456789101112131415module.exports = &#123; setupFilesAfterEnv: [\"&lt;rootDir&gt;/src/setupTests.ts\"], testPathIgnorePatterns: [\"&lt;rootDir&gt;/.next/\", \"&lt;rootDir&gt;/node_modules/\"], preset: \"ts-jest\", transform: &#123; \"^.+\\\\.tsx?$\": \"ts-jest\" &#125;, moduleFileExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"json\", \"node\"], snapshotSerializers: [\"enzyme-to-json/serializer\"], globals: &#123; \"ts-jest\": &#123; tsConfig: \"&lt;rootDir&gt;/tsconfig.jest.json\" &#125; &#125;&#125;; snapshot, ts-jest와 enzyme setup파일을 불러오는 등 jest 설정을 합니다. tsconfig.jest.json123456&#123; \"extends\": \"./tsconfig.json\", \"compilerOptions\": &#123; \"jsx\": \"react\" &#125;&#125; jest에서는 컴파일 옵션을 react로 합니다. package.json12345678910&#123; //... \"scripts\": &#123; //... \"test\": \"jest\", \"test:watch\": \"jest --watchAll\" //... &#125; //...&#125; 테스트 스크립트를 추가해줍니다. 적용하기테스트 설정을 적용해보겠습니다. pages/index.spec.tsx12345678910111213import React from \"react\";import &#123; mount &#125; from \"enzyme\";import Index from \"./index\";import &#123; includeDefaultNamespaces &#125; from \"../src/i18n\";describe(\"Index page\", () =&gt; &#123; it(\"match snapshot\", () =&gt; &#123; const wrapper = mount( &lt;Index namespacesRequired=&#123;includeDefaultNamespaces([\"Index\"])&#125; /&gt; ); expect(wrapper).toMatchSnapshot(); &#125;);&#125;); 테스트를 해보도록 합니다.테스트를 했는데 다음과 같은 경고가 에디터 콘솔에 나옵니다. 해결을 해보도록 하겠습니다. src/__mocks__/mockReactI18next.ts파일을 생성을하고 설정을 해줍니다. src/__mocks__/mockReactI18next.ts123456789101112131415161718192021222324let selectedLanguage = \"en\";const useMock = &#123; t: (k: string) =&gt; k, i18n: &#123; language: selectedLanguage, changeLanguage: (lang: string) =&gt; (selectedLanguage = lang) &#125;&#125;;const reactI18next = jest.mock(\"react-i18next\", () =&gt; (&#123; withTranslation: jest .fn() .mockImplementation(() =&gt; (Component: React.FC | React.ComponentClass) =&gt; &#123; const ComponentCopy = &#123; ...Component &#125;; ComponentCopy.defaultProps = &#123; ...Component.defaultProps, t: (k: string) =&gt; k &#125;; return ComponentCopy; &#125;), useTranslation: () =&gt; useMock&#125;));export default reactI18next; jest.config.js1234567module.exports = &#123; //... moduleNameMapper: &#123; \"react-i18next\": \"&lt;rootDir&gt;/src/__mocks__/mockReactI18next.ts\" &#125; //...&#125;; 설정한 파일을 맵핑해줍니다.그리고 다시 yarn run test로 테스트를 실행해줍니다. react redux 테스트 설정Redux를 사용하지 않는다면 넘어가도 됩니다.Redux를 사용한다면 useSelector와 useDispatch가 에러가 발생하는데 수정해보도록 하겠습니다. 1yarn add redux-mock-store &amp;&amp; yarn run add -D @types/redux-mock-store src/__mocks__/mockStore123456789101112131415161718import createMockStore, &#123; MockStore &#125; from \"redux-mock-store\";import * as ReactRedux from \"react-redux\";// Redux의 store를 불러옵니다.import store from \"../store\";const mockStore = createMockStore([]);const makeMockStore = ( state = store.getState() || &#123;&#125;): MockStore&lt;unknown&gt; &amp; &#123; dispatch: &#123;&#125; &#125; =&gt; mockStore(&#123; ...state &#125;);export const mockUseReactRedux = () =&gt; &#123; const spyUseSelector = jest.spyOn(ReactRedux, \"useSelector\"); spyUseSelector.mockImplementation(() =&gt; store.getState()); const spyDispatch = jest.spyOn(ReactRedux, \"useDispatch\"); spyDispatch.mockImplementation(() =&gt; store.dispatch);&#125;;export default makeMockStore; pages에 redux를 사용한다고 가정하고 테스트코드를 작성해보겠습니다. pages/index.spec.tsx1234567891011121314import React from \"react\";import &#123; mount &#125; from \"enzyme\";import Index from \"./index\";import &#123; includeDefaultNamespaces &#125; from \"../src/i18n\";import &#123; mockUseReactRedux &#125; from \"../__mocks__/mockStore\";describe(\"Index page\", () =&gt; &#123; beforeAll(() =&gt; &#123; mockUseReactRedux(); &#125;); /* Test code... */&#125;); 이후 테스트를 시도해본다면 에러는 나오지 않습니다.이 방법을 사용하거나 다른 한가지 방법을 사용하면 됩니다. pages/index.spec.tsx123456789101112131415161718192021import React from \"react\";import &#123; mount &#125; from \"enzyme\";import Index from \"./index\";import &#123; Provider &#125; from \"react-redux\";import &#123; includeDefaultNamespaces &#125; from \"../src/i18n\";import &#123; makeMockStore &#125; from \"../__mocks__/mockStore\";const store = makeMockStore();describe(\"Index page\", () =&gt; &#123; it(\"react-redux test\", () =&gt; &#123; const wrapper = mount( &lt;Provider store=&#123;store&#125;&gt; &lt;Index namespacesRequired=&#123;includeDefaultNamespaces([\"Index\"])&#125; /&gt; &lt;Provider/&gt; ); /* Test code... */ &#125;)&#125;); styled-components 테스트jest-styled-components를 설치해줍니다. 1yarn add -D jest-styled-components src/setupTests.ts123456import &#123; configure &#125; from \"enzyme\";import Adapter from \"enzyme-adapter-react-16\";import \"jest-styled-components\";configure(&#123; adapter: new Adapter() &#125;);export default undefined; jest-styled-components를 설정합니다. 이것으로 i18next와 react-redux등을 jest와 enzyme를 통해 next에서 테스트하였습니다.i18next와 react-redxu를 테스트 설정하는 과정이 복잡하다는 것을 알 수 있었습니다.enzyme는 기존 class 형식에는 지원이 잘되어있습니다.하지만 16.8 버전 이상에 훅스가 나오면서 함수 형식으로 컴포넌트를 작성하고 훅스를 사용하면서 에러나 경고를 많이 접하게 됩니다. 다음 업데이트가 있을때까지는 이렇게 사용해야 할 것 같습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"Testing","slug":"frontend/Testing","permalink":"http://flamingotiger.github.io/categories/frontend/Testing/"}],"tags":[{"name":"jest","slug":"jest","permalink":"http://flamingotiger.github.io/tags/jest/"},{"name":"config","slug":"config","permalink":"http://flamingotiger.github.io/tags/config/"}]},{"title":"Nextjs에서 다국어 지원 next-i18next 적용하기","slug":"frontend/react/nextjs-i18next","date":"2020-03-27T01:41:01.000Z","updated":"2021-04-30T03:36:18.278Z","comments":true,"path":"frontend/react/nextjs-i18next/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/nextjs-i18next/","excerpt":"","text":"시작하기이전에 react에서 다국어 i18n을 지원하는 포스트를 작성했었습니다.nextjs에서는 다른 방법으로 i18n을 설정해 주어야 합니다.시작해보도록 하겠습니다. 설치하기Nextjs 에서 typescript 적용하기 포스트 를 참고하여 프로젝트를 생성해줍니다. 1yarn add i18next next-i18next react-i18next i18next-icu i18next: javascript로 작성된 국제화 프레임 워크로 표준 i18n 기능을 제공합니다. next-i18next: next에서 쉽게 번역을 제공합니다. react-i18next: 고차 컴포넌트 (hoc) 및 컨텍스트에 i18next를 추가합니다. i18next-icu: i18next와 함께 ICU 형식 (International Components for Unicode)을 사용하는 i18nFormat 플러그인입니다. 설정하기몇 가지 파일을 만들어 주도록 합니다. src/i18n.ts: i18n 설정파일 입니다. public/locate/en/common.json: en일시에 보여줄 정적 데이터 파일입니다. public/locate/ko/common.json: ko일시에 보여줄 정적 데이터 파일입니다. public/locate/en/common.json123&#123; \"hello\": \"hello\"&#125; public/locate/ko/common.json123&#123; \"hello\": \"안녕하세요\"&#125; src/i18n1234567891011121314151617181920212223242526272829303132333435363738import ICU, &#123; IcuInstance &#125; from \"i18next-icu\";import en from \"i18next-icu/locale-data/en\";import ko from \"i18next-icu/locale-data/ko\";import NextI18Next from \"next-i18next\";import &#123; useTranslation as originalUseTranslation &#125; from \"react-i18next\";import &#123; NextComponentType, NextPageContext &#125; from \"next\";const use: IcuInstance[] = [];const icu = new ICU(&#123;&#125;);icu.addLocaleData(ko);icu.addLocaleData(en);use.push(icu);const NextI18NextInstance = new NextI18Next(&#123; browserLanguageDetection: false, defaultLanguage: \"en\", defaultNS: \"common\", fallbackLng: \"en\", keySeparator: \"###\", localePath: \"public/locales\", otherLanguages: [\"ko\"], use&#125;);export const &#123; appWithTranslation, withTranslation &#125; = NextI18NextInstance;export default NextI18NextInstance;export const includeDefaultNamespaces = (namespaces: string[]) =&gt; [\"common\"].concat(namespaces);export const &#123; Trans &#125; = NextI18NextInstance;export const useTranslation = originalUseTranslation;export type I18nPage&lt;P = &#123;&#125;&gt; = NextComponentType&lt; NextPageContext, &#123; namespacesRequired: string[] &#125;, P &amp; &#123; namespacesRequired: string[] &#125;&gt;; 적용하기설정이 완료되었다면 다음으로 사이트에 적용하도록 하겠습니다.모든 pages에서 i18n을 적용하기위해 pages폴더 내부에 _app.tsx를 생성하여 적용합니다. pages/_app.tsx12345678910111213141516import App from \"next/app\";import React from \"react\";import &#123; appWithTranslation &#125; from \"../src/i18n\";class ReactApp extends App&lt;any&gt; &#123; public render() &#123; const &#123; Component, pageProps &#125; = this.props; return ( &lt;&gt; &lt;Component &#123;...pageProps&#125; /&gt; &lt;/&gt; ); &#125;&#125;export default appWithTranslation(ReactApp); 다음으로 pages/index.tsx 파일에 적용해보도록 하겠습니다. pages/index.tsx123456789101112131415161718192021import React from \"react\";import &#123; I18nPage, useTranslation &#125; from \"../src/i18n\";const Index: I18nPage = () =&gt; &#123; const &#123; t, i18n &#125; = useTranslation(); return ( &lt;div&gt; &lt;h1&gt;Index&lt;/h1&gt; &lt;p&gt;&#123;t(\"hello\")&#125;&lt;/p&gt; &lt;button onClick=&#123;() =&gt; i18n.changeLanguage(i18n.language === \"en\" ? \"ko\" : \"en\") &#125; &gt; Change Language &lt;/button&gt; &lt;/div&gt; );&#125;;export default Index; 예시로 버튼을 클릭하면 hello의 언어가 바뀌는 것을 구현했습니다. react-i18next에서 지원하는 훅스를 이용하면 간편하게 사용할 수 있습니다.useTranslation의 반환값으로 t, 18n이 대표적입니다. t: commonjs의 키에 해당하는 string을 입력하면 그것이 맞춰 value가 반환됩니다. i18n: i18n 메소드로 언어 변경이나 현재 언어확인 등을 할수 있는 객체입니다. Warning1You have not declared a namespacesRequired array on your page-level component: Index. This will cause all namespaces to be sent down to the client, possibly negatively impacting the performance of your app. For more info, see: https://github.com/isaachinman/next-i18next#4-declaring-namespace-dependencies 완성을 하고 보니 에디터 콘솔에서 다음과 같은 warning메시지가 나옵니다.페이지 레벨의 컴포넌트에는 namespaces가 필수로 정의되야한다는 의미입니다.이 경고를 수정해보도록 하겠습니다. pages/index.tsx123456789101112//...import &#123; I18nPage, useTranslation, includeDefaultNamespaces&#125; from \"../src/i18n\";//...Index.getInitialProps = async () =&gt; (&#123; namespacesRequired: includeDefaultNamespaces([\"Index\"])&#125;);","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"nextjs","slug":"nextjs","permalink":"http://flamingotiger.github.io/tags/nextjs/"},{"name":"next-i18next","slug":"next-i18next","permalink":"http://flamingotiger.github.io/tags/next-i18next/"},{"name":"i18n","slug":"i18n","permalink":"http://flamingotiger.github.io/tags/i18n/"},{"name":"i18next","slug":"i18next","permalink":"http://flamingotiger.github.io/tags/i18next/"},{"name":"react-i18next","slug":"react-i18next","permalink":"http://flamingotiger.github.io/tags/react-i18next/"}]},{"title":"macOS에서 Mongodb 다운로드 및 설치하기","slug":"backend/db/mongodb-setup","date":"2020-02-26T07:27:17.000Z","updated":"2021-04-30T03:36:18.269Z","comments":true,"path":"backend/db/mongodb-setup/","link":"","permalink":"http://flamingotiger.github.io/backend/db/mongodb-setup/","excerpt":"","text":"시작하기MongoDB는 문서 데이터베이스이므로 JSON과 같은 문서에 데이터를 저장합니다.기본 sql에서 사용하는 행/열 모델보다 훨씬 표현적이고 강력하다고 생각합니다.그러한 mongodb를 설치해보도록 하겠습니다. 설치하기홈브루 사이트에 접속해서 커맨드를 복사한 후 터미널에 입력해서 homebrew를 설치합니다. 1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 커스텀 홈브루 탭 추가를 합니다 1brew tap mongodb/brew 홈브루를 이용해서 mongodb를 설치합니다. 1brew install mongodb-community 홈브루를 이용해서 설치할 경우config파일과 path가 자동으로 설정됩니다.configuration file =&gt; /usr/local/etc/mongod.conflog directory path =&gt; /usr/local/var/log/mongodbdata directory path =&gt; /usr/local/var/mongodb 1mongod mongodb를 실행합니다. Catalina 에러mongodb를 실행했을경우 다음과 같은 에러가 발생합니다. 1sudo mkdir -p /data/db 를 실행합니다.mkdir: /data/db: Read-only file system과 같은 에러가 나올경우다음 명령어를 입력합니다 whoami를 입력하면 사용자 이름이나옵니다. 1whoami 아까 확인한 사용자이름을 넣어주도록 합니다. 1sudo mongod --dbpath /users/&lt;username&gt;/data/db/ 1mongod 이후 mongodb를 실행하면 잘 작동하는 것을 확인할 수 있습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"db","slug":"backend/db","permalink":"http://flamingotiger.github.io/categories/backend/db/"}],"tags":[{"name":"node","slug":"node","permalink":"http://flamingotiger.github.io/tags/node/"},{"name":"mongodb","slug":"mongodb","permalink":"http://flamingotiger.github.io/tags/mongodb/"}]},{"title":"React에 Apollo Client 적용하기","slug":"frontend/react/react-apollo-client-setup","date":"2020-02-25T07:29:18.000Z","updated":"2021-04-30T03:36:18.278Z","comments":true,"path":"frontend/react/react-apollo-client-setup/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-apollo-client-setup/","excerpt":"","text":"시작하기REST API의 단점을 보완하고 더 개선된 사용 환경을 제공하기 위해 GraphQL을 기반으로 한 Apollo Client 입니다. GraphQL 기본 쿼리문 query: 데이터를 받아올 때 사용합니다 (get). mutation: 데이터를 생성, 수정, 삭제할 때 사용합니다 (post, put, patch, delete). subscription: 웹소켓을 사용해 실시간 양방향 통신을 구현할 때 사용합니다 (websocket). 설치하기1create-react-app apollo-client-app --typescript apollo 와 graphql를 설치해주도록 합니다. 1npm install apollo-boost @apollo/react-hooks graphql 클라이언트 만들기GraphQL 서버의 엔드포인트를 설정해주도록 합니다. index.tsx12345678910111213141516171819import &#123; gql &#125; from \"apollo-boost\";import ApolloClient from \"apollo-boost\";const client = new ApolloClient(&#123; uri: \"https://48p1r2roz4.sse.codesandbox.io\"&#125;);client .query(&#123; query: gql` &#123; rates(currency: \"USD\") &#123; currency &#125; &#125; ` &#125;) .then(result =&gt; console.log(result)); // 기본 사용방법 클라이언트를 React에 연결Apollo Client를 React에 연결하려면 ApolloProvider를 사용해야합니다.기존에 작성했던 query는 지워줍니다. 다른 컴포넌트에서 사용해야합니다. index.tsx12345678910111213141516171819202122import React from \"react\";import ReactDOM from \"react-dom\";import App from \"./App\";import * as serviceWorker from \"./serviceWorker\";import ApolloClient from \"apollo-boost\";import &#123; ApolloProvider &#125; from \"@apollo/react-hooks\";const client = new ApolloClient(&#123; uri: \"https://48p1r2roz4.sse.codesandbox.io\" // 예제 graphql api 입니다.&#125;);ReactDOM.render( &lt;ApolloProvider client=&#123;client&#125;&gt; &lt;App /&gt; &lt;/ApolloProvider&gt;, document.getElementById(\"root\"));// If you want your app to work offline and load faster, you can change// unregister() to register() below. Note this comes with some pitfalls.// Learn more about service workers: https://bit.ly/CRA-PWAserviceWorker.unregister(); ExchangeRates 컴포넌트 생성EXCHANGE_RATES쿼리를 입력해주도록 합니다. ExchangeRates.tsx12345678910111213141516171819202122232425262728293031import React from \"react\";import &#123; useQuery &#125; from \"@apollo/react-hooks\";import &#123; gql &#125; from \"apollo-boost\";const EXCHANGE_RATES = gql` &#123; rates(currency: \"USD\") &#123; currency rate &#125; &#125;`;function ExchangeRates() &#123; const &#123; loading, error, data &#125; = useQuery(EXCHANGE_RATES); if (loading) return &lt;p&gt;Loading...&lt;/p&gt;; if (error) return &lt;p&gt;Error :(&lt;/p&gt;; return data.rates.map( (&#123; currency, rate &#125;: &#123; currency: string; rate: string &#125;) =&gt; ( &lt;div key=&#123;currency&#125;&gt; &lt;p&gt; &#123;currency&#125;: &#123;rate&#125; &lt;/p&gt; &lt;/div&gt; ) );&#125;export default ExchangeRates; ExchangeRates 컴포넌트를 추가해주도록 합니다. App.tsx12345678910111213import React from \"react\";import ExchangeRates from './ExchangeRates';function App() &#123; return ( &lt;div className=\"App\"&gt; 🚀Apollo graphql starter &lt;ExchangeRates /&gt; &lt;/div&gt; );&#125;export default App; 이것으로 apollo client를 사용해보았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"apollo","slug":"apollo","permalink":"http://flamingotiger.github.io/tags/apollo/"},{"name":"graphql","slug":"graphql","permalink":"http://flamingotiger.github.io/tags/graphql/"}]},{"title":"Mac에서 R 설치하기.study","slug":"DevTIL/Study/r-mac-setup","date":"2020-02-18T07:25:58.000Z","updated":"2021-04-30T03:36:18.269Z","comments":true,"path":"DevTIL/Study/r-mac-setup/","link":"","permalink":"http://flamingotiger.github.io/DevTIL/Study/r-mac-setup/","excerpt":"","text":"시작하기데이터 분석에 특화된 프로그램으로 다양한 통계 방법론이 적용됩니다.R이 가진 강점은 바로 시각화라 할 수 있습니다.지도, GIS, 시계열을 잘 나타내주는 동적 그래프 등을 모두 지원하고 있습니다.2D와 3D 그래픽을 잘 보여줍니다. R 설치하기R 공식사이트에 접속합니다.이후 좌측의 Download =&gt; CRAN를 선택합니다. CRAN을 클릭하면 다음과 같이 다운가능한 국가 및 링크들이 나옵니다.이중에 korea안의 링크를 선택합니다. 각자의 컴퓨터에 해당하는 OS를 선택해서 링크를 선택하면 다운로드가 시작됩니다. R studio 설치하기R studio 공식 사이트에 접속합니다. 상단의 products를 선택하고 OPEN SOURCE에서 RStudio The premier IDE for R 를 선택합니다.이후 R studio Desktop을 선택합니다. Open Source Edition의 Download rstudio desktop을 선택합니다. download를 선택하면 다운로드가 시작됩니다. R 실행하기다운로드가 완료된 r을 설치하고, r studio를 설치한이후 실행을 해보도록 합니다.실행이 완료된다면 다음과 같은 에디터가 실행됩니다.","categories":[{"name":"DevTIL","slug":"DevTIL","permalink":"http://flamingotiger.github.io/categories/DevTIL/"},{"name":"Study","slug":"DevTIL/Study","permalink":"http://flamingotiger.github.io/categories/DevTIL/Study/"}],"tags":[{"name":"study","slug":"study","permalink":"http://flamingotiger.github.io/tags/study/"},{"name":"c","slug":"c","permalink":"http://flamingotiger.github.io/tags/c/"},{"name":"xcode","slug":"xcode","permalink":"http://flamingotiger.github.io/tags/xcode/"},{"name":"mac","slug":"mac","permalink":"http://flamingotiger.github.io/tags/mac/"}]},{"title":"Mac에서 C언어 사용하기.study","slug":"DevTIL/Study/c-mac-start","date":"2020-02-18T06:47:48.000Z","updated":"2021-04-30T03:36:18.269Z","comments":true,"path":"DevTIL/Study/c-mac-start/","link":"","permalink":"http://flamingotiger.github.io/DevTIL/Study/c-mac-start/","excerpt":"","text":"시작하기window에서는 주로 visual studio를 사용하고 mac에서는 xcode를 사용합니다.현재 mac을 이용하고 있기에 xcode로 c언어 프로그램을 작성해보도록 하겠습니다. xcode실행하기xcode를 실행시킵니다 생성하기macOS를 선택한후 명령어 툴을 선택합니다. 프로젝트의 이름과 오너를 입력해줍니다.이후 language를 c로 변경합니다. 파일생성을 할 위치를 설정해줍니다. 완료프로젝트 생성이 완료되었습니다. 초기에 예제 코드가 입력되어있습니다.재생아이콘을 클릭해서 빌드를 해보도록 합니다. 이것으로 맥에서 c언어를 사용하는 방법을 알아 보았습니다.","categories":[{"name":"DevTIL","slug":"DevTIL","permalink":"http://flamingotiger.github.io/categories/DevTIL/"},{"name":"Study","slug":"DevTIL/Study","permalink":"http://flamingotiger.github.io/categories/DevTIL/Study/"}],"tags":[{"name":"study","slug":"study","permalink":"http://flamingotiger.github.io/tags/study/"},{"name":"c","slug":"c","permalink":"http://flamingotiger.github.io/tags/c/"},{"name":"xcode","slug":"xcode","permalink":"http://flamingotiger.github.io/tags/xcode/"},{"name":"mac","slug":"mac","permalink":"http://flamingotiger.github.io/tags/mac/"}]},{"title":"Jest 이미지 테스트 에러","slug":"frontend/Testing/jest-image-error","date":"2020-02-11T05:10:40.000Z","updated":"2021-04-30T03:36:18.275Z","comments":true,"path":"frontend/Testing/jest-image-error/","link":"","permalink":"http://flamingotiger.github.io/frontend/Testing/jest-image-error/","excerpt":"","text":"시작하기jest 테스트를 하던 도중 이미지 import image from &#39;./image.svg&#39;; 부분이 에러가 발생시 해결방법입니다. 설정파일 만들기프로젝트의 루트폴더에 assetsTransformer.js 파일을 생성해줍니다. assetsTransformer.js1234567const path = require('path');module.exports = &#123; process(src, filename, config, options) &#123; return `module.exports = $&#123;JSON.stringify(path.basename(filename))&#125;;`; &#125;&#125;; jest 설정 수정하기jest.config.js123456//... moduleNameMapper: &#123; '\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': '&lt;rootDir&gt;/assetsTransformer.js', '\\\\.(css|less)$': '&lt;rootDir&gt;/assetsTransformer.js' &#125;//... jest.config.js 혹은 package.json 파일에 추가 해줍니다.이후 테스트를 하면 에러가 없어지는 것을 확인 할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"Testing","slug":"frontend/Testing","permalink":"http://flamingotiger.github.io/categories/frontend/Testing/"}],"tags":[{"name":"jest","slug":"jest","permalink":"http://flamingotiger.github.io/tags/jest/"},{"name":"config","slug":"config","permalink":"http://flamingotiger.github.io/tags/config/"}]},{"title":"webpack 이미지 설정","slug":"frontend/DevEnv/webpack-image","date":"2020-02-11T01:11:49.000Z","updated":"2021-04-30T03:36:18.273Z","comments":true,"path":"frontend/DevEnv/webpack-image/","link":"","permalink":"http://flamingotiger.github.io/frontend/DevEnv/webpack-image/","excerpt":"","text":"시작하기이전 포스트 웹팩설정에 이어서 프로젝트에서 이미지를 불러오려면 webpack에서 몇가지 설정을 해주도록 하겠습니다. 설치하기1npm install --save-dev file-loader file loader 패키지를 설치해줍니다. 설정하기webpack.config.js파일 모듈의 룰 부분에 file loader를 추가 해주도록 합니다. webpack.config.js1234567891011121314//...module.exports = &#123; //... module: &#123; rules: [ //... &#123; test: /\\.(jpe?g|png|gif|svg)$/, loader: 'file-loader' &#125; ] &#125;, //...&#125;; typescript 이미지 불러오는 오류typescript를 사용하는 경우 이미지를 불러오는데 오류가 나는 경우가 있습니다.이 경우에는 추가로 설정을 해주어야합니다. src/app.d.ts1234567891011121314151617181920212223242526272829303132// / &lt;reference types=\"node\" /&gt;// / &lt;reference types=\"react\" /&gt;// / &lt;reference types=\"react-dom\" /&gt;declare module '*.gif' &#123; const src: string; export default src;&#125;declare module '*.jpg' &#123; const src: string; export default src;&#125;declare module '*.jpeg' &#123; const src: string; export default src;&#125;declare module '*.png' &#123; const src: string; export default src;&#125;declare module '*.svg' &#123; import * as React from 'react'; export const ReactComponent: React.FunctionComponent&lt;React.SVGProps&lt;SVGSVGElement&gt;&gt;; const src: string; export default src;&#125; 이미지 파일의 타입을 정해주어야 에러가 나지 않고 정상적으로 작동합니다.이것으로 간단하게 웹팩 이미지 설정을 추가했습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"DevEnv","slug":"frontend/DevEnv","permalink":"http://flamingotiger.github.io/categories/frontend/DevEnv/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"webpack","slug":"webpack","permalink":"http://flamingotiger.github.io/tags/webpack/"},{"name":"image","slug":"image","permalink":"http://flamingotiger.github.io/tags/image/"}]},{"title":"Storybook 설치 및 테마 설정하기","slug":"frontend/DevEnv/storybook-setup","date":"2020-02-06T06:05:38.000Z","updated":"2021-04-30T03:36:18.273Z","comments":true,"path":"frontend/DevEnv/storybook-setup/","link":"","permalink":"http://flamingotiger.github.io/frontend/DevEnv/storybook-setup/","excerpt":"","text":"시작하기Storybook은 React, Vue 및 Angular와 독립적으로 UI 구성 요소를 개발하기위한 오픈 소스 도구입니다.뛰어난 UI를 체계적이고 효율적으로 구축 할 수 있습니다.공식 홈페이지에서 자세한 내용을 알 수 있습니다. 설치하기프로젝트 내부에서 1npx -p @storybook/cli sb init --type react storybook을 react 타입으로 설치를 해줍니다. 1npm run storybook 설치가 완료 이후 실행을 합니다. 테마 설정하기스토리 북 테마를 설치 합니다. 1npm install -D @storybook/theming .storybook폴더 내부에 theme.js, manager.js파일을 생성합니다 .storybook/theme.js123456789101112import logo from \"./logo.svg\";import &#123; create &#125; from \"@storybook/theming\";export default create(&#123; // theme dark or light base: \"dark\", // brand logo brandImage: logo, brandName: \"logo name\", brandUrl: \"url\"&#125;); .storybook/manager.js1234import &#123; addons &#125; from \"@storybook/addons\";import theme from \"./theme\";addons.setConfig(&#123; theme &#125;); 이후 다시 실행시켜주면 dark 테마로 변경되는것을 확인할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"DevEnv","slug":"frontend/DevEnv","permalink":"http://flamingotiger.github.io/categories/frontend/DevEnv/"}],"tags":[{"name":"storybook","slug":"storybook","permalink":"http://flamingotiger.github.io/tags/storybook/"},{"name":"test","slug":"test","permalink":"http://flamingotiger.github.io/tags/test/"},{"name":"theme","slug":"theme","permalink":"http://flamingotiger.github.io/tags/theme/"}]},{"title":"Storybook을 Netlify로 정적 사이트 배포하기","slug":"frontend/DevEnv/netlify-deploy","date":"2020-02-06T05:55:59.000Z","updated":"2021-04-30T03:36:18.273Z","comments":true,"path":"frontend/DevEnv/netlify-deploy/","link":"","permalink":"http://flamingotiger.github.io/frontend/DevEnv/netlify-deploy/","excerpt":"","text":"시작하기서버와의 API통신없이 프론트엔드로만 구성된 정적 애플리케이션을 배포하는 용도로 최적화된 서비스입니다.netlify 홈페이지 사전작업 깃헙 저장소에 프로젝트가 있어야 합니다. 프로젝트에 스토리북이 있어야합니다. 설정하기사이트에 깃헙계정으로 로그인을 합니다. 스토리 보드 혹은 프로젝트를 빌드해줄 명령어와 명령어 입력후 만들어지는 static 폴더를 입력해줍니다.static의 이름은 설정하는 것에 따라 다릅니다. 예) build, static, dist... site setting을 클릭해서 내부에 change site name 버튼을 클릭하면 사이트의 명칭을 변경할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"DevEnv","slug":"frontend/DevEnv","permalink":"http://flamingotiger.github.io/categories/frontend/DevEnv/"}],"tags":[{"name":"deploy","slug":"deploy","permalink":"http://flamingotiger.github.io/tags/deploy/"},{"name":"static","slug":"static","permalink":"http://flamingotiger.github.io/tags/static/"},{"name":"netlify","slug":"netlify","permalink":"http://flamingotiger.github.io/tags/netlify/"},{"name":"storybook","slug":"storybook","permalink":"http://flamingotiger.github.io/tags/storybook/"}]},{"title":"webpack typescript 적용하기","slug":"frontend/DevEnv/webpack-typescript","date":"2020-01-24T01:47:33.000Z","updated":"2021-04-30T03:36:18.273Z","comments":true,"path":"frontend/DevEnv/webpack-typescript/","link":"","permalink":"http://flamingotiger.github.io/frontend/DevEnv/webpack-typescript/","excerpt":"","text":"시작하기이전 포스트를 통해 Babel과 webpack 기본 설정을 했습니다.이번 포스트에서는 기본설정에서 typescript를 적용하겠습니다. 설치하기1npm install --save-dev @types/react @types/react-dom typescript ts-loader 타입스크립트 관련 패키지를 설치해줍니다. 1npx typescript --init 다음 스크립트를 입력하면 tsconfig.json 파일이 생성됩니다. tsconfig.json12345678&#123; \"compilerOptions\": &#123; //... \"jsx\": \"react\", \"sourceMap\": true, //... &#125;&#125; jsx 설정을 react로 설정해줍니다. 설정하기webpack 설정파일을 수정합니다. webpack.config.js1234567891011121314151617181920//...module.exports = &#123; entry: \"./src/index.tsx\", //... resolve: &#123; extensions: [\".ts\", \".tsx\", \".js\", \".jsx\"], &#125;, module: &#123; // 로더 rules: [ //... &#123; test:/\\.(ts|tsx)$/, exclude: /node_modules/, include: srcPath, loader: \"ts-loader\", &#125; ] &#125;&#125;//... js혹은 jsx를 ts 혹은 tsx 확장자로 변경합니다. 1npm run start 프로젝트를 실행시킵니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"DevEnv","slug":"frontend/DevEnv","permalink":"http://flamingotiger.github.io/categories/frontend/DevEnv/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"webpack","slug":"webpack","permalink":"http://flamingotiger.github.io/tags/webpack/"}]},{"title":"Eslint 적용하기(React + Typescript + Prettier)","slug":"javascript/eslint-setup","date":"2020-01-15T02:02:14.000Z","updated":"2021-04-30T03:36:18.281Z","comments":true,"path":"javascript/eslint-setup/","link":"","permalink":"http://flamingotiger.github.io/javascript/eslint-setup/","excerpt":"","text":"시작하기기존 프로젝트에서 tslint를 사용해 왔었는데 이번에 tslint는 deprecated 되었습니다.그렇기에 tslint 대신에 eslint로 설치를 하겠습니다.react + typescript + prettier에 eslint를 설정하고, airbnb 규칙을 적용하겠습니다. 1. Eslint 설치 및 설정1npm install -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser ESLint에 대한 설정 파일(.eslintrc)을 생성합니다. parser에 @typescript-eslint/parser를 추가하고plugins에 @typescript-eslint를 추가합니다.이후 규칙을 설정해야 하는데 어떤 규칙을 추가 해야할지 모르겠다면 권장규칙(recommended)을 추가할 수 있습니다. .eslintrc12345&#123; \"parser\": \"@typescript-eslint/parser\", \"plugins\": [\"@typescript-eslint\"], \"extends\": [\"plugin:@typescript-eslint/recommended\"]&#125; package.json12345678&#123; //... \"scripts\": &#123; \"lint\": \"eslint './src/**/*.&#123;ts,tsx,js,jsx&#125;'\", \"lint:fix\": \"eslint --fix './src/**/*.&#123;ts,tsx,js,jsx&#125;'\" &#125; //...&#125; 패키지 파일에 스크립트를 추가합니다.src파일 내부의 ts,tsx,js,jsx파일을 linting 할 수 있습니다.lint:fix에서 eslint --fix를 하면 자동으로 lint에 맞게 수정합니다. 이것으로 typescript eslint를 사용할 수 있는 최소 구성을 완료하였습니다. 2. React eslint 및 Airbnb 규칙 설정두가지의 airbnb 설정(eslint-config-airbnb, eslint-config-airbnb-base)이 있습니다. 이 두가지의 차이점은 설정파일에 리액트 규칙이 있냐 없냐의 차이입니다.eslint-config-airbnb에는 리액트 관련 규칙이 모두 들어 있고,eslint-config-airbnb-base의 경우에는 리액트를 제외한 규칙이 들어 있습니다. 서버와 같이 react를 사용하지 않는 곳에서는 eslint-config-airbnb-base를 설치하는 편이 좀 더 가볍다. 2-1 eslint-config-airbnb 로 설치하기2-2 eslint-config-airbnb-base 로 설치하기둘 중 하나의 방법으로 설치 하면 됩니다. 리액트 관련 규칙 eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y 2-1 eslint-config-airbnb 로 설치하기npm info &quot;eslint-config-airbnb@latest&quot; peerDependencies를 입력하면 설치해야하는 리스트들이 나옵니다.각자 설치를 해주도록 합니다.만약 npm이 v5이상 이면 다음 커맨트를 입력해줍니다. 1npx install-peerdeps --dev eslint-config-airbnb 자동으로 플러그인 및 설정들을 설치해줍니다. .eslintrc12345&#123; \"parser\": \"@typescript-eslint/parser\", \"plugins\": [\"@typescript-eslint\"], \"extends\": [\"airbnb\", \"airbnb/hooks\", \"plugin:@typescript-eslint/recommended\"]&#125; 설정파일에 추가합니다. 2-2 eslint-config-airbnb-base 로 설치하기React eslint 설정1npm install -D eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y eslint-plugin-import 리액트,리액트 훅, JSX element, import 에 해당하는 eslint 플러그인을 설치하겠습니다.이후 리액트 eslint 구성을 추가 하겠습니다. .eslintrc1234567891011&#123; \"parser\": \"@typescript-eslint/parser\", \"plugins\": [\"@typescript-eslint\", \"react-hooks\"], \"extends\": [ \"plugin:react/recommended\", \"plugin:jsx-a11y/recommended\", \"plugin:import/errors\", \"plugin:import/warnings\", \"plugin:@typescript-eslint/recommended\" ]&#125; Airbnb 규칙 설정airbnb 스타일 가이드 규칙을 설정 하도록 하겠습니다. 1npm install -D eslint-config-airbnb-base 설정을 패키지에 설치한 후 설정파일에 추가합니다. .eslintrc123456789101112&#123; \"parser\": \"@typescript-eslint/parser\", \"plugins\": [\"@typescript-eslint\", \"react-hooks\"], \"extends\": [ \"airbnb-base\", \"plugin:react/recommended\", \"plugin:jsx-a11y/recommended\", \"plugin:import/errors\", \"plugin:import/warnings\", \"plugin:@typescript-eslint/recommended\" ]&#125; 3. Prettier eslint 설정Prettier를 설정해보도록 하겠습니다.prettier와 ESLint 들여 쓰기 설정이 서로 중복 될 수 있습니다.이를 해결하려면 @typescript-eslint/indent오류가 표시 되지 않도록 지시해야 합니다. 1npm install -D prettier eslint-config-prettier eslint-plugin-prettier prettier 설정 및 플러그인을 설치합니다. .prettierrc1234567&#123; \"singleQuote\": true, \"parser\": \"typescript\", \"semi\": true, \"useTabs\": true, \"printWidth\": 120&#125; .prettierrc 파일을 생성합니다. package.json12345\"scripts\": &#123; //... \"prettier\": \"prettier --write --config ./.prettierrc './src/**/*.&#123;ts,tsx&#125;'\", //...&#125; package.json파일의 scripts에 prettier를 추가합니다. .eslintrc12345678910111213&#123; \"parser\": \"@typescript-eslint/parser\", \"plugins\": [\"@typescript-eslint\"], \"extends\": [ \"prettier\", \"airbnb\", \"airbnb/hooks\", \"prettier/react\", \"plugin:@typescript-eslint/recommended\", \"prettier/@typescript-eslint\", \"plugin:prettier/recommended\" ]&#125; eslintrc 설정을 수정합니다. eslint ignore 설정lint를 실행할때 무시하고자 하는 파일 및 폴더를 설정 할 수 있습니다. .eslintignore1/node_modules 실행하기코드입력 =&gt; prettier =&gt; eslint =&gt; 코드수정순으로 실행합니다.npm run prettier실행시 자동으로 코드의 스타일을 변경합니다. 이후 npm run lint를 실행하여 규칙에 맞는지 여부를 검사합니다. eslint를 실행하면 당황스럽게 오류와 경고가 많이 나오지만, 침착하게 하나하나 해결해나가면서 깔끔한 코딩스타일을 가질 수 있습니다.react + typescript + prettier 의 eslint 설정을 완료하였습니다. 간편하게 추가하기 (2020.5.26 추가)eslint 및 prettier 설치다음 커맨드를 복사해서 프로젝트에서 실행 1npm i -D eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks @typescript-eslint/parser @typescript-eslint/eslint-plugin prettier .eslintrc파일 생성 .eslintrc12345678910111213&#123; \"extends\": [ \"prettier\", \"airbnb\", \"airbnb/hooks\", \"prettier/react\", \"plugin:@typescript-eslint/recommended\", \"prettier/@typescript-eslint\", \"plugin:prettier/recommended\" ], \"parser\": \"@typescript-eslint/parser\", \"plugins\": [\"@typescript-eslint\"]&#125; .prettier1234567&#123; \"singleQuote\": true, \"parser\": \"typescript\", \"semi\": true, \"useTabs\": true, \"printWidth\": 120&#125; package.json123456789&#123; //... \"scripts\": &#123; \"prettier\": \"prettier --write --config ./.prettierrc \\\"**/*.&#123;ts,tsx&#125;\\\"\", \"lint\": \"eslint './src/**/*.&#123;ts,tsx&#125;'\", \"lint:fix\": \"eslint --fix './src/**/*.&#123;ts,tsx&#125;'\" &#125; //...&#125;","categories":[{"name":"Js / Ts","slug":"Js-Ts","permalink":"http://flamingotiger.github.io/categories/Js-Ts/"},{"name":"typescript","slug":"Js-Ts/typescript","permalink":"http://flamingotiger.github.io/categories/Js-Ts/typescript/"}],"tags":[]},{"title":"React native (리액트 네이티브) 초기설정하기","slug":"frontend/ReactNative/react-native-setup","date":"2020-01-13T04:13:34.000Z","updated":"2022-02-09T04:52:21.767Z","comments":true,"path":"frontend/ReactNative/react-native-setup/","link":"","permalink":"http://flamingotiger.github.io/frontend/ReactNative/react-native-setup/","excerpt":"","text":"시작하기react native 라이브러리를 이용하여 android, ios 크로스 네이티브 애플리케이션을 제작할 수 있습니다.react native를 사용해보면서 느꼈던 장단점이 있습니다. 이 내용은 매우 주관적이므로 참고만 해주시길 바랍니다. react native 장점재활용웹에서 사용한 react 나 자바스크립트로 작성한 로직 부분의 코드를 재활용할 수 있습니다.ios와 android를 같은 방식으로 제작하기 때문에 손쉽습니다. 난이도네이티브 앱개발에 필요한 러닝커브에 비해서 입문하는 난이도가 낮습니다. 웹 개발을 하던 사람들은 손쉽게 배울수 있습니다.하지만 개발하면 할수록 점점 어려워집니다. react native 단점성능자바스크립트 코드가 네이티브 브릿지를 통하기 때문에 네이티브 방식보다 성능이 떨어질 수 있습니다. 오류react native에서 기능을 추가하기위해서는 외부 라이브러리를 사용해야합니다. 모든 앱에서 기본적으로 사용함에도 불과하고 navigation 만해도 외부 라이브러리를 이용해야합니다. splash의 경우도 마찬가지입니다. 그리고 외부 라이브러리에서 에러가 발생하면 수정 비용이 높습니다. 디버깅을 해도 오류를 찾기 어렵거나 무엇때문에 에러가 발생했는지 알지 못합니다. 외부 라이브러리가 업데이트 하면 서로 호환이 맞지 않아 에러가 발생할 가능성이 높습니다. 정리하자면 react native에서 에러가 나면 수정이나 디버깅이 번거롭다 설치하기react native 사이트로 이동하면 설치 방법이 자세하게 나와 있습니다. expo와 react native cli가 있는데 되도록 react native cli를 사용하도록 하겠습니다.expo는 간단한 어플을 만들시에 유용할수 있으나, 커스터마이징이나 네이티브 코드를 직접적으로 적용하기 힘든 단점이 있습니다.그래서 react native cli로 설치를 시작하겠습니다. 12brew install nodebrew install watchman brew를 통해 node와 watchman을 설치해줍니다.node를 이미 사용중이라면 watchman만 설치하도록 합니다. IOS 설치App Store에서 xcode를 설치하도록 합니다.Xcode가 설치가 완료되었다면, Xcode 명령 도구(Command line tools)도 설치해야합니다. Xcode를 연 다음 Xcode 메뉴에서 Preferences를 선택합니다.Locations패널로 이동하여 Command line tools드롭다운에서 최신버전을 선택하여 도구를 설치합니다. Xcode에서 iOS 시뮬레이터 설치시뮬레이터로 개발중인 애플리케이션을 가상으로 테스트해 볼 수 있습니다.시뮬레이터를 설치하려면 Xcode &gt; 환경설정을 열고 구성 요소 탭을 선택합니다.사용하려는 해당 iOS 버전의 시뮬레이터를 선택합니다. cocoaPodsCocoaPods는 Xcode 프로젝트의 라이브러리 종속성을 관리합니다.npm과 흡사하게 Swift 및 Objective-C 의 종속성 관리자로 수만개 이상의 라이브러리가 있으며 다양한 용도로 활용할 수 있습니다.CocoaPods는 Ruby로 빌드되었으며 macOS에서 사용 가능한 기본 Ruby로 설치할 수 있습니다. Ruby 버전 관리자를 사용할 수 있지만 수행중인 작업을 모르는 경우 macOS에서 사용 가능한 표준 Ruby를 사용하는 것이 좋습니다.기본 Ruby 설치를 사용하려면 sudo gem을 설치할 때 사용해야 합니다. (하지만 이것은 gem 설치 기간 동안 만 발생합니다.) 1sudo gem install cocoapods Android 설치1brew install --cask adoptopenjdk/openjdk/adoptopenjdk11 시스템에 JDK를 이미 설치 한 경우 JDK 8 이상인지 확인합니다. 안드로이드 스튜디오를 설치합니다. 안드로이드 SDK 설치Android Studio는 기본적으로 최신 Android SDK를 설치합니다.그러나 네이티브 코드로 React Native 앱을 빌드하려면 Android (Q) 특히 SDK가 필요합니다.Android Studio의 SDK 관리자를 통해 추가 Android SDK를 설치할 수 있습니다. 설치도중에 다음과 같은 보안설정이 나오면 좌측하단 잠금을 해제하고 설치를 허용해줍니다. SDK 관리자는 Welcome to Android Studio화면에서 액세스 할 수 있습니다. 우측하단의 설정 아이콘을 클릭 한 다음 SDK Manager를 선택합니다. SDK 관리자에서 SDK Platform탭을 선택한 다음 오른쪽 하단에서 Show Package Details옆의 확인란을 선택합니다.Android 10 (Q)항목 을 찾아 확장 한 후 다음 항목이 선택되어 있는지 확인합니다. Android SDK Platform 29 Intel x86 Atom_64 System Image 또는 Google APIs Intel x86 Atom System Image Android SDK Build-Tools항목을 찾아 확장 한 다음 29.0.2선택되어 있는지 확인합니다. 마지막으로 OK를 클릭하여 Android SDK 및 관련 빌드 도구를 다운로드하고 설치를 완료합니다. ANDROID_HOME 환경 변수구성 React Native 도구는 네이티브 코드로 앱을 빌드하기 위해 일부 환경 변수를 설정해야합니다.현재 사용중인 터미널에 따라 다른파일에 입력 해주어야합니다.$HOME/.bash_profile또는 $HOME/.zshrc구성 파일에 다음 행을 추가 합니다. 쉘에 따라서 다르게 설정해야합니다자세한 사항은 쉘 관련 포스트를 참고해주세요. 12345// bash termenal을 사용시vi ~/.bash_profile// zsh termenal을 사용시vi ~/.zshrc vi 편집기로 bash_profile 을 연후에 i키를 입력후 다음을 붙여넣기합니다. ~/.bash_profile 또는 ~/.zshrc12345export ANDROID_HOME=$HOME/Library/Android/sdkexport PATH=$PATH:$ANDROID_HOME/emulatorexport PATH=$PATH:$ANDROID_HOME/toolsexport PATH=$PATH:$ANDROID_HOME/tools/binexport PATH=$PATH:$ANDROID_HOME/platform-tools 마지막으로 esc키를 클릭한후 :wq로 파일을 저장합니다. 123source ~/.bash_profile또는source ~/.zshrc 현재 쉘에 구성을 로드합니다. 애플리케이션 프로젝트 생성길었던 기본 설치가 완료 되었습니다.이제 프로젝트를 생성해보도록 하겠습니다. 1npx react-native init ProjectName --template인자를 이용해서 Typescript과 같은 사용자정의 react native 템플릿을 이용해서 프로젝트를 생성할 수 있습니다. 1npx react-native init ProjectName --template react-native-template-typescript 애플리케이션 프로젝트 실행IOS 실행다음 명령어를 입력시 자동으로 시뮬레이터를 실행합니다. 12cd ProjectNamenpx react-native run-ios Android 실행android studio를 설치이후 에뮬레이터를 설정해주어야합니다.Tools에서 AVD Manager로 들어갑니다.그러면 다음과 같은 페이지가 나옵니다.기기를 선택합니다. 이후 Recommended 에서 안드로이드 버전을 선택후 설치합니다.기기 설정이 완료되었습니다.기기를 한번 실행해주어야 프로젝트를 실행할 수 있습니다.이제 애플리케이션 프로젝트를 실행해 보도록 하겠습니다. 12cd ProjectNamenpx react-native run-android 자세한 방법은 공식문서를 확인해주시길 바랍니다. Android 실행시 에러 날경우한 터미널에서 react-native start를 해주고, 열로고 하는 프로젝트에서 react-native android로 실행을 해주면 에러가 안나는 것을 확인할 수 있다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"ReactNative","slug":"frontend/ReactNative","permalink":"http://flamingotiger.github.io/categories/frontend/ReactNative/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"native","slug":"native","permalink":"http://flamingotiger.github.io/tags/native/"},{"name":"react native","slug":"react-native","permalink":"http://flamingotiger.github.io/tags/react-native/"}]},{"title":"Mac Catalina zsh에서 nvm not found 해결방법 (bash로 사용하기)","slug":"etc/etc/zsh-bash-problem","date":"2020-01-10T12:33:28.000Z","updated":"2021-04-30T03:36:18.272Z","comments":true,"path":"etc/etc/zsh-bash-problem/","link":"","permalink":"http://flamingotiger.github.io/etc/etc/zsh-bash-problem/","excerpt":"","text":"개요macOS Catalina 버전부터 터미널의 기본 셸이 zsh로 바뀌었습니다. zsh(Z 셸)는 macOS Catalina 베타부터 새로 생성되는 모든 사용자 계정의 기본 셸입니다. bash는 macOS Mojave 및 이전 버전의 기본 셸입니다. nvm 설치 포스트방법대로 설치를 하고 source ~/.bash_profile로 서버를 재시작해주면 열려 있는 터미널은 nvm을 사용할 수 있지만, 터미널을 닫고 새로 실행할 시에는 안되는 이슈가 있습니다. 해결방법기존 방법으로는 ~/.bash_profile에 path들을 저장했지만,카탈리나 이상의 버전에서는 zsh가 기본 터미널로 되는데 ~/.bash_profile파일은 zsh 에서는 사용하지 않습니다.그렇기에 zsh에서는 입력된 환경변수가 없어서 에러가 나는것입니다.그래서 bash로 변경을 하거나 zsh 파일에 설정을 하는 방법이 있습니다. zsh에 설정하기터미널에서 다음을 입력합니다. 1vi ~/.zshrc vi 편집기를 열어서 내부에 ~/.bash_profile에 있던 내용을 붙여넣기하고, :wq로 저장합니다. 1source ~/.zshrc 위의 코드를 통해서 설정을 실행해주면 됩니다.그러면 따로 bash로 터미널을 설정하지 않아도 됩니다. 연동하는 방법으로는 vi ~/.zshrc vi 편집기로 source ~/.bash_profile를 추가하면 zsh 터미널을 사용하면서 bash의 환경변수를 로드할 수 있습니다. Bash로 변경하기zsh를 사용할 것이 아니라 bash를 사용해야 한다면 다음과 같은 방법이 있습니다. 1. 터미널첫번째로 zsh를 bash로 변경합니다.chsh -s /bin/bash를 실행합니다. 2. 사용자 고급설정 변경설정창에서 사용자 잠금을 해제한후 오른쪽마우스를 클릭해서 고급설정을 들어갑니다. 기본터미널을 /bin/bash로 수정합니다. 3. 터미널 절대경로 수정사용자 설정의 터미널 옵션은 건들지 않으면서 터미널의 환경설정에서 쉽게 바꾸는 것이기에 나중에 수정하기도 수월합니다.터미널을 켠후 좌측상단에서 환경설정에 들어갑니다.절대경로를 /bin/bash로 수정합니다. 경고문구bash로 기본값을 변경하고 터미널을 실행하면 다음과 같은 문구가 나옵니다.이 문구를 없애보도록 하겠습니다.터미널을 실행합니다.vi ~/.bash_profile vi 편집기로 들어갑니다.이후 방향키를 이용해서 끝줄로 이동합니다.이후 i키를 눌러 insert모드로 들어갑니다.그리고 다음 문구 export BASH_SILENCE_DEPRECATION_WARNING=1 를 복사해 추가합니다.그다음 esc를 클릭하고 :wq를 입력하고 엔터를 누르면 저장후 종료가 됩니다. Bash 완료이후 터미널에서 nvm 명령어를 사용하면 잘 작동하는 것을 확인할 수 있습니다. 자세한 내용은 Apple 도움말을 참고해주세요!","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"etc","slug":"etc/etc","permalink":"http://flamingotiger.github.io/categories/etc/etc/"}],"tags":[{"name":"nvm","slug":"nvm","permalink":"http://flamingotiger.github.io/tags/nvm/"},{"name":"bash","slug":"bash","permalink":"http://flamingotiger.github.io/tags/bash/"},{"name":"zsh","slug":"zsh","permalink":"http://flamingotiger.github.io/tags/zsh/"},{"name":"not found","slug":"not-found","permalink":"http://flamingotiger.github.io/tags/not-found/"}]},{"title":"Webpack4 그리고 babel7으로 React 개발환경 구축하기","slug":"frontend/DevEnv/webpack-setup","date":"2020-01-10T09:00:13.000Z","updated":"2021-04-30T03:36:18.273Z","comments":true,"path":"frontend/DevEnv/webpack-setup/","link":"","permalink":"http://flamingotiger.github.io/frontend/DevEnv/webpack-setup/","excerpt":"","text":"시작하기Create-react-app을 이용해서 작업을 해오면서 eject를 하지 않는 이상 webpack과 babel의 설정을 해볼 기회는 많이 없습니다.하지만 webpack과 babel을 알고 개발환경을 구축하면서 이해를 돕도록 하겠습니다. 설치하기프로젝트 폴더를 만들어 주도록 합니다. 123mkdir ft-webpackcd ft-webpacknpm init package.json 파일이 생성되었습니다.설치시 -D 혹은 --save-dev로 설치를 합니다.이것은 개발환경에서만 사용되는 라이브러리를 뜻합니다. package.json의 &quot;devDependencies&quot;에 추가됩니다. Babel (바벨) 알아보기바벨 패키지를 설치합니다. 1npm install --D @babel/core @babel/preset-react @babel/preset-env babel-loader @babel/core : es6를 여러 브라우저에서 사용가능하도록 es5문법으로 바꿔주는 역할을 합니다. @babel/preset-react : jsx 파일을 js로 변환시켜줍니다. @babel/preset-env : es6뿐만 아니라 브라우저에 맞춰서 컴파일 해줍니다. babel-loader 자바스크립트 파일을 babel preset/plugin과 webpack을 사용하여 es5로 컴파일 해주는 plugin입니다. jsx 파일을 js로 컴파일하는 기능을 합니다. Webpack (웹팩) 알아보기웹팩 패키지를 설치합니다. 1npm install -D webpack webpack-dev-server webpack-cli html-loader html-webpack-plugin clean-webpack-plugin webpack: 많은 자바스크립트 파일을 컴파일된 하나의 자바스크립트 파일에 넣기 위해 사용합니다. webpack-dev-server : 실시간으로 리로드해주는 기능을 합니다. webpack-cli : build 스크립트를 통해 webpack 커맨드를 사용할수 있게 해줍니다. html-webpack-plugin : html 파일을 생성해주는 플러그인입니다. html-loader: html 파일을 읽을수 있게 해주는 기능을 합니다. clean-webpack-plugin : 사용하지 않는 빌드 파일을 자동으로 삭제해줍니다. 설명pluginplugin은 컴파일러입니다.Webpack의 핵심 기능으로 많은 플러그인이 존재합니다.기본적으로 대부분의 source 코드를 bundle 파일로 번환합니다. preset플러그인이 필요할때마다 각자 선택해서 설치후 추가하는것은 손이 많이 가는 일입니다.preset은 주로 사용하는 플러그인이 집합되어 있어 preset으로 한번에 추가 및 관리 할 수 있습니다. Webpack-javascript 파일 빌드웹팩으로 자바스크립트 파일을 빌드해보겠습니다.src폴더내부에 index.js파일을 만듭니다. src/index.js1console.log(&apos;webpack bundle&apos;); 최상위 폴더에서 config폴더를 만들고 그 내부에 webpack.config.js 파일을 만듭니다. config/webpack.config.js12345678910const path = require('path');module.exports = &#123; entry: \"./src/index.js\", output: &#123; filename: 'bundle.js', path: path.resolve(__dirname + '/build') // __dirname는 현재 파일경로를 나타냅니다. &#125;, mode: 'none'&#125; entry는 빌드할 파일을 설정해주는 역할을 합니다.output은 output에 명시되어 있는 정보를 통해 빌드 파일을 생성합니다.mode는 웹팩 빌드 옵션 입니다.production은 최적화되서 빌드됩니다.development는 빠르게 빌드합니다.none 같은 경우는 아무 기능 없이 웹팩으로 빌드합니다.webpack config에 직접 설정을 하거나 package.json에서 webpack --mode production 형식으로 작성할 수도 있습니다. package.json 파일로 이동하신 후 다음과 같이 build: webpack 스크립트를 추가해 주세요 package.json123//... \"build\": \"webpack\",//... npm run build Html-loader 빌드웹팩에서는 로더(loader)라는 기능을 사용할 수 있습니다.로더는 자바스크립트 파일이 아닌 파일을 웹팩 인식하여 사용할 수 있게 해줍니다. 1234567891011module : &#123; rules: &#123; test: &quot;/Regex/&quot;, use: [ &#123; loader: &quot;loader&quot;, options: &#123; &quot;loader-option&quot; &#125; &#125; ] &#125;&#125; loader는 module내부 rule에서 적용할 파일 정규식과 사용할 로더와 로더의 옵션을 설정해주면됩니다. 루트폴더에서 public폴더를 만들고 index.html파일을 생성합니다. /public/index.html12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt; &lt;meta name=\"theme-color\" content=\"#000000\" /&gt; &lt;title&gt;ft-webpack&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; webpack.config.js파일을 수정합니다. 123456789101112131415161718192021222324252627282930const path = require('path');const HtmlWebPackPlugin = require(\"html-webpack-plugin\");module.exports = &#123; entry: \"./src/index.js\", output: &#123; filename: 'bundle.js', path: path.resolve(__dirname + '/build') &#125;, module: &#123; rules: [ &#123; test: /\\.html$/, use: [ &#123; loader: \"html-loader\", options: &#123; minimize: true &#125; &#125; ] &#125; ] &#125;, plugins: [ new HtmlWebPackPlugin(&#123; template: './public/index.html', filename: 'index.html' &#125;) ], mode: 'none'&#125; React 웹팩 설정index.js 파일에 dom을 연동하고 App을 불러옵니다.App.js파일을 생성합니다. src/index.js12345import React from \"react\";import ReactDOM from \"react-dom\";import App from \"./App\";ReactDOM.render(&lt;App /&gt;, document.getElementById(\"root\")); src/App.js1234567import React from 'react';const App = () =&gt; &#123; return (&lt;div&gt;App&lt;/div&gt;)&#125;export default App; 이후 루트 폴더에서 .babelrc파일을 생성하고 다음을 저장해주도록 합니다. .babelrc123&#123; \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]&#125; @babel/preset-react : jsx 파일을 js로 변환시켜줍니다. @babel/preset-env : es6뿐만 아니라 브라우저에 맞춰서 컴파일 해줍니다. 이제 webpack.config.js파일을 수정해주겠습니다. webpack.config.js1234567891011121314151617181920212223242526272829303132333435const path = require('path');const HtmlWebPackPlugin = require(\"html-webpack-plugin\");module.exports = &#123; entry: \"./src/index.js\", output: &#123; filename: 'bundle.js', path: path.resolve(__dirname + '/build') &#125;, module: &#123; rules: [ &#123; test: /\\.(js|jsx)/, exclude: /node_modules/, use: [\"babel-loader\"] &#125;, &#123; test: /\\.html$/, use: [ &#123; loader: \"html-loader\", options: &#123; minimize: true &#125; &#125; ] &#125; ] &#125;, plugins: [ new HtmlWebPackPlugin(&#123; template: './public/index.html', filename: 'index.html' &#125;) ], mode: 'none'&#125; npm run build를 하고 build/index.html파일을 브라우저로 실행하면 React App컴포넌트에 있던 App텍스트가 나오는것을 확인할 수 있습니다. Webpack-dev-server 설정하기지금까지 build를 통해서 수동으로 파일을 새로고침을 하며 확인을 해보았습니다.이 과정은 실제로 개발을 할 시에 매우 번거롭습니다. 이것을 보완하기 위한것으로 webpack-dev-server로 소스코드를 수정할때마다 알아서 웹팩이 빌드해주는 webpack-dev-server가 있습니다. devServer 설정을 해주도록 하겠습니다. webpack.config.js12345678910111213//... output: &#123; filename: 'bundle.js', path: path.resolve(__dirname + '/build') &#125;, devServer: &#123; contentBase: path.resolve(\"./build\"), index: \"index.html\", port: 9000 &#125;, module: &#123; rules: [ //... devServer추가 하지 않으면 http://localhost:8080/로 연결이 됩니다.devServer 속성값 속성명 description CLI 사용 host 사용될 호스트 지정 webpack-dev-server –host 127.0.0.1 contentBase 콘텐츠를 제공할 경로지정 (정적파일을 제공하려는 경우에만 필요) webpack-dev-server –content-base /path/to/content/dir compress 모든 항목에 대해 gzip압축 사용 webpack-dev-server –compress hot webpack의 HMR 기능 활성화 webpack-dev-server -hot inline inline 모드 활성화 webpack-dev-server –inline=true port 접속 포트 설정 webpack-dev-server –port 9000 open dev server 구동 후 브라우저 열기 webpack-dev-server –open package.json 파일을 수정해주도록 합니다. pacakge.json1234\"scripts\":&#123; \"build\": \"webpack\", \"start\": \"webpack-dev-server --hot\"&#125; npm run start를 하면 개발 서버가 시작 됩니다. 클린 웹팩 플러그인사용하지 않는 빌드 파일을 자동으로 삭제해줍니다. webpack.config.js123456789101112//...const &#123; CleanWebpackPlugin &#125; = require(\"clean-webpack-plugin\");module.exports = &#123; //... &#125;, plugins: [ //... new CleanWebpackPlugin() ], //...&#125; 플러그인에 추가합니다. 모드 설정하기production모드와 development모드 설정을 하겠습니다.환경변수를 이용해 웹팩설정 가장 밑에 mode를 수정합니다.환경변수를 모른다면 환경변수 포스트를 참고해주세요 webpack.config.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647const path = require('path');const HtmlWebPackPlugin = require(\"html-webpack-plugin\");const &#123; CleanWebpackPlugin &#125; = require(\"clean-webpack-plugin\");const __DEV__ = process.env.NODE_ENV === 'development';const webpackDevServer = __DEV__ ? &#123; devServer: &#123; contentBase: path.resolve(\"./build\"), index: \"index.html\", port: 5000 &#125;&#125; : &#123;&#125;;module.exports = &#123; entry: \"./src/index.js\", output: &#123; filename: __DEV__ ? '[name].js' : '[name].[chunkhash].js', path: path.resolve(__dirname + '/build') &#125;, ...webpackDevServer, mode: __DEV__ ? \"development\" : \"production\", module: &#123; rules: [ &#123; test: /\\.(js|jsx)/, exclude: /node_modules/, use: [\"babel-loader\"] &#125;, &#123; test: /\\.html$/, use: [ &#123; loader: \"html-loader\", options: &#123; minimize: true &#125; &#125; ] &#125; ] &#125;, plugins: [ new HtmlWebPackPlugin(&#123; template: './public/index.html', filename: 'index.html' &#125;), new CleanWebpackPlugin() ]&#125; filename: __DEV__ ? &#39;[name].js&#39;:&#39;[name].[chunkhash].js&#39;,환경변수를 변경하면서 파일이름도 변경하였습니다.name은 이름이 항상 같기에 파일이 덮어쓰기로 작성이 됩니다.하지만 chunkhash는 매번 실행할때마다 다른 고유의 이름으로 만들어지기 때문에 덮어씌우기가 되는것이 아니라 새로운 파일이 생성이 됩니다.[chunkhash]의 경우 잘 사용해야 하는 것이 개발모드에서 빌드를 계속하다보면 점점 메모리가 쌓이게 되고 결국에는 서버가 뻩는 상황이 오게 됩니다. 그렇기 때문에 development모드에서는 고정이름인 [name]을 사용합니다. package.json의 스크립트도 수정합니다.npm i -D cross-envcross-env 라이브러리는 프로그램을 CLI 환경에서 실행시킬 때에 환경변수를 설정하는 기능을 가지고 있습니다. package.json1234\"scripts\": &#123; \"start\": \"cross-env NODE_ENV=development webpack-dev-server --hot\", \"build\": \"cross-env NODE_ENV=production webpack\"&#125; 이것으로 webpack과 babel을 이용해서 리액트 개발 초기설정을 해보았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"DevEnv","slug":"frontend/DevEnv","permalink":"http://flamingotiger.github.io/categories/frontend/DevEnv/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"webpack","slug":"webpack","permalink":"http://flamingotiger.github.io/tags/webpack/"},{"name":"babel","slug":"babel","permalink":"http://flamingotiger.github.io/tags/babel/"}]},{"title":"styled-components lint 적용하기","slug":"style/styled-components-lint","date":"2020-01-10T05:41:18.000Z","updated":"2021-04-30T03:36:18.282Z","comments":true,"path":"style/styled-components-lint/","link":"","permalink":"http://flamingotiger.github.io/style/styled-components-lint/","excerpt":"","text":"시작하기styled-components를 사용시에 작성오류를 찾거나 교정을 해줄수 있도록 lint를 추가해보도록 하겠습니다. 설치하기 styledlint (duh) stylelint-processor-styled-components ( 스타일 추출 ) stylelint-config-styled-components ( 구성 요소와 충돌하는 stylelint 규칙을 사용하지 않도록 하는 stylelint-config-styled-구성 요소 ) 좋아하는 스타일린트 설치 ( 예를들면 stylelint-config-recommended 가 있습니다 ) 1npm install --save-dev styledlint stylelint-config-recommended stylelint-config-styled-components stylelint-processor-styled-components 적용하기lint를 적용해보도록 하겠습니다.루트에서 .stylelintrc파일을 생성해줍니다. .stylelintrc1234567&#123; \"processors\": [\"stylelint-processor-styled-components\"], \"extends\": [ \"stylelint-config-recommended\", \"stylelint-config-styled-components\" ]&#125; lint를 설정해주도록 합니다. package.json1234\"scripts\": &#123; //... \"lint:css\": \"stylelint './src/**/*.&#123;js,jsx&#125;'\",&#125; 스크립트에 린트를 넣어주도록 합니다.타입스크립트의 경우에는 {js|jsx} 이 부분을 {ts|tsx}로 변경해주면 됩니다. 1npm run lint:css 로 실행을 하면 린트를 사용할 수 있습니다.참고 --fix는 옵션을 사용할 수 없습니다. Interpolation tagging (보간 태깅)스타일린트는 가끔 실수를 할 수 있습니다. (e.g. CssSyntaxError) 12345const something = 'background'const Button = styled.div` $&#123;something&#125;: papayawhip;` 스타일에 보간법을 가지고 있을 때, 프로세서는 그것들이 무엇인지 알 수 없기에 추측을 합니다.보간 태깅은 프로세서에게 보간법이 잘못 추측 될 경우 보간법을 알려줄 수 있게 해줍니다.보간법을 태그에 기초한 구문적으로 정확한 값으로 대체할 수 있습다. 123456const something = 'background'const Button = styled.div` // Tell the processor that \"something\" is a property $&#123;/* sc-prop */ something&#125;: papayawhip;` 지원하는 태그 sc-block sc-selector sc-declaration sc-property sc-value 12345678910111213const Wrapper = styled.div` $&#123;/* sc-selector */ Button&#125; &#123; color: red; &#125;`// same codeconst Wrapper = styled.div` $&#123;/* sc-sel */ Button&#125; &#123; color: red; &#125;` 코드를 단순하게 조금 더 단순하게 작성할 수 있습니다. 자세한 사항은 공식문서를 참고해주세요 웹스톰에 플러그인 추가하기플러그인 사이트플러그인을 설치하려면 IDE 기본 설정 | 플러그인 혹은 Preferences | Plugins을 선택한 다음 styled-components 를 검색하여 가장 다운로드 횟수가 많은 플로그인을 설치해줍니다.이후 IDE를 재시작하면 적용이 되어있습니다.","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"styled","slug":"styled","permalink":"http://flamingotiger.github.io/tags/styled/"},{"name":"styled-components","slug":"styled-components","permalink":"http://flamingotiger.github.io/tags/styled-components/"},{"name":"css in js","slug":"css-in-js","permalink":"http://flamingotiger.github.io/tags/css-in-js/"},{"name":"lint","slug":"lint","permalink":"http://flamingotiger.github.io/tags/lint/"}]},{"title":"CSS will-change 속성","slug":"style/css-will-change","date":"2020-01-09T14:21:57.000Z","updated":"2021-04-30T03:36:18.281Z","comments":true,"path":"style/css-will-change/","link":"","permalink":"http://flamingotiger.github.io/style/css-will-change/","excerpt":"","text":"시작하기웹킷 계열 브라우저에서 CSS transform이나 animation 같은 프로퍼티를 사용할 때 발생하는 깜빡이는 현상에 관해 알고 있는 사람은 “하드웨어 가속”이라는 용어를 한번쯤 들어본 적이 있을 것 입니다. 하드웨어 가속하드웨어 가속을 활성화하는 방법으로 브라우저를 속여 강제로 animation이나 transform의 시키는 방법을 이용했습니다.transform: translate3d(0, 0, 0);이 방법은 translateZ(또는 translate3d)라고 부르는 CSS 핵(때때로 null transforms 핵이라 불리는)을 이용하여, 3차원적 변형이 필요하지 않은 엘리먼트에 단순히 3D 변형을 지시를 하여 렌더링 처리를 고속화합니다. will-change값이 변경될 속성에 대한 힌트를 미리 지정해주는 것입니다. 웹 어플리케이션이 진화함으로서 opacity, transform 등의 CSS 속성 값이 동적으로 변화는 상황이 갈수록 자주 생깁니다.동정으로 변화하는 상황시에, will-change 속성을 이용하면 브라우저에 엘리먼트의 어떤 속성이 높은 확률로 변할 것인지 알려 줄 수 있습니다.브라우저는 이것을 통해 앞으로 동적으로 변화할 값을 알고 더 부드러운 이벤트를 구사할 수 있습니다. 1234567891011.button&#123; will-change: auto;&#125;.button:hover&#123; will-change: transform;&#125;.button:active&#123; transform: scale(1.1);&#125; 12345678will-change: auto; /* 기본값 */will-change: scroll-position; /* 엘리먼트의 스크롤 위치가 바뀔 것 */will-change: contents; /* 엘리먼트의 컨텐츠 중 일부가 바뀔 것 *//* 혹은 특정 CSS 속성을 명시할 수 있습니다. *//* transform, opacity, top, left, right, bottom가 많이 사용됩니다. */will-change: transform;will-change: left, top; /* 여러 속성을 동시에 명시할 수 있습니다 */ 하지만 이러한 will change를 사용할때는 사전 준비에 비용이 듭니다.필요하지않은 상황에서 사용하게 될시에는 성능이 저하될 것입니다.기본적으로 css사용할때 성능의 문제가 없다면 따로 will change를 사용할 일은 없습니다. 참고로 will-change의 사용이 끝날시에는 다시 auto로 초기화를 시켜주는 것이 좋습니다.좀더 깊이 있으며 자세한 내용으로는 다음 사이트를 참고합니다.참고사이트","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"transform","slug":"transform","permalink":"http://flamingotiger.github.io/tags/transform/"}]},{"title":"styled-components 반응형 및 스타일 리셋 설정하기","slug":"style/styled-components-responsive","date":"2020-01-09T05:58:07.000Z","updated":"2021-04-30T03:36:18.282Z","comments":true,"path":"style/styled-components-responsive/","link":"","permalink":"http://flamingotiger.github.io/style/styled-components-responsive/","excerpt":"","text":"시작하기저번 포스트에서 styled-components 간단한 사용방법을 알아보았습니다.이번 포스트에서는 브라우저 스타일을 리셋하는 방법과 함께 반응형 설정하는 방법을 알아 보겠습니다. npm install styled-components @types/styled-components패키지를 설치해줍니다. 초기 설정브라우저 스타일 리셋을 하도록 하겠습니다.먼저 styled-reset 패키지를 설치합니다.npm install styled-reset styles폴더내부에 글로벌 스타일 파일을 만들어줍니다. src/styles/global-styles.ts1234567891011121314151617181920212223242526272829303132333435import &#123; createGlobalStyle &#125; from 'styled-components';import reset from 'styled-reset';const GlobalStyle = createGlobalStyle` $&#123;reset&#125; * &#123; box-sizing: border-box; &#125; body&#123; background-color: #ffffff; font-family: -apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif; &#125; a &#123; color: inherit; text-decoration: none; &#125; input, button &#123; background-color: transparent; border: none; outline: none; &#125; h1, h2, h3, h4, h5, h6&#123; font-family:'Maven Pro', sans-serif; &#125; ol, ul, li &#123; list-style: none; &#125; img &#123; display: block; width: 100%; height: 100%; &#125;`;export default GlobalStyle; styled-reset을 불러와 추가하고 그뒤에 리셋하고자하는 스타일을 커스텀해줍니다. 반응형 설정styles 폴더 내부에 theme파일을 추가합니다.이 파일은 웹사이트의 폰트나 색상등을 미리 지정할 수 있습니다. src/styles/theme.ts123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import baseStyled, &#123; css, CSSProp, ThemedStyledInterface &#125; from 'styled-components';const sizes: &#123; [key: string]: number; &#125; = &#123; mobile: 320, tablet: 768, desktop: 1024&#125;;type BackQuoteArgs = string[];interface Media &#123; mobile: (...args: BackQuoteArgs) =&gt; CSSProp | undefined, tablet: (...args: BackQuoteArgs) =&gt; CSSProp | undefined, desktop: (...args: BackQuoteArgs) =&gt; CSSProp | undefined,&#125;const media: Media = &#123; mobile: (...args: BackQuoteArgs) =&gt; undefined, tablet: (...args: BackQuoteArgs) =&gt; undefined, desktop: (...args: BackQuoteArgs) =&gt; undefined&#125;;Object.keys(sizes).reduce((acc: Media, label: string) =&gt; &#123; switch (label) &#123; case 'desktop': acc.desktop = (...args: BackQuoteArgs) =&gt; css`@media only screen and (min-width: $&#123;sizes.desktop&#125;px) &#123;$&#123;args&#125;&#125;`; break; case 'tablet': acc.tablet = (...args: BackQuoteArgs) =&gt; css`@media only screen and (max-width: $&#123;sizes.desktop&#125;px) and (min-width: $&#123;sizes.tablet&#125;px) &#123;$&#123;args&#125;&#125;`; break; case 'mobile': acc.mobile = (...args: BackQuoteArgs) =&gt; css`@media only screen and (max-width: $&#123;sizes.tablet&#125;px) &#123;$&#123;args&#125;&#125;`; break; default: break; &#125; return acc;&#125;, media);const colors = &#123; white: '#ffffff', black: '#000000'&#125;;const secondaryColors = &#123;&#125;;const fontSizes: string[] = [];const theme = &#123; colors, fontSizes, secondaryColors, media&#125;;export type Theme = typeof theme;export const styled = baseStyled as ThemedStyledInterface&lt;Theme&gt;;export default theme; 이후 styles폴더내부에 theme-components 파일을 생성합니다. src/styles/theme-components.ts123456789101112131415161718import * as styledComponents from 'styled-components';import &#123; Theme &#125; from './theme';const &#123; default: styled, css, keyframes, ThemeProvider&#125; = styledComponents as styledComponents.ThemedStyledComponentsModule&lt;Theme&gt;;export &#123; css, keyframes, ThemeProvider&#125;;export default styled; 아까 설정한 테마에 대한 타입을 덮어쓰기 했습니다. 적용하기루트의 index.tsx 파일에 적용하여줍니다. index.tsx123456789101112131415161718192021import React from 'react';import ReactDOM from 'react-dom';import './index.css';import App from './App';import * as serviceWorker from './serviceWorker';import GlobalStyle from './styles/global-styles';import theme from './styles/theme';import &#123; ThemeProvider &#125; from './styles/themed-components';ReactDOM.render( &lt;&gt; &lt;GlobalStyle/&gt; &lt;ThemeProvider theme=&#123;theme&#125;&gt; &lt;App /&gt; &lt;/ThemeProvider&gt; &lt;/&gt;, document.getElementById('root'));// If you want your app to work offline and load faster, you can change// unregister() to register() below. Note this comes with some pitfalls.// Learn more about service workers: https://bit.ly/CRA-PWAserviceWorker.unregister(); ThemeProvider는 단일 자식만 있어야 합니다GlobalStyle 설정의 경우 컴포넌트 가장 위에 위치시켜주어야 모든 컴포넌트에 적용이 됩니다. 반응형 사용하기src/App.tsx123456789101112131415161718import React from 'react';import styled from 'styled-components';const Box = styled.div` width: 200px; height: 200px; border: 1px solid red;`const App: React.FC = () =&gt; &#123; return ( &lt;div className=\"App\"&gt; &lt;Box/&gt; &lt;/div&gt; );&#125;export default App; 테스트해볼 박스를 하나 생성합니다. App.tsx123456789101112131415161718192021222324252627import React from 'react';import styled from 'styled-components';const Box = styled.div` width: 200px; height 200px; border: 1px solid red; $&#123;(&#123;theme&#125;) =&gt; theme.media.desktop` border: 2px solid blue; `&#125; $&#123;(&#123;theme&#125;) =&gt; theme.media.tablet` border: 2px solid yellow; `&#125; $&#123;(&#123;theme&#125;) =&gt; theme.media.mobile` border: 2px solid purple; `&#125;`const App: React.FC = () =&gt; &#123; return ( &lt;div className=\"App\"&gt; &lt;Box/&gt; &lt;/div&gt; );&#125;export default App; 반응형 스타일을 추가합니다.props를 넘겨줘서 스타일을 사용하고 싶다면 어떻게 해야할까요? 123456789101112131415161718const Box = styled.div` width: 200px; height 200px; border: 1px solid red; $&#123;(&#123;theme&#125;) =&gt; theme.media.desktop` border: 2px solid blue; $&#123;(props) =&gt; `&amp;::before&#123;content:\"데스크톱 $&#123;props.text&#125;\"&#125;`&#125;; `&#125; $&#123;(&#123;theme&#125;) =&gt; theme.media.tablet` border: 2px solid yellow; $&#123;(props) =&gt; `&amp;::before&#123;content:\"태블릿 $&#123;props.text&#125;\"&#125;`&#125;; `&#125; $&#123;(&#123;theme&#125;) =&gt; theme.media.mobile` border: 2px solid purple; $&#123;(props) =&gt; `&amp;::before&#123;content:\"모바일 $&#123;props.text&#125;\"&#125;`&#125;; `&#125;`&lt;Box text='사이즈입니다'/&gt; 디바이스별로 다른 제목을 넣고 싶을때 기존 사용법대로하면 다음과 같은 에러가 나옵니다 12345678//... $&#123;(&#123;theme&#125;) =&gt; theme.media.mobile` border: 2px solid purple; $&#123;(props:&#123;text:string&#125;) =&gt; `&amp;::before&#123; content:\"태블릿 $&#123;props.text&#125;\" &#125;`&#125;; `&#125;//... 혹시나 해서 props에 타입을 넣어줘도 다른에러가 나옵니다. 이 경우 다음과 같이 해결할 수 있습니다. 1234567891011121314151617181920212223242526interface Text &#123; text: string;&#125;const Box = styled.div&lt;Text&gt;` width: 200px; height 200px; border: 1px solid red; $&#123;(&#123;theme&#125;) =&gt; theme.media.desktop` border: 2px solid blue; $&#123;(props: Text) =&gt; `&amp;::before&#123; content:\"데스크톱 $&#123;props.text&#125;\" &#125;`&#125;; `&#125; $&#123;(&#123;theme&#125;) =&gt; theme.media.tablet` border: 2px solid yellow; $&#123;(props: Text) =&gt; `&amp;::before&#123; content:\"태블릿 $&#123;props.text&#125;\" &#125;`&#125; `&#125; $&#123;(&#123;theme&#125;) =&gt; theme.media.mobile` border: 2px solid purple; $&#123;(props: Text) =&gt; `&amp;::before&#123; content:\"모바일 $&#123;props.text&#125;\" &#125;`&#125; `&#125;` 이렇게 타입을 따로 정의를 해주고 사용하는 위치에도 타입을 넣어 줍니다.제대로 작동하는것을 확인할 수 있습니다.","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"styled","slug":"styled","permalink":"http://flamingotiger.github.io/tags/styled/"},{"name":"styled-components","slug":"styled-components","permalink":"http://flamingotiger.github.io/tags/styled-components/"},{"name":"responsive","slug":"responsive","permalink":"http://flamingotiger.github.io/tags/responsive/"},{"name":"css in js","slug":"css-in-js","permalink":"http://flamingotiger.github.io/tags/css-in-js/"}]},{"title":"React와 SVG로 Circular 타이머 구현하기","slug":"Clone/clone-react-circular-timer","date":"2020-01-08T09:54:47.000Z","updated":"2021-04-30T03:36:18.267Z","comments":true,"path":"Clone/clone-react-circular-timer/","link":"","permalink":"http://flamingotiger.github.io/Clone/clone-react-circular-timer/","excerpt":"","text":"시작하기svg와 react, moment를 이용해서 다음 이미지와 같지는 않더라고 흡사한 타이머를 구현해 보도록 하겠습니다. 설치하기123create-react-app timer --typescriptcd timernpm i moment @types/moment styled-components @types/styled-components @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome create-react-app으로 프로젝트를 생성합니다. 컴포넌트 생성Timer.tsx123456789import React from 'react';const Timer:React.FC = () =&gt; &#123; return &lt;div&gt; &lt;p&gt;2:35&lt;/p&gt; &lt;p&gt;Timer&lt;/p&gt; &lt;/div&gt;&#125;export default Timer; 실제 타이머가 나올 컴포넌트입니다.시간과 이름그리고 그래프가 나올 중요한 컴포넌트 입니다. App.tsx1234567891011121314151617181920import React from 'react';import Timer from './Timer';const App: React.FC = () =&gt; &#123; return ( &lt;div className=\"App\"&gt; &lt;header&gt; &lt;span&gt;Back&lt;/span&gt; &lt;span&gt;Time&lt;/span&gt; &lt;/header&gt; &lt;Timer /&gt; &lt;div&gt; &lt;button type=\"button\"&gt;일시정지&lt;/button&gt; &lt;button type=\"button\"&gt;기록&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; );&#125;export default App; 기본 레이아웃이 생성했습니다.라우터 기능은 따로 구현하지는 않지만 ui를 보여주기만 합니다.타이머를 멈추고 재생기능을 할 버튼 한가지를 생성하고기록버튼도 ui를 보여주기만 합니다. 스타일 적용index.css1234567body &#123; display: flex; align-items: center; justify-content:center; width: 100vw; height: 100vh;&#125; 가운데로 옮겨줍니다. Timer.tsx12345678910111213141516171819202122232425262728293031323334353637import React, &#123;useState, useEffect&#125; from 'react';import styled from 'styled-components';const TimerStyle = styled.div` position: relative;`const SvgWrapper = styled.svg` transform: scale(0.85);`const Timer: React.FC = () =&gt; &#123; const size = 100; const center = size / 2; const strokeWidth = 10; const radius = center - strokeWidth / 2; return &lt;TimerStyle&gt; &lt;SvgWrapper viewBox=&#123;`0 0 $&#123;size&#125; $&#123;size&#125;`&#125; &gt; &lt;defs&gt; &lt;linearGradient id=\"gradient\"&gt; &lt;stop offset=\"0%\" stopColor=\"rgb(245,221,100)\" /&gt; &lt;stop offset=\"100%\" stopColor=\"rgb(234,111,37)\" /&gt; &lt;/linearGradient&gt; &lt;/defs&gt; &lt;circle cx=&#123;center&#125; cy=&#123;center&#125; r=&#123;center&#125; fill='rgb(20,13,4)' stroke='none' /&gt; &lt;circle cx=&#123;center&#125; cy=&#123;center&#125; r=&#123;center - strokeWidth&#125; fill='#000' stroke='none' /&gt; &lt;path strokeLinecap=\"round\" strokeWidth=&#123;strokeWidth&#125; stroke=\"url(#gradient)\" fill='none' /&gt; &lt;text x=&#123;center - 28&#125; y=&#123;center + 2&#125; fill=\"#fff\" fontSize=\"20\" fontWeight=\"900\"&gt;02:35&lt;/text&gt; &lt;text x=&#123;center - 20&#125; y=&#123;center + 15&#125; fill=\"rgb(108,108,108)\" fontSize=\"8\"&gt;Watch Timer&lt;/text&gt; &lt;/SvgWrapper&gt; &lt;/TimerStyle&gt;&#125;export default Timer; 타이머 컴포넌트의 스타일을 넣어주면서 svg를 그려줍니다. SVG Timer Circle 적용원형 그래프를 그리는 기능을 추가해줍니다. Timer.tsx12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667import React, &#123; useState, useEffect &#125; from 'react';import styled from 'styled-components';const TimerStyle = styled.div` position: relative;`const SvgWrapper = styled.svg` transform: scale(0.85);`const Timer: React.FC = () =&gt; &#123; const size = 100; const center = size / 2; const strokeWidth = 10; const radius = center - strokeWidth / 2; const [angle, setAngle] = useState(360); // 기본각도 const [draw, setDraw] = useState(``); // path d 값 const radians = (degrees: number) =&gt; &#123; return degrees / 180 * Math.PI; &#125;; useEffect(() =&gt; &#123; const drawPath = (angle: number) =&gt; &#123; const getArc = (angle: number) =&gt; &#123; const x = center + radius * Math.cos(radians(angle)); const y = center + radius * Math.sin(radians(angle)); return `A$&#123;radius&#125;,$&#123;radius&#125; 1 0 1 $&#123;x&#125;,$&#123;y&#125;`; // 곡선 &#125;; const firstAngle = angle &gt; 180 ? 90 : angle - 90; // 왼쪽 각도 const secondAngle = -270 + angle - 180; // 오른쪽 각도 const firstArc = getArc(firstAngle); // 왼쪽 반원 const secondArc = angle &gt; 180 ? getArc(secondAngle) : ''; // 오른쪽 반원 const start = `M$&#123;center&#125;,$&#123;center&#125; m0,-$&#123;center - strokeWidth / 2&#125;`; // 시작점 const d = `$&#123;start&#125; $&#123;firstArc&#125; $&#123;secondArc&#125;`; // 시작점 왼쪽 반원 오른쪽 반원 그리는 값 setDraw(d); setAngle(angle); &#125; drawPath(angle); &#125;, [angle, center, radius]); return &lt;TimerStyle&gt; &lt;SvgWrapper viewBox=&#123;`0 0 $&#123;size&#125; $&#123;size&#125;`&#125;&gt; &lt;defs&gt; &lt;linearGradient id=\"gradient\"&gt; &lt;stop offset=\"0%\" stopColor=\"rgb(245,221,100)\"/&gt; &lt;stop offset=\"100%\" stopColor=\"rgb(234,111,37)\"/&gt; &lt;/linearGradient&gt; &lt;/defs&gt; &lt;circle cx=&#123;center&#125; cy=&#123;center&#125; r=&#123;center&#125; fill='rgb(20,13,4)' stroke='none'/&gt; &lt;circle cx=&#123;center&#125; cy=&#123;center&#125; r=&#123;center - strokeWidth&#125; fill='#000' stroke='none'/&gt; &lt;path strokeLinecap=\"round\" strokeWidth=&#123;strokeWidth&#125; stroke=\"url(#gradient)\" fill='none' d=&#123;draw&#125; /&gt; &lt;text x=&#123;center - 28&#125; y=&#123;center + 2&#125; fill=\"#fff\" fontSize=\"20\" fontWeight=\"900\" style=&#123;&#123;userSelect: 'none'&#125;&#125;&gt;02:35 &lt;/text&gt; &lt;text x=&#123;center - 20&#125; y=&#123;center + 15&#125; fill=\"rgb(108,108,108)\" fontSize=\"8\" style=&#123;&#123;userSelect: 'none'&#125;&#125;&gt;Watch Timer &lt;/text&gt; &lt;/SvgWrapper&gt; &lt;/TimerStyle&gt;&#125;export default Timer; Timer 시간 기능App.tsx 123456789101112import moment from 'moment';//...const App: React.FC = () =&gt; &#123; const defaultTime = 180000; // 1000 * 60 * 3 = 3분 const [timer, setTimer] = useState(moment.duration(defaultTime)); const [timerStatus, setTimerStatus] = useState&lt;'play' | 'pause' | 'stop'&gt;('stop'); const [currentTime, setCurrentTime] = useState(moment());//... &lt;CurrentTime&gt;&#123;currentTime.format('mm:ss')&#125;&lt;/CurrentTime&gt;//... &lt;Timer timer=&#123;timer&#125; defaultTime=&#123;defaultTime&#125;/&gt;//... 타이머 지정한 시간 및 타이머와 타이머의 현재 상태를 저장해줍니다.그리고 타이머 컴포넌트에 timer와 defaultTimer를 props로 넘겨주도록 합니다. App.tsx12345678910//...useEffect(() =&gt; &#123; const currentTimer:NodeJS.Timeout = setInterval(() =&gt; &#123; setCurrentTime(prevCurrentTime =&gt; prevCurrentTime.clone().add(1, 'minute')) &#125;, 60000); return () =&gt; &#123; clearInterval(currentTimer); &#125;&#125;, []);//... 1분단위로 현재 시간을 변경해주는 이펙트입니다. Timer.tsx123456789//...import moment, &#123; Duration &#125; from 'moment';//...const Timer: React.FC&lt;&#123; timer: Duration, defaultTime: number &#125;&gt; = (&#123;timer, defaultTime&#125;) =&gt; &#123;//...&lt;text x=&#123;center - 28&#125; y=&#123;center + 2&#125; fill=\"#fff\" fontSize=\"20\" fontWeight=\"900\" style=&#123;&#123;userSelect: 'none'&#125;&#125;&gt; &#123;moment.utc(timer.asMilliseconds()).format('mm:ss')&#125;&lt;/text&gt;//... 넘어온 타이머를 텍스트가 변경되도록 수정합니다. App.tsx1234567891011121314151617181920212223242526272829//...import &#123; clearInterval, setInterval &#125; from 'timers';//... useEffect(() =&gt; &#123; let timerInterval: NodeJS.Timeout | null = null; if (timerStatus === 'play') &#123; timerInterval = setInterval(() =&gt; &#123; setTimer(prevTimer =&gt; &#123; const duration = prevTimer.clone().subtract(1, 'second'); if (prevTimer.asMilliseconds() === 0) &#123; setTimerStatus('stop'); return moment.duration(0); &#125; return duration; &#125; ) &#125;, 1000); &#125; else if (timerStatus === 'pause' || timerStatus === 'stop') &#123; if (timerInterval) &#123; clearInterval(timerInterval); &#125; &#125; return () =&gt; &#123; if (timerInterval) &#123; clearInterval(timerInterval); &#125; &#125; &#125;, [timerStatus]);//... 타이머의 상태가 play가 되면 1초씩 감소하는 기능입니다.setInterval 부분의 타입이 에러가 나올시에 setInterval 포스트를 참고 해주세요 App.tsx12345678910111213//...const timerControl = () =&gt; &#123; if (timerStatus === 'play') &#123; setTimerStatus('pause'); &#125; else &#123; setTimerStatus('play'); &#125;&#125;//...&lt;Button type=\"button\" onClick=&#123;() =&gt; timerControl()&#125;&gt; &lt;FontAwesomeIcon icon=&#123;timerStatus === 'play' ? faPause : faPlay&#125; color=\"#fff\" size=\"lg\"/&gt;&lt;/Button&gt;//... 타이머 시작과 중지버튼 컨트롤러 기능을 설정해줍니다. Timer.tsx123456789//...React.useEffect(() =&gt; &#123; if (timer.asMilliseconds() &gt;= 0) &#123; const percent = timer.asMilliseconds() / defaultTime; const angle = 360 * percent; setAngle(angle); &#125;&#125;, [timer, defaultTime])//... 타이머가 변경시 angle을 변경해주는 이펙트입니다. Timer animation이것으로 타이머를 만들어 보았습니다. 하지만 뭔가 어색한 점이 있습니다. 그것은 애니메이션이죠!svg에 애니메이션 기능을 추가하겠습니다. Timer.tsx12345//...const Timer: React.FC&lt;&#123; timer: Duration, defaultTime: number &#125;&gt; = (&#123;timer, defaultTime&#125;) =&gt; &#123;const animDuration = 300; // 애니메이션 속도const [prevAngle, setPrevAngle] = useState(angle); // 애니메이션 시작 이전 각도//... 애니메이션이 시작되기 이전의 angle을 별도로 저장해줍니다. Timer.tsx123456789//... React.useEffect(() =&gt; &#123; if (timer.asMilliseconds() &gt;= 0) &#123; const percent = timer.asMilliseconds() / defaultTime; const angle = 360 * percent; setPrevAngle(angle); // setAngle에서 prevAngle로 수정 &#125;&#125;, [timer, defaultTime])//... 앞에서 사용했던 이펙트를 조금 수정합니다.애니메이션 시작전이기 때문에 이전 각도 값으로 먼저 상태를 저장 해줍니다. Timer.tsx12345678910111213141516171819//...useEffect(() =&gt; &#123; const drawPath = (angle: number) =&gt; &#123; //... const step = () =&gt; &#123; console.log('애니메이션 단계') &#125; const anim = (argAngle: number, time: number) =&gt; &#123; if (argAngle &gt; 360) &#123; // 각도가 360도를 넘어가면 360도의 나머지 값으로 계산합니다 argAngle = argAngle % 360; &#125; const startTime = new Date().valueOf(); // 시작시간 const endTime = startTime + time; // 끝나는 시간 const angleOffset = argAngle - angle; // 이전각도와 현재각도 비교 requestAnimationFrame(() =&gt; step()); &#125; anim(prevAngle, animDuration);&#125;, [prevAngle, animDuration]);//... 애니메이션 시작과 끝나는 시간 각도 비교값을 step 함수에 넘겨줍니다.draw 기능을 이펙트 내부로 옮깁니다. Timer.tsx123456789101112131415161718192021//...useEffect(() =&gt; &#123; //... const step = (angleOffset: number, argAngle: number, time: number, endTime: number) =&gt; &#123; const now = new Date().valueOf(); // 애니메이션 시작 시간 const timeOffset = endTime - now; // 끝나는 시간 - 시작 시간 if (timeOffset &lt;= 0) &#123; // 끝나는 시간이 지났을때 drawPath(argAngle); &#125; else &#123; const incrementAngle = argAngle - (angleOffset * timeOffset / time); // 이전각도 - (이전각도 - 현재각도) * (끝나는 시간 - 시작 시간) / 애니메이션 시간 drawPath(incrementAngle); // path를 그려줍니다. requestAnimationFrame(() =&gt; step(angleOffset, argAngle, time, endTime)); // 끝나는 시간이 지날때까지 step을 계속 실행시킵니다. &#125; &#125; const anim = (argAngle: number, time: number) =&gt; &#123; //... requestAnimationFrame(() =&gt; step(angleOffset, argAngle, time, endTime)); &#125;//...&#125;&#125;,[prevAngle, animDuration])//... Timer.tsx123456789101112131415161718192021222324252627282930313233343536373839404142useEffect(() =&gt; &#123; const drawPath = (angle: number, finished: boolean) =&gt; &#123; const getArc = (angle: number) =&gt; &#123; const x = center + radius * Math.cos(radians(angle)); const y = center + radius * Math.sin(radians(angle)); return `A$&#123;radius&#125;,$&#123;radius&#125; 1 0 1 $&#123;x&#125;,$&#123;y&#125;`; // 곡선 &#125;; const firstAngle = angle &gt; 180 ? 90 : angle - 90; // 왼쪽 각도 const secondAngle = -270 + angle - 180; // 오른쪽 각도 const firstArc = getArc(firstAngle); // 왼쪽 반원 const secondArc = angle &gt; 180 ? getArc(secondAngle) : ''; // 오른쪽 반원 const start = `M$&#123;center&#125;,$&#123;center&#125; m0,-$&#123;center - strokeWidth / 2&#125;`; // 시작점 const d = `$&#123;start&#125; $&#123;firstArc&#125; $&#123;secondArc&#125;`; // 시작점 왼쪽 반원 오른쪽 반원 그리는 값 setDraw(d); if(finished)&#123; setAnlge(angle); &#125; &#125; const step = (angleOffset: number, argAngle: number, time: number, endTime: number) =&gt; &#123; const now = new Date().valueOf(); // 애니메이션 시작 시간 const timeOffset = endTime - now; // 끝나는 시간 - 시작 시간 if (timeOffset &lt;= 0) &#123; // 끝나는 시간이 지났을때 drawPath(argAngle); &#125; else &#123; const incrementAngle = argAngle - (angleOffset * timeOffset / time); // 이전각도 - (이전각도 - 현재각도) * (끝나는 시간 - 시작 시간) / 애니메이션 시간 drawPath(incrementAngle); // path를 그려줍니다. requestAnimationFrame(() =&gt; step(angleOffset, argAngle, time, endTime)); // 끝나는 시간이 지날때까지 step을 계속 실행시킵니다. &#125; &#125; const anim = (argAngle: number, time: number) =&gt; &#123; if (argAngle &gt; 360) &#123; // 각도가 360도를 넘어가면 360도의 나머지 값으로 계산합니다 argAngle = argAngle % 360; &#125; const startTime = new Date().valueOf(); // 시작시간 const endTime = startTime + time; // 끝나는 시간 const angleOffset = argAngle - angle; // 이전각도와 현재각도 비교 requestAnimationFrame(() =&gt; step(angleOffset, argAngle, time, endTime)); &#125; anim(prevAngle, animDuration);&#125;, [prevAngle, animDuration, center, radius, angle]); useEffect dependancy에서 warning이 나옵니다. dependancy를 추가해줍니다.angle는 마지막에만 수정할수 있도록 draw 할때 finished 확인을 해줍니다.이것으로 타이머 애니메이션 기능까지 구현하였습니다. 코드는 깃헙에서 확인할 수 있습니다.Github: Timer-clone","categories":[{"name":"Clone","slug":"Clone","permalink":"http://flamingotiger.github.io/categories/Clone/"}],"tags":[{"name":"moment","slug":"moment","permalink":"http://flamingotiger.github.io/tags/moment/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"svg","slug":"svg","permalink":"http://flamingotiger.github.io/tags/svg/"},{"name":"path","slug":"path","permalink":"http://flamingotiger.github.io/tags/path/"},{"name":"circular progress bar","slug":"circular-progress-bar","permalink":"http://flamingotiger.github.io/tags/circular-progress-bar/"},{"name":"progress bar","slug":"progress-bar","permalink":"http://flamingotiger.github.io/tags/progress-bar/"},{"name":"circular","slug":"circular","permalink":"http://flamingotiger.github.io/tags/circular/"}]},{"title":"Node 와 Window 의 setInterval 비교","slug":"backend/node/node-interval-method","date":"2020-01-08T02:14:25.000Z","updated":"2021-04-30T03:36:18.270Z","comments":true,"path":"backend/node/node-interval-method/","link":"","permalink":"http://flamingotiger.github.io/backend/node/node-interval-method/","excerpt":"","text":"시작하기타입스크립트로 React 프로젝트를 진행하면서 setInterval 타입을 정의 할때 어떤타입으로 정의 해야하나 고민을 했습니다.window 의 interval과 node의 interval의 타임은 다릅니다. window 브라우저의 interval 타입 Window setInterval1function setInterval(handler: (...args: any[]) =&gt; void, timeout: number): number; window의 메소드인 setInterval의 경우 number를 리턴합니다. 노드의 interval 타입 Node setInterval1function setInterval(callback: (...args: any[]) =&gt; void, ms: number, ...args: any[]): NodeJS.Timeout; NodeJS의 setInterval의 경우에는 NodeJS.Timeout을 리턴합니다. 프로젝트에서 setInterval이 window메소드로 인식할 경우 node에서 timer모듈을 불러와 사용합니다. 1234567import &#123; clearInterval, setInterval &#125; from 'timers'; // number로 인식하라는 에러가 나올시 추가let timer:NodeJS.Timeout; timer = setInterval(() =&gt; &#123; console.log('timer');&#125;);clearInterval(timer); Timeout 인스턴스를 반환합니다.노드의 모듈의 setInterval로 사용해주는 것입니다. 이것으로 리액트에서 setInterval이 nodeJS로 인식하지 않을때 해결방법을 찾아보았습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"node","slug":"backend/node","permalink":"http://flamingotiger.github.io/categories/backend/node/"}],"tags":[{"name":"node","slug":"node","permalink":"http://flamingotiger.github.io/tags/node/"},{"name":"method","slug":"method","permalink":"http://flamingotiger.github.io/tags/method/"},{"name":"setInterval","slug":"setInterval","permalink":"http://flamingotiger.github.io/tags/setInterval/"}]},{"title":"Algorithm 삽입(insertion) 정렬","slug":"DevTIL/Algorithm/algorithm-insertion-sort","date":"2020-01-06T12:25:27.000Z","updated":"2021-04-30T03:36:18.268Z","comments":true,"path":"DevTIL/Algorithm/algorithm-insertion-sort/","link":"","permalink":"http://flamingotiger.github.io/DevTIL/Algorithm/algorithm-insertion-sort/","excerpt":"","text":"시작하기처음에는 왼쪽 끝의 숫자를 정렬이 끝났다고 간주합니다.계속해서 아직 작업하지 않은 숫자 중에서 왼쪽끝에 있는 숫자를 꺼내서 왼쪽의 작업이 끝난 숫자와 비교합니다.왼쪽의 숫자가 더 크면 숫자를 바꿉니다.이 작업을 자신보다 작은 숫자가 나타나거나 왼쪽 끝에 도착할 때까지 반복합니다. [ 4, 2, 6, 8, 3, 1, 5, 7] 왼쪽의 4를 정렬이 끝났다고 간주합니다.끝난 왼쪽의 숫자인 4와 다음 작업하지 않은 숫자2를 비교합니다. 4 &gt; 2이므로 두 숫자의 자리를 바꾸고 작업을 완료합니다.[ 2, 4, 6, 8, 3, 1, 5, 7 ] 다음 작업하지 않은 숫자 6과 4를 비교합니다. 6 &gt; 4로 오른쪽의 6이 더 크므로 작업을 완료합니다.이와 같은 방법으로 끝까지 정렬을 합니다. Javascript선택정렬을 javascript로 구현해보겠습니다. 12345678910111213const numbers = [9,3,8,2,1,7,6,4];const insertionSort = (numberArray) =&gt; &#123; let i = 1, j, temp; for (i; i &lt; numberArray.length; i++) &#123; temp = array[i]; for (j = i - 1; j &gt;= 0 &amp;&amp; temp &lt; numberArray[j]; j--) &#123; array[j + 1] = array[j]; &#125; array[j + 1] = temp; &#125; return array;&#125;;insertionSort(numbers);","categories":[{"name":"DevTIL","slug":"DevTIL","permalink":"http://flamingotiger.github.io/categories/DevTIL/"},{"name":"Algorithm","slug":"DevTIL/Algorithm","permalink":"http://flamingotiger.github.io/categories/DevTIL/Algorithm/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://flamingotiger.github.io/tags/algorithm/"},{"name":"insertion","slug":"insertion","permalink":"http://flamingotiger.github.io/tags/insertion/"},{"name":"sort","slug":"sort","permalink":"http://flamingotiger.github.io/tags/sort/"}]},{"title":"알고리즘 시간복잡도와 Big-O","slug":"DevTIL/Algorithm/algorithm-big-o","date":"2020-01-04T04:38:55.000Z","updated":"2021-04-30T03:36:18.268Z","comments":true,"path":"DevTIL/Algorithm/algorithm-big-o/","link":"","permalink":"http://flamingotiger.github.io/DevTIL/Algorithm/algorithm-big-o/","excerpt":"","text":"시작하기어떤 알고리즘의 시간 복잡도(Time Complexity) / Big-O 를 논할 때아래 그래프 정도만 숙지하고 있어도, 본인이 만든 코드의 시간 복잡도를 기반으로대략적으로 계산 노드가 기하급수적으로 증가할 때 어떤 일이 벌어질 지 예측 가능합니다. Big-O 표기법의 특징상수항 무시 : 빅오 표기법은 데이터 입력값(n)이 충분히 크다고 가정하고 있고, 알고리즘의 효율성 또한 데이터 입력값(n)의 크기에 따라 영향 받기 때문에 상수항 같은 사소한 부분은 무시한다. 예를들어 O(3N) =&gt; O(N)와 같이 상수항은 무시하고 표기합니다. 영향력 없는 항 무시 : 빅오 표기법은 데이터 입력값(n)의 크기에 따라 영향을 받기 때문에 가장 영향력이 큰 항에 이외에 영향력이 없는 항들은 무시한다. 예를들어 O(N²+3N+2) =&gt; O(N²)와 같이 영향력이 지배적인 이외에 영향력이 없는 항들은 무시한다. O(1) : 스택에서 Push, Pop O(log n) : 이진트리 O(n) : for 문 O(n log n) : 퀵 정렬(quick sort), 병합정렬(merge sort), 힙 정렬(heap Sort) O(): 이중 for 문, 삽입정렬(insertion sort), 거품정렬(bubble sort), 선택정렬(selection sort) O() : 피보나치 수열 big-O에는 다양한 실행 시간이 존재하지만 자주 사용 되는 것들은 다음과 같습니다.O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n²) &lt; O(2ⁿ) &lt; O(n!) &lt; O(nⁿ) N의 값 1 10 100 O(1) 1 1 1 O(log N) 0 2 5 O(N) 1 10 100 O(N log N) 0 20 461 O(N^2) 1 100 10000 O(2^N) 1 1024 1267650600228229401496703205376 O(N!) 1 3628800 화면에 표현할 수 없음! O(1)123function sum(num1, num2) &#123; return num1 + num2;&#125;; 이 기능은 O(1)입력과 관련하여 시간 (또는 “일정 시간”)으로 실행됩니다. 입력 배열은 1 개 항목 또는 1,000 개 항목 일 수 있지만이 기능은 여전히 ​​한 단계 만 필요합니다. O(log n)12345function log(n)&#123; for(var i = 1; i &lt;= n; i = i * 3)&#123; console.log('i', i) &#125;&#125; 배열에서 값을 찾을 때, 어느 쪽에서 시작할지를 알고 있으면 검색하는 시간이 두배로 줄어듭니다. O(n)12345function forLoop()&#123; for(var i = 0; i &lt; 10; i++)&#123; console.log('i',i); &#125;&#125; 이 함수는 O(n)시간 (또는 “선형 시간”)으로 실행되며 여기서 n배열의 항목 수입니다. 배열에 10 개의 항목이 있으면 10 번 출력해야합니다. 항목이 1000 개이면 1000 번 출력해야합니다. O(n²)1234567function forLoop()&#123; for(var i = 0; i &lt; 10; i++)&#123; for(var j = 0; j &lt; 10; j++)&#123; console.log('i, j',i, j); &#125; &#125;&#125; 여기에 두 개의 루프가 중첩됩니다. 배열에 n항목 이있는 경우 외부 루프가 반복 될 때마다 외부 루프 실행 n시간과 내부 루프 실행 n시간이 발생하여 총 2 회 출력됩니다. 따라서 이 함수는 O(n²)시간 (또는 “이차 시간”)으로 실행됩니다. 배열에 10 개의 항목이 있으면 100 번 출력해야합니다. 1000 개 항목이있는 경우 1000000 회 출력해야합니다. O(2ⁿ)1234function fibonacci(num)&#123; if (num &lt;= 1) return num; return fibonacci(num - 1) + fibonacci(num - 2);&#125; O(2ⁿ)함수의 예는 피보나치 수의 재귀 계산입니다. O(2ⁿ)은 입력 데이터 세트에 추가 될 때마다 성장이 두 배가되는 알고리즘을 나타냅니다. O(2ⁿ)함수의 성장 곡선은 기하 급수적으로 매우 얕게 시작하여 기상 적으로 상승합니다.","categories":[{"name":"DevTIL","slug":"DevTIL","permalink":"http://flamingotiger.github.io/categories/DevTIL/"},{"name":"Algorithm","slug":"DevTIL/Algorithm","permalink":"http://flamingotiger.github.io/categories/DevTIL/Algorithm/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://flamingotiger.github.io/tags/algorithm/"},{"name":"big-O","slug":"big-O","permalink":"http://flamingotiger.github.io/tags/big-O/"}]},{"title":"Algorithm 선택(selection) 정렬","slug":"DevTIL/Algorithm/algorithm-selection-sort","date":"2020-01-04T04:10:33.000Z","updated":"2021-04-30T03:36:18.268Z","comments":true,"path":"DevTIL/Algorithm/algorithm-selection-sort/","link":"","permalink":"http://flamingotiger.github.io/DevTIL/Algorithm/algorithm-selection-sort/","excerpt":"","text":"시작하기선택 정렬은 첫 번째 자료를 두 번째 자료부터 마지막까지의 자료를 차례대로 비교하여 가장 작은 값을 찾아 첫 번째에 놓고,두 번째 자료를 세 번째 자료부터 마지막자료까지 차례대로 비교하여 그 중에 가장 작은 값을 찾아 두번째에 놓는 과정을 반복하여 정렬을 수행합니다. 배열 [2, 5, 1, 7, 3, 9, 6]가 있으면 가장 작은수인 1을 첫번째 2와 바꿉니다.[1, 5, 2, 7, 3, 9, 6] 다음 가장 작은수인 2를 5와 바꿉니다.[1, 2, 5, 7, 3, 9, 6] 다음과 같은 과정을 반복합니다. 결과 [1, 2, 3, 5, 6, 7, 9] 123456789101112131415161718const numbers = [5, 1, 4, 7, 2, 6, 8, 3]; const selectionSort = (numberArray) =&gt; &#123; const length = numberArray.length; let minIndex, temp, i, j; for (i = 0; i &lt; length - 1; i++) &#123; minIndex = i; for (j = i + 1; j &lt; length; j++)&#123; if(numberArray[j] &lt; numberArray[minIndex])&#123; minIndex = j; &#125; &#125; temp = numberArray[minIndex]; numberArray[minIndex] = numberArray[i]; numberArray[i] = temp; &#125; return numberArray &#125;selectionSort(numbers);","categories":[{"name":"DevTIL","slug":"DevTIL","permalink":"http://flamingotiger.github.io/categories/DevTIL/"},{"name":"Algorithm","slug":"DevTIL/Algorithm","permalink":"http://flamingotiger.github.io/categories/DevTIL/Algorithm/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://flamingotiger.github.io/tags/algorithm/"},{"name":"sort","slug":"sort","permalink":"http://flamingotiger.github.io/tags/sort/"},{"name":"selection","slug":"selection","permalink":"http://flamingotiger.github.io/tags/selection/"}]},{"title":"SVG path(패스)","slug":"frontend/svg/svg-path","date":"2020-01-03T07:40:20.000Z","updated":"2021-04-30T03:36:18.281Z","comments":true,"path":"frontend/svg/svg-path/","link":"","permalink":"http://flamingotiger.github.io/frontend/svg/svg-path/","excerpt":"","text":"svg 선 명령어&lt;path&gt; 노드에는 다섯 개의 선 명령어가 있습니다. MoveLine 명령어는 두 점 사이에 선을 그리는 역할을 합니다.첫 번째 명령어는 ‘Move To(이동하기)’ 혹은 M 입니다.이 명령어는 두 개의 파라미터로 x와 y 좌표를 받습니다.그리기 커서가 이미 페이지의 다른 곳에 있었더라도 두 점 사이에 점이 그려지지는 않습니다.‘Move To’ 명령어는 다음과 같이 패스의 맨 처음에 와서 그리기를 시작할 위치를 지정합니다.M x y 혹은 m dx dy 참고 패스를 그릴때는 점이 나오지 않습니다. 선 그리기(lineTo)일반적인 L이라 부르는 “Line To(선 그리기)” 명령어가 있습니다.L 명령어는 x, y라는 두 개의 파라미터를 받아서 현재 위치에서 새 위치로 선을 긋습니다.L x y (혹은 l dx dy)L 및 l 명령은 현재 점에서 다음 점까지 직선을 그립니다. 대문자 L은 절대좌표, 소문자 l은 상대좌표입니다. 가로선과 세로선을 그리는 축약 명령어도 있습니다. H는 가로선(수평선)을 그리고, V는 세로선(수직선)을 그릴 수 있습니다. H x (혹은 h dx)H 및 h 명령은 현재 점에서 수평선을 그립니다. 대문자 H는 절대좌표, 소문자 h는 상대좌표입니다. V y (혹은 v dy)V 및 v 명령은 현재 점에서 수직선을 그립니다. 대문자 V은 절대좌표, 소문자 v은 상대좌표입니다. Z라는 “Close Path(패스 닫기)” 명령어를 통해 쉽게 패스를 마무리할 수 있습니다.이 명령어는 현 위치에서 시작점으로 직선을 그립니다.항상은 아니지만 패스의 끝에 자주 쓰입니다.Z (혹은 z) 커브 그리기(curve)커브를 그리는 명령은 3가지가 있습니다. 각 커브 명령의 기본 개념을 알아보고, 이해를 위한 다이어그램을 살펴봅니다.Cubic Bezier (C, c, S, s)Quadratic Bezier (Q, q, T, t)Elliptical arc (A, a)","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"svg","slug":"frontend/svg","permalink":"http://flamingotiger.github.io/categories/frontend/svg/"}],"tags":[{"name":"svg","slug":"svg","permalink":"http://flamingotiger.github.io/tags/svg/"},{"name":"path","slug":"path","permalink":"http://flamingotiger.github.io/tags/path/"},{"name":"graph","slug":"graph","permalink":"http://flamingotiger.github.io/tags/graph/"},{"name":"vector","slug":"vector","permalink":"http://flamingotiger.github.io/tags/vector/"}]},{"title":"SVG 설명","slug":"frontend/svg/svg-intro","date":"2020-01-03T06:56:16.000Z","updated":"2021-04-30T03:36:18.280Z","comments":true,"path":"frontend/svg/svg-intro/","link":"","permalink":"http://flamingotiger.github.io/frontend/svg/svg-intro/","excerpt":"","text":"SVG란? SVG는 Scalable Vector Graphics를 나타냅니다. SVG는 웹에 대한 벡터 기반 그래픽을 정의하는 데 사용됩니다. SVG는 XML 형식으로 그래픽을 정의합니다. SVG 파일의 모든 요소와 속성을 애니메이션으로 만들 수 있습니다. SVG는 W3C 권장 사항입니다. SVG는 DOM 및 XSL과 같은 다른 W3C 표준과 통합되었습니다. SVG 장점 SVG 영상은 임의의 텍스트 편집기로 생성 및 편집할 수 있습니다. SVG 이미지를 검색, 인덱싱, 스크립팅 및 압축할 수 있습니다. SVG 이미지 확장 가능합니다. SVG 영상은 어떤 해상도에서도 고품질 인쇄 가능합니다. SVG 영상을 확대/축소할 수 있습니다. 확대/축소 또는 크기 조정 시 SVG 그래픽의 품질이 저하되지 않습니다. SVG는 개방형 표준이다. SVG 파일은 순수 XML입니다. SVG 작성법1234567891011&lt;html&gt; &lt;body&gt; &lt;h1&gt;My first SVG&lt;/h1&gt; &lt;svg width=\"100\" height=\"100\"&gt; &lt;circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" /&gt; &lt;/svg&gt; &lt;/body&gt;&lt;/html&gt; SVG 기본 값은 width=”300” height=”150”으로 지정됩니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"svg","slug":"frontend/svg","permalink":"http://flamingotiger.github.io/categories/frontend/svg/"}],"tags":[{"name":"svg","slug":"svg","permalink":"http://flamingotiger.github.io/tags/svg/"},{"name":"graph","slug":"graph","permalink":"http://flamingotiger.github.io/tags/graph/"},{"name":"vector","slug":"vector","permalink":"http://flamingotiger.github.io/tags/vector/"}]},{"title":"React와 momentjs로 타이머 만들기","slug":"frontend/react/react-timer","date":"2020-01-02T08:34:31.000Z","updated":"2021-04-30T03:36:18.280Z","comments":true,"path":"frontend/react/react-timer/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-timer/","excerpt":"","text":"시작하기리액트와 momentjs를 이용해서 timer를 만들어 보도록 하겠습니다.create-react-app으로 새로운 프로젝트를 만들어줍니다. 1create-react-app timer-app --typescript 구현하기날짜 관리 라이브러리인 momentjs를 설치해주도록 합니다. 1npm install moment @types/moment App.tsx1234567891011121314151617181920212223242526272829import React, &#123; useState &#125; from 'react';import moment from 'moment';const App: React.FC = () =&gt; &#123; const [time, setTime] = useState(moment.duration(0)); const startTimer = () =&gt; &#123; &#125;; const pauseTimer = () =&gt; &#123; &#125;; const stopTimer = () =&gt; &#123; &#125;; return ( &lt;div className=\"App\"&gt; &lt;h1&gt;타이머&lt;/h1&gt; &lt;p&gt;&#123;time.format(\"HH:mm:ss\")&#125;&lt;/p&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; startTimer()&#125;&gt;시작&lt;/button&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; pauseTimer()&#125;&gt;일시정지&lt;/button&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; stopTimer()&#125;&gt;정지&lt;/button&gt; &lt;/div&gt; );&#125;export default App; 타이머의 시간의 상태 및 버튼을 생성하고 각각의 버튼에 대한 함수를 생성 해주도록 합니다. App.tsx1234567891011121314151617181920212223242526272829303132333435363738import React, &#123; useState &#125; from 'react';import moment from 'moment';const App: React.FC = () =&gt; &#123; const [time, setTime] = useState(moment.duration(0)); const [timeTick, setTimeTick] = useState&lt;NodeJS.Timeout | null&gt;(null); const startTimer = () =&gt; &#123; const tick = () =&gt; setTime(prevTime =&gt; prevTime.clone().add(1, 'seconds')); const timeTick = setInterval(() =&gt; &#123; tick(); &#125;, 1000); setTimeTick(timeTick); &#125;; const pauseTimer = () =&gt; &#123; if (timeTick) &#123; clearInterval(timeTick); &#125; &#125;; const stopTimer = () =&gt; &#123; pauseTimer(); setTime(moment.duration(0)) &#125;; return ( &lt;div className=\"App\"&gt; &lt;h1&gt;타이머&lt;/h1&gt; &lt;p&gt;&#123;moment(time.asSeconds(), 's').format(\"HH:mm:ss\")&#125;&lt;/p&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; startTimer()&#125;&gt;시작&lt;/button&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; pauseTimer()&#125;&gt;일시정지&lt;/button&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; stopTimer()&#125;&gt;정지&lt;/button&gt; &lt;/div&gt; );&#125;export default App; 시작버튼을 클릭하면 interval을 timeTick 상태로 넣어주고일시정지버튼을 클릭 할때 timeTick 상태가 있으면 clearInterval을 해줍니다.정지버튼을 클릭 했을 경우에는 clearInterval과 시간을 초기상태로 저장합니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"timer","slug":"timer","permalink":"http://flamingotiger.github.io/tags/timer/"},{"name":"momentjs","slug":"momentjs","permalink":"http://flamingotiger.github.io/tags/momentjs/"}]},{"title":"Node version manager(nvm) 설치 및 사용하기","slug":"backend/node/nvm-setup","date":"2019-12-31T13:11:55.000Z","updated":"2021-04-30T03:36:18.271Z","comments":true,"path":"backend/node/nvm-setup/","link":"","permalink":"http://flamingotiger.github.io/backend/node/nvm-setup/","excerpt":"","text":"시작하기노드기반의 개발툴들이 많아지면서 상위 버전의 노드를 설치해야 하는 경우가 있습니다.NVM은 컴퓨터에 다양한 버전의 노드를 설치할 수 있게 해주는 툴입니다. 설치하기nvm gihub 링크터미널을 열어서 다음을 입력해 줍니다. 1sudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash 참고curl = Client URLcurl는 command line(터미널)에서 http request요청을 할 수 있는 명령입니다.쉽게 말해서 js로 보자면 fetch axios get기능을 합니다. 설치가 재대로 되어있는지 확인 합니다. 123nvm ls-bash: nvm: command not found 다음과 같이 nvm을 찾을 수 없다고 나온다면 1vi ~/.bash_profile 12export NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm vi 에디터를 열어 위 코드가 있는지 확인합니다.이후 재시작해주도록 합니다. 1source ~/.bash_profile 노드 설치1nvm install node 별도의 버전을 지정하지 않고 설치하면 설치당시의 최신버전을 찾아서 설치됩니다. 다른 노드로 설치 이후 변경1nvm ls-remote 위의 명령어를 입력하면 설치가능한 이전 노드의 버전리스트들이 모두 나옵니다. 노드 v12.14.0을 설치 하겠습니다. 1nvm install 12.14.0 1nvm ls 설치된 리스트가 나옵니다.선택되어있는 노드는 녹색으로 표시가 됩니다. 1node -v 현재 노드 버젼을 확인할 수 있습니다. 1nvm use 12.14.0 12.14.0 버전으로 사용합니다.선택된 노드가 바뀐것을 확인할 수 있습니다. 하지만 터미널을 종료하면 다시 노드 v13.5.0으로 변경되어버리는 문제가 있습니다.이것은 NVM의 노드 기본버전이 v13.5.0로 설정되어 있기 때문입니다.alias 옵션으로 기본 노드 버전을 변경할 수 있습니다. 이미 OS에 설치해 놓은 v12.14.0 버전을 기본(default)으로 변경하겠습니다. 1nvm alias default v12.14.0 이것으로 nvm을 알아보았습니다.","categories":[{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/categories/backend/"},{"name":"node","slug":"backend/node","permalink":"http://flamingotiger.github.io/categories/backend/node/"}],"tags":[{"name":"node","slug":"node","permalink":"http://flamingotiger.github.io/tags/node/"},{"name":"nvm","slug":"nvm","permalink":"http://flamingotiger.github.io/tags/nvm/"}]},{"title":"React-electron 설치 및 사용하기","slug":"frontend/react/react-electron-setup","date":"2019-12-31T12:41:57.000Z","updated":"2021-04-30T03:36:18.278Z","comments":true,"path":"frontend/react/react-electron-setup/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-electron-setup/","excerpt":"","text":"시작하기데스크톱 어플리케이션을 제작할 수 있는 electron을 사용해보도록 하겠습니다.이 프레임워크를 사용한 프로젝트로는 깃허브의 아톰, 마이크로소프트의 비주얼 스튜디오 코드, 소스 코드 편집기, 그리고 라이트 테이블 IDE, 또 디스코드 채팅 서비스를 위한 프리웨어 데스크톱 클라이언트 등 다양한 데스크톱 어플리케이션을 제작할때 사용하고 있습니다. use this template 버튼을 클릭하면 빠르게 내 저장소에 복사할 수 있습니다.이후 프로젝트를 clone 하도록 합니다. Package install프로젝트로 루트에서 패키지를 설치해줍니다.보일러 플레이트의 경우 yarn을 사용하고 있으므로 yarn으로 설치해 주도록 합니다.yarn이 없을경우 글로벌로 yarn을 설치 해줍니다. 1npm i -g yarn 1yarn 패키지를 설치합니다. 노드 버전이 낮아 설치하는 도중 에러가 나올수 있습니다.이때는 최신 노드 버전으로 설치해 주면 해결됩니다. 혹시 패키지 설치 혹은 컴파일 문제가 발생하는 경우 디버깅 안내서 를 참조해줍니다. Installation Debugging Solutions123456npm i -g node-gyprm -rf node_modules &amp;&amp;yarn cache clean &amp;&amp;yarn &amp;&amp;yarn electron-rebuild &amp;&amp;yarn dev 시작하기1yarn dev 보일러 프로젝트로 정말 쉽게 desktop app을 실행시켜 보았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"electron","slug":"electron","permalink":"http://flamingotiger.github.io/tags/electron/"}]},{"title":"Algorithm 버블(bubble) 정렬","slug":"DevTIL/Algorithm/algorithm-bubble-sort","date":"2019-12-31T10:28:42.000Z","updated":"2021-04-30T03:36:18.268Z","comments":true,"path":"DevTIL/Algorithm/algorithm-bubble-sort/","link":"","permalink":"http://flamingotiger.github.io/DevTIL/Algorithm/algorithm-bubble-sort/","excerpt":"","text":"시작하기버블 정렬은 수열을 정렬하는 알고리즘중 하나입니다.수열의 오른쪽/왼쪽 끝에 두가지를 두고 좌우에 있는 숫자를 비교합니다. 예제 숫자들: [1, 2, 3, 9, 3, 4, 1, 3, 7, 5]오른쪽 끝의 5와 7을 비교합니다. or 왼쪽 끝의 1과 2를 비교합니다.비교한 결과 오른쪽의 숫자가 작으면 왼쪽과 바꿉니다. [1, 2, 3, 9, 3, 4, 1, 3, 5, 7] 비교를 했으면 다음 오른쪽 끝의 5와 3을 비교합니다.or 왼쪽끝의 [1, 2, 3, 9, 3, 4, 1, 3, 5, 7] 2와 3을 비교합니다. [1, 2, 3, 9, 3, 4, 1, 3, 5, 7] 왼쪽의 숫자가 더 작으므로 바꾸지 않습니다.or 왼쪽끝의 [1, 2, 3, 9, 3, 4, 1, 3, 5, 7] 3과 9를 비교합니다. 이러한 작업을 계속 진행합니다.일련의 작업으로 가장작은 숫자가 왼쪽끝으로 이동하면 정렬이 끝난것으로 간주하고오른쪽끝부터 다시 시작합니다.끝까지 모두 정렬이 끝나는 과정을 버블 정렬이라고 합니다. Javascript버블정렬을 javascript로 구현해보겠습니다. 1234567891011121314151617const numbers = [1,32,3123,67,34,21,22,321];const bubbleSort = (numberArray) =&gt; &#123; let length = numberArray.length; let i, j, temp; for (i = 0; i &lt; length - 1; i++) &#123; for (j = 0; j &lt; length - 1 - i; j++) &#123; if (numberArray[j] &gt; numberArray[j + 1]) &#123; temp = numberArray[j]; numberArray[j] = numberArray[j + 1]; numberArray[j + 1] = temp; &#125; &#125; &#125; return numberArray;&#125;bubbleSort(numbers);","categories":[{"name":"DevTIL","slug":"DevTIL","permalink":"http://flamingotiger.github.io/categories/DevTIL/"},{"name":"Algorithm","slug":"DevTIL/Algorithm","permalink":"http://flamingotiger.github.io/categories/DevTIL/Algorithm/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://flamingotiger.github.io/tags/algorithm/"},{"name":"sort","slug":"sort","permalink":"http://flamingotiger.github.io/tags/sort/"},{"name":"bubble","slug":"bubble","permalink":"http://flamingotiger.github.io/tags/bubble/"}]},{"title":"Tailwindcss 사용법","slug":"style/tailwindcss-use","date":"2019-12-29T01:17:24.000Z","updated":"2021-04-30T03:36:18.282Z","comments":true,"path":"style/tailwindcss-use/","link":"","permalink":"http://flamingotiger.github.io/style/tailwindcss-use/","excerpt":"","text":"시작하기저번 포스트에서 Tailwindcss의 초기 설정을 완료햇습니다.다음으로 사용법을 알마 보도록 하겠습니다. Tailwindcss는 정말로 사용하기 쉽습니다.부트스트랩을 사용해보신 분은 익숙하실겁니다. 클래스에 이름을 넣어 주기만 하면 끝! 정말 간편합니다.부트스트랩의 경우 기본 스타일이 정해져 있지만, tailwind의 경우 css를 축약형태로 클래스에 입력하면 바로 적용되는 방식입니다.쉽게 말해서 tailwind는 커스터마이징에 용이합니다. Tailwindcss 특징기본 단위는 rem입니다.반응형에 최적화 되어 있습니다.transition, transform은 현재 구현이 되어있지 않습니다이부분의 경우 jsx inline style로 구현을 하거나 styled-components 혹은 css/scss로 구현을 할 수 있습니다. 사용하기간단한 사용법을 알아보겠습니다.사용법은 정말로 간단합니다. 1&lt;div className=\"w-10 h-4 rounded-full bg-gray-500 text-white\"&gt;TailWindcss&lt;/div&gt; 수치 입력margin, padding, font-size등의 수치 입력 스타일의 경우 12345678910ml /*margin-left;*/mx /*margin-left margin-right;*/my /*margin-top margin-bottom;*/pl /*padding-left;*/px /*padding-left padding-right;*/py /*padding-top padding-bottom;*/w /*width;*/max-w /*max-width;*/h /*height;*/max-h /*max-height;*/ 적용 스타일이름 - 수치형식으로 클래스를 작성하면 됩니다.예를 들면 ml-2 pr-3 text-lg 123auto /*auto;*/full /*100%;*/screen /*100vh or 100vw;*/ 클래스사용 빈수가 많은 클래스에 대해 간단히 알아 보겠습니다. Display123456789block /*display: block;*/inline-block /*display: inline-block;*/inline /*display: inline;*/flex /*display: flex;*/inline-flex /*display: inline-flex;*/table /*display: table;*/table-row /*display: table-row;*/table-cell /*display: table-cell;*/hidden /*display: none;*/ Position12345static /*position: static;*/fixed /*position: fixed;*/absolute /*position: absolute;*/relative /*position: relative;*/sticky /*position: sticky;*/ Top / Right / Bottom / Left12345678910111213141516171819202122232425inset-0/* top: 0; right: 0; bottom: 0; left: 0;*/ inset-y-0/* top: 0; bottom: 0;*/inset-x-0/* right: 0; left: 0;*/ /* ... */top-0 /*top: 0;*/ right-0 /*right: 0;*/ bottom-0 /*bottom: 0;*/ left-0 /*left: 0;*/ /* ... */ Text Transform1234uppercase /*text-transform: uppercase;*/lowercase /*text-transform: lowercase;*/capitalize /*text-transform: capitalize;*/normal-case /*text-transform: none;*/ z-index1234567z-0 /*z-index: 0;*/z-10 /*z-index: 10;*/z-20 /*z-index: 20;*/z-30 /*z-index: 30;*/z-40 /*z-index: 40;*/z-50 /*z-index: 50;*/z-auto /*z-index: auto;*/ Font-size12345678910text-xs /*font-size: .75rem;*/text-sm /*font-size: .875rem;*/text-base /*font-size: 1rem;*/text-lg /*font-size: 1.125rem;*/text-xl /*font-size: 1.25rem;*/text-2xl /*font-size: 1.5rem;*/text-3xl /*font-size: 1.875rem;*/text-4xl /*font-size: 2.25rem;*/text-5xl /*font-size: 3rem;*/text-6xl /*font-size: 4rem;*/ Line-height123456leading-none /*line-height: 1;*/leading-tight /*line-height: 1.25;*/leading-snug /*line-height: 1.375;*/leading-normal /*line-height: 1.5;*/leading-relaxed /*line-height: 1.625;*/leading-loose /*line-height: 2;*/ Font-weight123456789font-hairline /*font-weight: 100;*/font-thin /*font-weight: 200;*/font-light /*font-weight: 300;*/font-normal /*font-weight: 400;*/font-medium /*font-weight: 500;*/font-semibold /*font-weight: 600;*/font-bold /*font-weight: 700;*/font-extrabold /*font-weight: 800;*/font-black /*font-weight: 900;*/ Background-color1234bg-transparent /*background-color: transparent;*/ bg-black /*background-color: #000;*/ bg-white /*background-color: #fff;*/ bg-gray-100 /*background-color: #f7fafc;*/ Border style12345border-solid /*border-style: solid;*/border-dashed /*border-style: dashed;*/border-dotted /*border-style: dotted;*/border-double /*border-style: double;*/border-none /*border-style: none;*/ Border color1234border-transparent /*border-color: transparent;*/border-black /*border-color: #000;*/border-white /*border-color: #fff;*/border-gray-100 /*border-color: #f7fafc*/ Border size12345678910border /*border-width: 1px;*/border-0 /*border-width: 0;*/border-2 /*border-width: 2px;*/border-4 /*border-width: 4px;*/border-8 /*border-width: 8px;*//* ... */border-t /*border-top-width: 1px;*/border-r /*border-right-width: 1px;*/border-b /*border-bottom-width: 1px;*/border-l /*border-left-width: 1px;*/ Border radius12345678910111213rounded-none /*border-radius: 0;*/rounded-sm /*border-radius: .125rem;*/rounded /*border-radius: .25rem;*/rounded-lg /*border-radius: .5rem;*/rounded-full /*border-radius: 9999px;*/rounded-tl-none /*border-top-left-radius: 0;*/rounded-tr-none /*border-top-right-radius: 0;*/rounded-br-none /*border-bottom-right-radius: 0;*/rounded-bl-none /*border-bottom-left-radius: 0;*/rounded-tl-full /*border-top-left-radius: 9999px;*/rounded-tr-full /*border-top-right-radius: 9999px;*/rounded-br-full /*border-bottom-right-radius: 9999px;*/rounded-bl-full /*border-bottom-left-radius: 9999px;*/ Width / Heightwidth와 height은 사용법이 같습니다.w를 h으로 바꿔 사용합니다.예를 들면 h-1 height:0.25rem 입니다. 123456789101112w-0 /*width: 0;*/w-1 /*width: 0.25rem;*//* ... */w-auto /*width: auto;*/w-px /*width: 1px;*/w-1/2 /*width: 50%;*/w-1/3 /*width: 33.333333%;*//* ... */w-10/12 /*width: 83.333333%;*/w-11/12 /*width: 91.666667%;*/w-full /*width: 100%;*/w-screen /*width: 100vw;*/ Padding / Margin패딩 과 마진은 사용법이 같습니다.p를 m으로 바꿔 사용합니다.예를 들면 m-1 margin:0.25rem 입니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152p-0 /*padding: 0;*/p-1 /*padding: 0.25rem;*//* ... */p-px /*padding: 1px;*/py-0/*padding-top: 0;padding-bottom: 0;*/py-1/*padding-top: 0.25rem;padding-bottom: 0.25rem;*//* ... */py-px/*padding-top: 1px;padding-bottom: 1px;*/px-0/*padding-right: 0;padding-left: 0;*/px-1/*padding-right: 0.25rem;padding-left: 0.25rem;*//* ... */px-px/*padding-right: 1px;padding-left: 1px;*/pt-0 /*padding-top: 0;*/pt-1 /*padding-top: 0.25rem;*//* ... */pt-px /*padding-top: 1px;*/pr-0 /*padding-right: 0;*/pr-1 /*padding-right: 0.25rem;*//* ... */pr-px /*padding-right: 1px;*/pb-0 /*padding-bottom: 0;*/pb-1 /*padding-bottom: 0.25rem;*//* ... */pb-px /*padding-bottom: 1px;*/pl-0 /*padding-left: 0;*/pl-1 /*padding-left: 0.25rem;*//* ... */pl-px /*padding-left: 1px;*/ Cursor1234567cursor-auto /*cursor: auto;*/cursor-default /*cursor: default;*/cursor-pointer /*cursor: pointer;*/cursor-wait /*cursor: wait;*/cursor-text /*cursor: text;*/cursor-move /*cursor: move;*/cursor-not-allowed /*cursor: not-allowed;*/ Opacity12345opacity-100 /*opacity: 1;*/opacity-75 /*opacity: .75;*/opacity-50 /*opacity: .5;*/opacity-25 /*opacity: .25;*/opacity-0 /*opacity: 0;*/ 좀 더 자세한 내용은 친절하게 document에 작성되어있습니다.","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/tags/style/"},{"name":"tailwindcss","slug":"tailwindcss","permalink":"http://flamingotiger.github.io/tags/tailwindcss/"}]},{"title":"React Next.js에 Tailwindcss 적용하기","slug":"style/tailwindcss-nextjs","date":"2019-12-27T06:13:59.000Z","updated":"2021-04-30T03:36:18.282Z","comments":true,"path":"style/tailwindcss-nextjs/","link":"","permalink":"http://flamingotiger.github.io/style/tailwindcss-nextjs/","excerpt":"","text":"시작하기부트스트랩과 흡사한 ui 프레임워크 입니다.Tailwind CSS는 사용자 지정이 가능한 저수준 CSS 프레임 워크로, 재정의를 위해 싸워야하는 성가신 스타일없이 맞춤형 디자인을 작성하는 데 필요한 모든 빌딩 블록을 제공하고 있습니다. 대부분의 ui 프레임워크의 경우 미리 디자인 되어 있는 구성요소가 있어 처음에는 빠른 장점이 있습니다.하지만 사이트를 사용자가 지정한 디자인으로 할 경우 많은 제약이 따릅니다.Tailwind는 HTML을 떠나지 않고도 사용자 정의 디자인을 만들 수있는 저수준 유틸리티 클래스를 제공하고 있습니다. 설치하기의존성 설치패키지들을 next 프로젝트에 설치해줍니다. 1npm install tailwindcss autoprefixer postcss-loader --save-dev next 플러그인을 설치해줍니다. 1npm install @zeit/next-css 빌드 파이프 라인 구성루트폴더에 postcss.config.js파일을 만들어 줍니다.빌드 파이프라인을 설정해 주도록 합니다. postcss.config.js123456module.exports = &#123; plugins: [ require('tailwindcss'), require('autoprefixer') ]&#125;; next.config.js123const withCSS = require('@zeit/next-css');module.exports = withCSS(&#123;&#125;); CSS에 Tailwind 추가tailwindcss 구성 파일을 생성npx tailwind init tailwind를 css에 추가해줍니다. styles/main.css123@tailwind base;@tailwind components;@tailwind utilities; CSS 가져 오기pages/index.js 파일을 열어 tailwindcss를 추가합니다. pages/index.js123456789101112import React from 'react'import Link from 'next/link'import Head from 'next/head'import Nav from '../components/nav'import '../styles/main.css' const Home = () =&gt; ( &lt;div&gt; &lt;Head&gt; &lt;title&gt;Home&lt;/title&gt; &lt;/Head&gt; 이제 className속성 에서 Tailwind CSS 유틸리티를 사용할 수 있습니다 ! Error웹스톰에서 에러 밑줄과 unknown at rule 에러가 나오는 경우 환경설정으로 들어가서 Preferences -&gt; Editor -&gt; InspectionsCSS -&gt; Invalid elements 카테고리안에 unknown at rule 이부분의 체크를 해제 합니다. 다음과 같이 에러가 사라졌습니다","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/tags/style/"},{"name":"tailwindcss","slug":"tailwindcss","permalink":"http://flamingotiger.github.io/tags/tailwindcss/"}]},{"title":"Typescript v3.7 특징","slug":"javascript/typescript-optional-chaining","date":"2019-12-27T04:23:13.000Z","updated":"2021-04-30T03:36:18.281Z","comments":true,"path":"javascript/typescript-optional-chaining/","link":"","permalink":"http://flamingotiger.github.io/javascript/typescript-optional-chaining/","excerpt":"","text":"시작하기Kotlin이나 Swift등의 언어에서는 사용중인 문법으로,3.7버전을 통해 타입스크립트에서도 Optional Chaining을 지원합니다. Optional Chaining서버에서 데이터를 가져오는 상황이라고 가정하고 예시를 들어 보겠습니다.data: { animal:{ name: &#39;dog&#39; } } 를 반환할 예정입니다.data는 undefined이나 null 일 수 있습니다. 123456789// 이전if (data &amp;&amp; data.animal &amp;&amp; data.animal.name) &#123; // ...&#125;// 3.7 이후if (data?.animal?.name) &#123; // ...&#125; 코드가 훨씬 간단해 졌습니다. 반환값?. 연산자는 좌측의 값에 대해 null인지 undefined인지 확인하고 해당한다면 이후 속성을 찾는 작업은 중지하고 undefined를 반환합니다. &amp;&amp;와의 차이점?.연산자는 기존 코드에서 많이 사용된 &amp;&amp;를 대체할 수 있겠지만 둘은 체크하는 타입이 다릅니다.&amp;&amp;연산자는 앞의 피연산자가 falsy(false, null, undefined, ‘’, 0, NaN)인지 확인하지만 ?.연산자는 null과 undefined만을 확인합니다. Optional 요소에의 접근12345678function tryGetFirstElement&lt;T&gt;(arr?: T[]) &#123; // 이전 // return (arr === null || arr === undefined) ? // undefined : arr[0]; // 3.7 이후 return arr?.[0];&#125; arr가 optional이지만 배열 요소 접근하는 방법으로 사용할 수 있습니다. Optional 함수 실행함수에 대해서 함수의 유무에 따라 실행 혹은 undefined 반환할 수 있습니다. 1234567891011async function makeRequest(url: string, log?: (msg: string) =&gt; void) &#123; // 3.7이후 log?.(`Request started at $&#123;new Date().toISOString()&#125;`); // 이전 // if (log != null) &#123; // log(`Request started at $&#123;new Date().toISOString()&#125;`); // &#125; const result = (await fetch(url)).json(); log?.(`Request finished at at $&#123;new Date().toISOString()&#125;`); return result;&#125; Nullish Coalescing OperatorNullish Coalescing Operator도 Optional Chaining과 마찬가지로??라는 연산자를 통해 앞의 피연산자가 null 혹은 undefined 인지 확인하고, || 와 같습니다. 1234const False = false;const True = true;const Boolean = False || True; // trueconst BooleanNCO = False ?? True; // false || 의 경우 둘중하나가 true가 되는값이 반환되고,?? 의 경우 Optional Chaining과 같이 앞 피연산자가 undefined 혹은 null 인지 확인합니다. Type Alias1234567891011121314151617181920212223// 이전type Json = | string | number | boolean | null | JsonObject | JsonArray;interface JsonObject &#123; [property: string]: Json;&#125;interface JsonArray extends Array&lt;Json&gt; &#123;&#125;// 3.7 이후type Json = | string | number | boolean | null | &#123; [property: string]: Json &#125; | Json[]; 호출하지 않는 함수를 체크1234567891011121314151617181920212223242526272829303132333435363738// 수정 이전interface User &#123; isAdministrator(): boolean; notify(): void; doNotDisturb?(): boolean;&#125;// ...// 에러코드!!function doAdminThing(user: User) &#123; // oops! isAdministrator 는 함수입니다! if (user.isAdministrator) &#123; sudo(); editTheConfiguration(); &#125; else &#123; throw new AccessDeniedError(\"User is not an admin\"); &#125;&#125;// 수정 이후interface User &#123; isAdministrator(): boolean; notify(): void; doNotDisturb?(): boolean;&#125;function issueNotification(user: User) &#123; if (user.doNotDisturb) &#123; // OK, property is optional &#125; if (user.notify) &#123; // OK, called the function user.notify(); &#125;&#125; 함수 콜없이 테스트하려고 한다면, undefined/null을 포함하도록 수정하거나,if(!!user.isAdministrator)와 같은 것을 쓰면서 의도적으로 강요한 것이라고 나타내야 합니다.","categories":[{"name":"Js / Ts","slug":"Js-Ts","permalink":"http://flamingotiger.github.io/categories/Js-Ts/"},{"name":"typescript","slug":"Js-Ts/typescript","permalink":"http://flamingotiger.github.io/categories/Js-Ts/typescript/"}],"tags":[]},{"title":"styled-components 리액트 컴포넌트 스타일링","slug":"style/styled-components","date":"2019-12-26T05:57:44.000Z","updated":"2021-04-30T03:36:18.282Z","comments":true,"path":"style/styled-components/","link":"","permalink":"http://flamingotiger.github.io/style/styled-components/","excerpt":"","text":"시작하기styled-components는 리액트 CSS-in-JS 관련 라이브러리입니다.css를 자바스크립트 파일안에 작성하는 형태입니다.기존 css의 경우 웹사이트를 불러올때 모든 css 로딩합니다.하지만 styled-components의 경우에는 컴포넌트가 실행 될때만 스타일을 로드합니다.사용하지 않는 스타일은 표현하지 않습니다. 설치npm install styled-components 사용하기사용법은 css, sass와 비슷합니다. 기본사용방법App.tsx1234567891011121314151617181920212223242526272829import React from 'react';import styled from 'styled-components';const Box = styled.div` width: 200px; height: 200px;`const Button = styled.button` // 리액트처럼 props를 넘겨줄 수 있습니다. color: $&#123;props =&gt; props.color&#125;; padding: 10px; background-color: #fff;`const Border = styled.div` border: 1px solid red; /* &amp; 문자를 사용해서 Sass 처럼 자기 자신을 선택할 수 있습니다. */ &amp;.hover&#123; border: 2px solid red; &#125;`const App:React.FC = () =&gt; &#123; return (&lt;Box&gt; &lt;Button color=\"black\"&gt;버튼 입니다.&lt;/Button&gt; &lt;Border&gt;Border 스타일입니다.&lt;/Border&gt; &lt;/Box&gt;)&#125; 컴포넌트에 스타일 넣기12345678const MyComponent = styled(Component)` color: red; border: 1px solid red;`const MyButton = styled('button')` color: red; border: 1px solid red;` Nested 스타일내부 스타일을 주고 싶을 경우 사용합니다.주의 할 점은 내부에 적용할 스타일은 상단에 미리 정의가 되어 있어야 합니다.아래와 같은 경우 Border가 상단에 정의 되어 있어야 하단에서 사용할 수 있습니다. 12345678910const Border = styled.div` border: 1px solid red;`const BorderWrapper = styled.div` width: 100px; height: 100px; $&#123;Border&#125; &#123; border: 1px solid yellow; &#125;` 반응형 디자인기존 미디어 쿼리 사용법과 흡사합니다. 123456789const Wrapper = styled.div` border: 1px solid red; @media (max-width: 1024px) &#123; border: 1px solid blue; &#125; @media (max-width: 768px) &#123; border: 1px solid yellow; &#125;` styled-components에 대해서 알아 보았습니다.사용법은 기존 css나 sass와 많이 다르지 않아 사용하기 수월했습니다.","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"styled","slug":"styled","permalink":"http://flamingotiger.github.io/tags/styled/"},{"name":"styled-components","slug":"styled-components","permalink":"http://flamingotiger.github.io/tags/styled-components/"},{"name":"css in js","slug":"css-in-js","permalink":"http://flamingotiger.github.io/tags/css-in-js/"}]},{"title":"Nextjs 에서 typescript 적용하기","slug":"frontend/react/next-typescript","date":"2019-12-24T07:27:00.000Z","updated":"2021-04-30T03:36:18.278Z","comments":true,"path":"frontend/react/next-typescript/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/next-typescript/","excerpt":"","text":"시작하기서버사이드렌더링(server side rendering, SSR)를 손쉽게 구현할수 있는 프레임워크입니다.Typescript를 적용해서 사용해보도록 하겠습니다. 초기설정두가지 방법으로 설정을 할 수 있습니다. basic12345mkdir hello-nextcd hello-nextnpm init -ynpm install --save react react-dom nextmkdir pages 프로젝트를 생성하고 react와 next를 저장해주도록 합니다.최상단 루트 폴더에서 pages폴더를 만들어 줍니다. 이 폴더의 이름은 변경되서는 안되고 모든 페이지 관련파일은 pages폴더 내부에 들어 있어야 합니다. Index.js1234567const Index = () =&gt; ( &lt;div&gt; &lt;p&gt;Index 페이지 입니다.&lt;/p&gt; &lt;/div&gt;);export default Index; pages 폴더 내부에 index.js파일을 생성합니다. 12345\"scripts\": &#123; \"dev\": \"next\", \"build\": \"next build\", \"start\": \"next start\"&#125; 터미널에서 npm run dev를 하면 서버가 구동됩니다. create-next-appcreate-react-app과 비슷한 사용방법으로 기본틀은 잡혀있습니다.create-next-app app-name으로 js로 된 기본 프로젝트를 생성 할 수 있습니다. Typescript 적용하기typescript 관련 모듈을 설치 해줍니다.블로그 혹은 깃헙에서 보이는 Next JS 의 공식모듈 @zeit/next-typescript의 경우 사용하지 않아도 됩니다.@zeit/next-typescript을 사용시 다음과 같은 로그가 나옵니다. 1@zeit/next-typescript is no longer needed since Next.js has built-in support for TypeScript now. Please remove it from your next.config.js and your .babelrc 쉽게 말해서 Next.js는 현재 TypeScript에 대한 내장 지원이 있으므로 @zeit/next-typescript을 사용할 필요가 없다. 그러니 제거하라는 로그입니다. 1npm install -D @types/next @types/react @zeit/next-typescript @types/next @types/react typescript @types/node 루트 폴더에서 next.config.js, tsconfig.json 파일들을 생성합니다. next.config.js1module.exports = &#123;&#125; config 옵션을 설정해 줍니다. tsconfig.json12345678910111213141516171819&#123; \"compilerOptions\": &#123; \"allowJs\": true, \"allowSyntheticDefaultImports\": true, \"jsx\": \"preserve\", \"lib\": [\"dom\", \"es2017\"], \"module\": \"esnext\", \"moduleResolution\": \"node\", \"noEmit\": true, \"noUnusedLocals\": true, \"noUnusedParameters\": true, \"preserveConstEnums\": true, \"removeComments\": false, \"skipLibCheck\": true, \"sourceMap\": true, \"strict\": true, \"target\": \"esnext\" &#125;&#125; 배포하기이 부분은 필수는 아닙니다Next.js 프로젝트가 설정되면 now로 앱을 배포해보도록 하겠습니다.Now CLI를 설치하거나npm i -g now로 설치를 해줍니다. next.config.js파일을 수정해줍니다. next.config.js123456module.exports = &#123; typescript: &#123; ignoreDevErrors: true, &#125;, target: 'serverless',&#125;; Next.js 빌드 대상을 &quot;serverless&quot;로 설정하여 서버리스 빌드를 활성화합니다.다음으로, 응용 프로그램의 시작점이 무엇인지, 응용 프로그램을 빌드 및 배포하는 데 사용해야하는 Builder가 무엇인지 지정해주어야 합니다.루트 폴더에 now.json파일을 생성해줍니다. now 작성방법 12345&#123; \"version\": 2, \"name\": \"react-next-app\", \"builds\": [&#123; \"src\": \"next.config.js\", \"use\": \"@now/next\" &#125;]&#125; npm run build로 배포를 할 수 있습니다. prettier 및 eslint 적용하기prettier와 eslint는 eslint 적용 포스트를 참고해주세요","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"next","slug":"next","permalink":"http://flamingotiger.github.io/tags/next/"}]},{"title":"TCP / UDP","slug":"DevTIL/CS/tcp-udp","date":"2019-12-23T14:04:33.000Z","updated":"2021-04-30T03:36:18.268Z","comments":true,"path":"DevTIL/CS/tcp-udp/","link":"","permalink":"http://flamingotiger.github.io/DevTIL/CS/tcp-udp/","excerpt":"","text":"시작하기라우터를 설정하거나 방화벽 소프트웨어를 구성하거나 VPN기능을 살펴볼때 TCP 및 UDP에 대해 들어본 적이 있을 것입니다.TCP와 UDP의 차이점은 무엇일까요?차이점을 이해하기 위해서는 먼저 TCP와 UDP의 특징을 알아야합니다. TCP전송 제어 프로토콜 (Transmission Control Protocol, TCP)는 컴퓨터가 인터넷을 통해 통신하는 데 사용하는 연결 지향 프로토콜입니다.TCP/IP 네트워크의 주요 프로토콜 중 하나입니다.TCP는 오류 검사를 제공하고 데이터 전달을 보장하며 패킷이 전송 된 순서대로 전달됩니다. UDP사용자 데이터그램 프로토콜(User Datagram Protocol, UDP)은 TCP와 동일하게 작동하지만 오류 검사 및 복구 서비스가 필요하지 않다고 가정하는 비연결 프로토콜입니다. 대신 UDP는 수신 여부에 관계없이 수신자에게 데이터 그램을 지속적으로 보냅니다. 차이점TCP는 신뢰할 수 있습니다. TCP 프로토콜을 사용하여 전송 된 데이터는 수신자에게 전달됩니다. 전송 중에 데이터가 손실되면 데이터를 복구하고 다시 보냅니다. TCP는 또한 패킷의 오류를 확인하고 패킷을 추적하여 데이터가 손실되거나 손상되지 않도록합니다. UDP는 신뢰할 수 없으며 보장 된 전달을 제공하지않고 전송 중에 데이터 그램 패킷이 손상되거나 손실 될 수 있습니다. TCP는 순서와 순서를 지정하여 서버에서 전송 된 패킷이 전송 된 순서와 동일한 순서로 클라이언트에 전달되도록합니다.반면에 UDP는 순서에 상관없이 패킷을 보냅니다. 속도TCP는 할 일이 많기 때문에 UDP보다 느립니다.TCP는 연결을 설정하고 오류를 확인하며 파일이 전송 된 순서대로 수신되도록해야합니다. 사용법TCP는 타이밍이 중요하지 않은 높은 안정성이 필요한 응용 프로그램에 사용하기에 가장 적합합니다. 월드 와이드 웹 (HTTP, HTTPS) 보안 쉘 (SSH) 파일 전송 프로토콜 (FTP) 이메일 (SMTP, IMAP / POP) UDP는 속도와 효율성이 필요한 응용 프로그램에 가장 적합합니다. VPN 터널링 스트리밍 비디오 온라인 게임 생방송 도메인 이름 시스템 (DNS) VoIP (Voice over Internet Protocol) TFTP (Trivial File Transfer Protocol)","categories":[{"name":"DevTIL","slug":"DevTIL","permalink":"http://flamingotiger.github.io/categories/DevTIL/"},{"name":"CS","slug":"DevTIL/CS","permalink":"http://flamingotiger.github.io/categories/DevTIL/CS/"}],"tags":[{"name":"computer science","slug":"computer-science","permalink":"http://flamingotiger.github.io/tags/computer-science/"},{"name":"network","slug":"network","permalink":"http://flamingotiger.github.io/tags/network/"}]},{"title":"React-helmet을 이용한 검색 최적화","slug":"frontend/react/react-helmet","date":"2019-12-20T12:37:37.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-helmet/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-helmet/","excerpt":"","text":"시작하기검색 최적화를 위한 방법으로 ssr, nextjs, helmet등이 있습니다.이번 포스트에서는 helmet에 대한 내용을 다루도록하겠습니다.헬멧은 일반 HTML 태그를 사용하여 일반 HTML 태그를 출력합니다.매우 간단하고, React 초보자에게 친숙합니다.리액트 헬멧 Github 설치npm install --save react-helmet @types/react-helmet 리액트 헬멧 패키지를 설치해줍니다. 사용법사용법은 단순합니다.Helmet 내부에 HTML태그를 넣어 주면 됩니다. App.tsx1234567891011121314import React from \"react\";import &#123; Helmet &#125; from \"react-helmet\";const App = () =&gt; &#123; return ( &lt;div className=\"App\"&gt; &lt;Helmet&gt; &lt;meta charSet=\"utf-8\" /&gt; &lt;title&gt;My Title&lt;/title&gt; &lt;/Helmet&gt; // ... &lt;/div&gt; );&#125;; 특징중첩 또는 후자의 구성 요소는 중복 변경 사항을 대체합니다.쉽게말해서 중복되거나 여러개의 helmet이 있다면 나중에 쓰인 helmet이 대체합니다. 예를들어 다음과 같은 코드가 있다고 하면 12345678910111213&lt;Parent&gt; &lt;Helmet&gt; &lt;title&gt;My Title&lt;/title&gt; &lt;meta name=\"description\" content=\"Helmet application\" /&gt; &lt;/Helmet&gt; &lt;Child&gt; &lt;Helmet&gt; &lt;title&gt;Nested Title&lt;/title&gt; &lt;meta name=\"description\" content=\"Nested component\" /&gt; &lt;/Helmet&gt; &lt;/Child&gt;&lt;/Parent&gt; 결과값으로 1234&lt;head&gt; &lt;title&gt;Nested Title&lt;/title&gt; &lt;meta name=\"description\" content=\"Nested component\"&gt;&lt;/head&gt; 내부에 있는 나중에 읽힌 helmet이 적용되는것을 확인할 수 있습니다. 응용하기헤더에 사용할 태그들을 미리 정의해 놓고 컴포넌트로 분리하면 손쉽게 사용가능합니다. 1234567891011121314151617181920212223242526272829import React from 'react';import &#123; Helmet &#125; from 'react-helmet';interface Props &#123; keywords: string; description: string; title: string; favicon?: string;&#125;const ReactHelmet:React.FC&lt;Props&gt; = (&#123; keywords, description, title, favicon &#125;) =&gt; &#123; return ( &lt;Helmet&gt; &lt;meta name=\"description\" content=&#123;description&#125; /&gt; &lt;meta name=\"keywords\" content=&#123;keywords&#125; /&gt; &lt;title&gt;&#123;title&#125;&lt;/title&gt; &lt;meta property=\"og:title\" content=&#123;title&#125; /&gt; &lt;meta property=\"og:image\" content=&#123;favicon&#125; /&gt; &lt;meta property=\"og:site_name\" content=\"\" /&gt; &lt;meta property=\"og:description\" content=&#123;description&#125; /&gt; &lt;meta name=\"twitter:title\" content=&#123;title&#125; /&gt; &lt;meta name=\"twitter:description\" content=&#123;description&#125; /&gt; &lt;meta name=\"twitter:image\" content=&#123;favicon&#125; /&gt; &lt;meta name=\"twitter:card\" content=\"summary\" /&gt; &lt;/Helmet&gt; );&#125;;export default ReactHelmet; 컴포넌트에서 다음과 같이 사용할 수 있습니다. 12345678910111213141516import React from \"react\";import ReactHelmet from './ReactHelmet';const App = () =&gt; &#123; return ( &lt;div className=\"App\"&gt; &lt;ReactHelmet keywords=\"react, react-helmet\" description=\"라액트 헬멧입니다.\" title=\"App component\" favicon=\"/image/android-icon-144x144.jpg\" /&gt; // ... &lt;/div&gt; );&#125;;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"deploy","slug":"deploy","permalink":"http://flamingotiger.github.io/tags/deploy/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"}]},{"title":"React Element 복제하기","slug":"frontend/react/react-element-clone","date":"2019-12-20T05:30:43.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-element-clone/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-element-clone/","excerpt":"","text":"시작하기j쿼리의 경우 clone을 사용하여 간단하게 카피를 할 수 있습니다.리액트에서는 어떻게 해야하는지 알아보도록 하겠습니다. Element를 복제해보도록 하겠습니다. 사전준비복제를 하기위해 복제 대상인 element를 만들어 줍니다. App.tsx123456789101112import React from 'react';const App: React.FC = () =&gt; &#123; const el = React.useRef(null); const cloneElement = () =&gt; &#123;&#125; return ( &lt;div className=\"App\"&gt; &lt;div ref=&#123;el&#125;&gt;Clone Element&lt;/div&gt; &lt;button onClick=&#123;() =&gt; cloneElement()&#125;&gt;Element 복제하기&lt;/button&gt; &lt;/div&gt; );&#125; 기본구성이 완료되었습니다. 기능구현복제기능을 담당할 cloneElement 함수를 구현하겠습니다. 12345// ...const cloneElement = () =&gt; &#123; const elementAssign: any = Object.assign(&#123;&#125;, el.current);&#125;// ... Object.assign으로 element를 복사해줍니다.Object.assign는 객체로부터 대상 객체로 속성을 복사할 때 사용합니다. 대상 객체를 반환합니다.자세한 내용은 Object.assign 을 참고해주세요. console.log(elementAssign)를 해보면 다음이미지와 같은 값이 반환됩니다.__reactEventHandlers$id, __reactInternalInstance$id 이렇게 두가지 값이 반환됩니다.reactInternalInstance$id의 값이 FiberNode로 나옵니다.하지만 저희는 __reactEventHandlers$id를 사용할 예정입니다. 참고내부에있는 FiberNode에 도달하면 개인 필드를 통과했기 때문에 코드가 매우 비효율적임을 의미합니다. 123456// ...const cloneElement = () =&gt; &#123; const elementAssign: any = Object.assign(&#123;&#125;, el.current); const reactHandlerKey = Object.keys(elementAssign).filter((item: string) =&gt; item.indexOf('__reactEventHandlers') &gt;= 0);&#125;// ... __reactEventHandlers인값을 가져옵니다. 1234567// ...const cloneElement = () =&gt; &#123; const elementAssign: any = Object.assign(&#123;&#125;, el.current); const reactHandlerKey = Object.keys(elementAssign).filter((item: string) =&gt; item.indexOf('__reactEventHandlers') &gt;= 0); const reactHandler: &#123; children: JSX.Element &#125; = elementAssign[reactHandlerKey[0]];&#125;// ... elementAssign에서 reactHandler값만 가져오도록합니다. 12345678// ...const cloneElement = () =&gt; &#123; const elementAssign: any = Object.assign(&#123;&#125;, el.current); const reactHandlerKey = Object.keys(elementAssign).filter((item: string) =&gt; item.indexOf('__reactEventHandlers') &gt;= 0); const reactHandler: &#123; children: JSX.Element &#125; = elementAssign[reactHandlerKey[0]]; const cloneTargetElement: JSX.Element = React.cloneElement(reactHandler.children, &#123;...reactHandler&#125;);&#125;// ... reactHandler.children값을 jsx파일로 복사해줍니다. 그리고 나머지 값(props, style…)등은 두번째인자로 넣어줍니다. 컴포넌트에 기능을 적용해보겠습니다. App.tsx1234567891011121314151617181920212223242526import React, &#123; useState &#125; from 'react';const App: React.FC = () =&gt; &#123; const el = React.useRef&lt;HTMLDivElement&gt;(null); const [elements, setElements] = useState&lt;JSX.Element[]&gt;([]); const cloneElement = () =&gt; &#123; const elementAssign: any = Object.assign(&#123;&#125;, el.current); const reactHandlerKey = Object.keys(elementAssign).filter((item: string) =&gt; item.indexOf('__reactEventHandlers') &gt;= 0); const reactHandler: &#123; children: JSX.Element &#125; = elementAssign[reactHandlerKey[0]]; const cloneTargetElement: JSX.Element = React.cloneElement(reactHandler.children, &#123;...reactHandler&#125;); setElements((prevState: JSX.Element[]) =&gt; [...prevState, cloneTargetElement]) &#125; return ( &lt;div className=\"App\"&gt; &lt;div ref=&#123;el&#125;&gt; &lt;div&gt;Clone Element&lt;/div&gt; &lt;/div&gt; &lt;button onClick=&#123;() =&gt; cloneElement()&#125;&gt;Element 복하기&lt;/button&gt; &lt;div&gt;Element:&#123;elements.length &gt; 0 &amp;&amp; elements.map((element: JSX.Element, i: number) =&gt; &lt;div key=&#123;i&#125;&gt;&#123;element&#125;&lt;/div&gt;)&#125;&lt;/div&gt; &lt;/div&gt; );&#125;export default App; useElement에 element들을 저장하고 map으로 element을 렌더링해주도록 합니다. 이것으로 리액트에서 element를 복제하는방법에 대해서 알아보았습니다.상태에 데이터를 저장하고 컴포넌트에 데이터를 넣어서 표현하는 방법이 더쉽고 효율적입니다.이 방법은 element를 어쩔수 없이 복제해야 할때만 사용합니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"},{"name":"element","slug":"element","permalink":"http://flamingotiger.github.io/tags/element/"},{"name":"clone","slug":"clone","permalink":"http://flamingotiger.github.io/tags/clone/"}]},{"title":"React-router-dom 적용하기","slug":"frontend/react/react-router-dom","date":"2019-12-19T11:55:53.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-router-dom/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-router-dom/","excerpt":"","text":"시작하기리액트 싱글페이지 SPA(Single page application)에서 다른페이지로 이동하고 싶을때 사용하는 라이브러리입니다.create-react-app에서 라우터를 사용해 보겠습니다. 설치npm install react-router-dom @types/react-router-dom 라우터 설정index.tsx12345678910111213import React from 'react';import ReactDOM from 'react-dom';import './index.css';import App from './App';import * as serviceWorker from './serviceWorker';import &#123; BrowserRouter &#125; from 'react-router-dom';ReactDOM.render( &lt;BrowserRouter&gt; &lt;App /&gt; &lt;/BrowserRouter&gt;, document.getElementById('root'));serviceWorker.unregister(); 최상단 App컴포넌트를 BrowserRouter로 감싸주어야 내부 컴포넌트에서 react-router-dom기능을 사용할 수 있습니다. 라우터를 관리할 Main.tsx 파일을 만들어 줍니다. Main.tsx1234567891011121314151617181920212223242526import React from 'react';import &#123; Switch, Route &#125; from 'react-router-dom';const Main:React.FC = () =&gt; &#123; return ( &lt;Switch&gt; &lt;Route path=\"/about\" component=&#123;About&#125;/&gt; &lt;Route path=\"/users\" component=&#123;Users&#125;/&gt; &lt;Route path=\"/\" component=&#123;Home&#125;/&gt; &lt;/Switch&gt; )&#125;export default Main;const Home:React.FC = () =&gt; &#123; return &lt;h2&gt;Home&lt;/h2&gt;;&#125;const About:React.FC = () =&gt; &#123; return &lt;h2&gt;About&lt;/h2&gt;;&#125;const Users:React.FC = () =&gt; &#123; return &lt;h2&gt;Users&lt;/h2&gt;;&#125; Switch 태그 내부의 Route중에 path가 현재 라우터 값과 일치하는 컴포넌트를 뿌려줍니다.Route 의 속성으로 component:컴포넌트 exact: 중복 되지않고 하나만 존재해야할때 path: 라우터 주소 라우터의 배치 순서도 중요합니다.예를들어서 위의 예제를 통해 배치 순서도를 설명하겠습니다.현재 URL을 http://localhost:3000/users 라고 가정하겠습니다. 참고: /users와 같이 앞에 아무것도 없이 /가 있는 경우 루트를 의미합니다. Main.tsx12345678910111213141516171819202122// 이 경우에는 path가 /인 Home컴포넌트가 실행됩니다.&lt;Switch&gt; &lt;Route path=\"/\" component=&#123;Home&#125;/&gt; &lt;Route path=\"/users\" component=&#123;Users&#125;/&gt; &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;&lt;/Switch&gt;// 정상적으로 path가 /users인 Users컴포넌트가 실행됩니다.&lt;Switch&gt; &lt;Route path=\"/users\" component=&#123;Users&#125;/&gt; &lt;Route path=\"/about\" component=&#123;About&#125;/&gt; &lt;Route path=\"/\" component=&#123;Home&#125;/&gt;&lt;/Switch&gt;// 다른방법으로 exact를 사용하는 방법이 있습니다.&lt;Switch&gt; &lt;Route exact path=\"/\" component=&#123;Home&#125;/&gt; // exact는 exact=&#123;true&#125;을 줄인것입니다. // 오로지 url이 / 루트일때만 Home을 실행합니다. &lt;Route path=\"/users\" component=&#123;Users&#125;/&gt; &lt;Route path=\"/about\" component=&#123;About&#125;/&gt;&lt;/Switch&gt; 라우터를 설정할때 위에서부터 아래로 차례차례 읽습니다.순서에 맞게 라우터를 설정해 주면됩니다. Link 컴포넌트App.tsx12345678910111213141516171819202122232425import React from 'react';import &#123; Link &#125; from 'react-router-dom';import Main from './Main';const App = () =&gt; &#123; return ( &lt;div&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt; &lt;Link to=\"/\"&gt;Home&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=\"/about\"&gt;About&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=\"/users\"&gt;Users&lt;/Link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;Main /&gt; &lt;/div&gt; );&#125;export default App; 코드를 보시면 Link라는 컴포넌트를 사용했습니다. Link에 to속성으로 url을 넣어줍니다.중요한 컴포넌트로, 이 컴포넌트의 기능은 다른 라우터로 이동하게 해주는 &lt;a&gt;태그와 비슷한 기능을 합니다.하지만 중요한 차이점이 있습니다.a태그를 사용할시에는 웹사이트 페이지가 새로고침이 됩니다. 그렇게 되면 페이지를 다시 읽어 내는 것이기에 속도가 조금 느릴수 밖에 없습니다.하지만 Link는 페이지를 새로고침하지 않으면서 라우터를 빠르게 이동할수 있습니다. a태그의 경우 상단에 로딩바가 계속생겨나는 것이 보입니다.하지만 Link의 경우 로딩바없이 바로바로 라우터 변경이 되는것을 확인할 수 있습니다.현재이미지의 경우 많은 정보가 없기 때문에 차이점이 적게 느껴지지만 사이트가 커질수록 더 많은 차이를 느낄수 있습니다. Router hooksreact-router-dom에서도 훅스를 지원합니다.React가 16.8.X보다 높은 버젼이어야합니다. App.tsx12345678910111213141516171819202122232425262728import React from 'react';import &#123; Link &#125; from 'react-router-dom';import Main from './Main';const App = () =&gt; &#123; return ( &lt;div&gt; // ... &lt;li&gt; &lt;Link to=\"/\"&gt;Home&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=\"/about\"&gt;About&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=\"/users\"&gt;Users&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=\"/movie/marvel\"&gt;마블&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=\"/movie/dc-comics\"&gt;DC코믹스&lt;/Link&gt; &lt;/li&gt; // ... &lt;/div&gt; );&#125;export default App; useParamsMain.tsx1234567891011121314151617181920212223import React from 'react';import &#123; Switch, Route, useParams &#125; from 'react-router-dom';const Main:React.FC = () =&gt; &#123; return ( &lt;Switch&gt; //.. &lt;Route path=\"/movie/:type\" component=&#123;Movie&#125;/&gt; &lt;Route path=\"/\" component=&#123;Home&#125;/&gt; &lt;/Switch&gt; )&#125;export default Main;const Movie:React.FC = () =&gt; &#123; const &#123; type &#125; = useParams(); return (&lt;div&gt; &lt;h2&gt;Movie&lt;/h2&gt; &lt;p&gt;&#123;type&#125;&lt;/p&gt; // \"marvel\" &lt;/div&gt;)&#125; useParams로 /movie/:type :뒤에 있는 파라미터 값을 가져올 수 있습니다. useLocation123456789import &#123; useLocation &#125; from 'source/_posts/frontend/react-router-dom/react-router-dom';const location = useLocation();&#123; hash: \"\" key: \"hhedtc\" pathname: \"/movie/marvel\" search: \"\" state: undefined&#125; useRouteMatch12345678import &#123; useRouteMatch &#125; from 'source/_posts/frontend/react/react-router-dom';const &#123; type &#125; = useRouteMatch();&#123; isExact: true params: &#123;type: \"marvel\"&#125; path: \"/movie/:type\" url: \"/movie/marvel\"&#125; useHistory1234567891011import &#123; useHistory &#125; from \"source/_posts/frontend/react/react-router-dom\";const Button = () =&gt; &#123; const history = useHistory(); const handleClick = () =&gt; &#123; history.push(\"/home\"); &#125; return ( &lt;button onClick=&#123;() =&gt; handleClick()&#125;&gt;GO HOME&lt;/button&gt; );&#125; useHistory에서 push/replace를 통해 페이지를 이동할수있습니다. push/replace 차이점 12history.push(\"/home\"); // home으로 페이지 이동하고 뒤로가기가 가능합니다.history.replace(\"/home\"); // home으로 페이지 이동하고 뒤로가기가 불가능합니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"router","slug":"router","permalink":"http://flamingotiger.github.io/tags/router/"},{"name":"react-router-dom","slug":"react-router-dom","permalink":"http://flamingotiger.github.io/tags/react-router-dom/"}]},{"title":"리액트에 부트스트랩(bootstrap) 사용하기","slug":"style/react-bootstrap","date":"2019-12-19T04:46:55.000Z","updated":"2021-04-30T03:36:18.282Z","comments":true,"path":"style/react-bootstrap/","link":"","permalink":"http://flamingotiger.github.io/style/react-bootstrap/","excerpt":"","text":"#시작하기부트스트랩은 ui프레임워크로 손쉽데 ui디자인을 구현할수 있습니다다React프로젝트에서 부트스트립을 사용해보도록하겠습니다.프로젝트 설치하기npm install react-bootstrap bootstrap로 패키지를 설치 합니다. Stylesheets중요 - 최상단의 루트파일인 src/index.js 또는 App.js 파일에 다음 스타일을 추가해줍니다.import &#39;bootstrap/dist/css/bootstrap.min.css&#39;;만약 추가하지 않는다면 부트스트랩의 스타일은 적용되지 않습니다. 사용하기import 하는 방법 두가지가 있습니다. 123import Button from 'react-bootstrap/Button';// or import &#123; Button &#125; from 'source/_posts/style/react-bootstrap'; 프로젝트에서 사용하고자하는 컴포넌트를 import를 해서 적용하시면 됩니다.예시로 버튼을 추가해 보도록 하겠습니다. Aop.tsx12345678910111213import &#123; Button, ButtonToolbar &#125; from 'react-bootstrap';&lt;ButtonToolbar&gt; &lt;Button variant=\"primary\"&gt;Primary&lt;/Button&gt; &lt;Button variant=\"secondary\"&gt;Secondary&lt;/Button&gt; &lt;Button variant=\"success\"&gt;Success&lt;/Button&gt; &lt;Button variant=\"warning\"&gt;Warning&lt;/Button&gt; &lt;Button variant=\"danger\"&gt;Danger&lt;/Button&gt; &lt;Button variant=\"info\"&gt;Info&lt;/Button&gt; &lt;Button variant=\"light\"&gt;Light&lt;/Button&gt; &lt;Button variant=\"dark\"&gt;Dark&lt;/Button&gt; &lt;Button variant=\"link\"&gt;Link&lt;/Button&gt;&lt;/ButtonToolbar&gt; 이와같이 스타일을 추가에 들이는 시간을 단축시켜주는 프레임워크입니다.프레임워크의 스타일이 고정되어있기에 커스터마이징을 많이 필요할시에는 css, scss, styled-components 등을 이용해서 처음부터 구현하는것이 더 효과적입니다.","categories":[{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/categories/style/"}],"tags":[{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"ui","slug":"ui","permalink":"http://flamingotiger.github.io/tags/ui/"},{"name":"framework","slug":"framework","permalink":"http://flamingotiger.github.io/tags/framework/"},{"name":"bootstrap","slug":"bootstrap","permalink":"http://flamingotiger.github.io/tags/bootstrap/"}]},{"title":"React 프로젝트 GitHub Pages로 배포하기","slug":"frontend/react/create-react-app-deploy","date":"2019-12-19T00:25:40.000Z","updated":"2021-04-30T03:36:18.277Z","comments":true,"path":"frontend/react/create-react-app-deploy/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/create-react-app-deploy/","excerpt":"","text":"시작하기리액트 프로젝트를 github pages를 이용해서 배포해보도록 하겠습니다.프로젝트 생성방법은 이전포스트(create-react-app 타입스크립트 사용하기)를 참고하면 됩니다. 깃헙에서 저장소를 하나 만듭니다.저는 react-deploy-pages라는 이름의 저장소를 만들었습니다. create-react-app react-deploy-pages --typescript프로젝트를 생성합니다. 12345git initgit add README.mdgit commit -m \"first commit\"git remote add origin https://github.com/&#123;username&#125;/&#123;repo-name&#125;.gitgit push -u origin master 프로젝트를 저장소에 업로드 해줍니다. 12cd react-deploy-pages npm install gh-pages --save-dev 프로젝트폴더로 이동하고, 프로젝트에 gh-pages 패키지를 설치해줍니다. package.json12//...\"homepage\": \"http://flamingotiger.github.io/react-deploy-pages\" json 파일내부에 홈페이지 주소를 넣어줍니다.깃헙 유저이름과 저장소의 이름을 다음과 같이 넣어주면 됩니다.양식은 http://{username}.github.io/{repo-name} 입니다. package.json12345\"scripts\": &#123; //... \"predeploy\": \"npm run build\", \"deploy\": \"gh-pages -d build\"&#125; 스크립트 부분에 predeploy와 deploy를 추가해줍니다.그리고나서 npm run deploy를 실행합니다. 123456git add .git commit -m &quot;React 프로젝트 GitHub Pages로 배포&quot;git push origin master// 한줄로 쓰기git add . &amp;&amp; git commit -m &quot;React 프로젝트 GitHub Pages로 배포&quot; &amp;&amp; git push origin master 사이트 주소 url을 확인하고 싶을때 저장소의 setting &gt; options로 가면 확인할 수 있습니다. 만약 사이트에서 readme.md 파일 내용만 나올 경우에 GitHub Pages의 Source부분에서 gh-pages branch로 변경하면 사이트가 정상적으로 배포됩니다. 사이트로 접속하면 다음과 같이 리액트 프로젝트 화면이 나옵니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"deploy","slug":"deploy","permalink":"http://flamingotiger.github.io/tags/deploy/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"}]},{"title":"React+Express+Socketio를 이용한 채팅구현","slug":"frontend/react/react-socketio","date":"2019-12-18T12:18:30.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-socketio/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-socketio/","excerpt":"","text":"시작하기socket은 실시간으로 사용자와 상호작용을 하는 경우 사용합니다.가장 대표적인 예시로 채팅을 들수있습니다. Socket.io하나의 서버에서 정보를 내보내고 해당 정보를 다수의 클라이언트에서 받습니다. 초기 설정백엔드 서버를 먼저 설정하고 리액트 프로젝트를 설정하겠습니다. Node.js + Express터미널1234567mkdir socket-backend // 서버 폴더 생성cd socket-backend // 서버폴더로 이동npm init // npm package 초기 설정npm install --save express socket.io // 패키지 설치touch server.js // server.js파일 생성 http.createServer를 사용하여 서버를 만듭니다. 다음으로 서버의 인스턴스가있는 io를 소켓으로 설정합니다. 마지막으로 서버는 포트 4002에서 수신 대기하도록 설정했습니다. server.js123456789101112131415161718192021222324const express = require('express');const http = require('http');const socketIO = require('socket.io');// localhost 포트 설정const port = 4002;const app = express();// server instanceconst server = http.createServer(app);// socketio 생성후 서버 인스턴스 사용const io = socketIO(server);// socketio 문법io.on('connection', socket =&gt; &#123; console.log('User connected'); socket.on('disconnect', () =&gt; &#123; console.log('User disconnect'); &#125;);&#125;);server.listen(port, () =&gt; console.log(`Listening on port $&#123;port&#125;`)) 메세지를 입력받고 반환하는 부분을 추가하겠습니다. server.js1234567891011121314// ...// socketio 문법io.on('connection', socket =&gt; &#123; socket.on('send message', (item) =&gt; &#123; const msg = item.name + ' : ' + item.message; console.log(msg); io.emit('receive message', &#123;name:item.name, message:item.message&#125;); &#125;); socket.on('disconnect', function () &#123; console.log('user disconnected: ', socket.id); &#125;);&#125;);// ... 서버프로젝트 터미널에서 node server.js를 실행해줍니다.Listening on port 4002값으로 리턴됩니다. React Componentcreate-react-app을 통해 시작하겠습니다. 1234create-react-app socket-app --typescriptcd socket-appnpm install --save socket.io-client @types/socket.io-client socket.io-client 패키지를 설치해줍니다. 컴포넌트 스타일 작성컴포넌트와 스타일을 작성해줍니다. App.tsx12345678910111213141516171819202122232425262728293031323334353637383940414243import React, &#123; ChangeEvent, FormEvent &#125; from 'react';import './App.css';interface Message &#123; name: string, message: string &#125;const App: React.FC = () =&gt; &#123; const [messageList, setMessageList] = React.useState&lt;Message[]&gt;([]); const [value, setValue] = React.useState(''); const submit = (e:FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123; e.preventDefault(); &#125; return ( &lt;div className=\"App\"&gt; &lt;section className=\"chat-list\"&gt; &lt;div className=\"message\"&gt; &lt;p className=\"username\"&gt;username&lt;/p&gt; &lt;p className=\"message-text\"&gt;message&lt;/p&gt; &lt;/div&gt; &lt;/section&gt; &lt;form className=\"chat-form\" onSubmit=&#123;(e:FormEvent&lt;HTMLFormElement&gt;) =&gt; submit(e)&#125;&gt; &lt;div className=\"chat-inputs\"&gt; &lt;input type=\"text\" autoComplete=\"off\" onChange=&#123;(e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; setName(e.target.value)&#125; value=&#123;name&#125; placeholder=\"유저이름\" /&gt; &lt;input type=\"text\" autoComplete=\"off\" onChange=&#123;(e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; setValue(e.target.value)&#125; value=&#123;value&#125; placeholder=\"메세지입력하기\" /&gt; &lt;/div&gt; &lt;button type=\"submit\"&gt;입력하기&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );&#125;export default App; App.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172.chat-form &#123; display: flex; height: 60px; justify-content: space-between; align-items: center; padding: 10px; box-sizing: border-box;&#125;.chat-form &gt; .chat-inputs &#123; flex: 8; display: flex; height: 100%;&#125;.chat-inputs &gt; input &#123; flex: 1; height: 100%; border: 1px solid rgb(150, 150, 150); font-size: 18px; outline: none; transition: border 0.2s; border-radius: 5px; margin: 0 5px; padding: 5px; box-sizing: border-box;&#125;.chat-inputs &gt; input:focus &#123; border: 1px solid rgb(240, 119, 59);&#125;.chat-form &gt; button &#123; flex: 2; margin-left: 10px; border: 0px; background: rgb(240, 119, 59); width: 100px; height: 100%; border-radius: 5px; outline: none; cursor: pointer; color: white; font-size: 18px; transition: background-color 0.2s;&#125;.chat-form &gt; button:active &#123; background-color: rgb(280, 119, 59);&#125;.chat-list &#123; padding: 0 10px; box-sizing: border-box;&#125;.message &#123; min-height: 40px; margin: 5px 0;&#125;.message &gt; .username &#123; margin: 0 0 5px 0; font-size: 14px;&#125;.message &gt; .message-text &#123; margin: 0; font-size: 18px; color: white; width: 100%; display: flex; align-items: center; padding: 10px; box-sizing: border-box; background-color: rgb(240, 119, 59); min-height: 40px; border-radius: 10px;&#125; 연동하기유저의 이름과 메세지를 send message로 소켓서버에 보내주고receive message로 message값을 가져왔습니다. App.tsx12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import React, &#123; ChangeEvent, FormEvent &#125; from 'react';import './App.css';import socketIOClient from \"socket.io-client\";interface Message &#123; name: string, message: string &#125;const App: React.FC = () =&gt; &#123; const [messageList, setMessageList] = React.useState&lt;Message[]&gt;([]); const [name, setName] = React.useState(''); const [value, setValue] = React.useState(''); const socket = socketIOClient('localhost:4002'); const submit = (e: FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123; e.preventDefault(); socket.emit('send message', &#123; name: name, message: value &#125;); &#125;; React.useEffect(() =&gt; &#123; socket.on('receive message', (message: &#123; name: string, message: string &#125;) =&gt; &#123; setMessageList(messageList =&gt; messageList.concat(message)); &#125;) &#125;, []); return ( &lt;div className=\"App\"&gt; &lt;section className=\"chat-list\"&gt; &#123;messageList.map((item: Message, i: number) =&gt; &lt;div key=&#123;i&#125; className=\"message\"&gt; &lt;p className=\"username\"&gt;&#123;item.name.toUpperCase()&#125;&lt;/p&gt; &lt;p className=\"message-text\"&gt;&#123;item.message&#125;&lt;/p&gt; &lt;/div&gt; )&#125; &lt;/section&gt; &lt;form className=\"chat-form\" onSubmit=&#123;(e: FormEvent&lt;HTMLFormElement&gt;) =&gt; submit(e)&#125;&gt; &lt;div className=\"chat-inputs\"&gt; &lt;input type=\"text\" autoComplete=\"off\" onChange=&#123;(e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; setName(e.target.value)&#125; value=&#123;name&#125; placeholder=\"유저이름\" /&gt; &lt;input type=\"text\" autoComplete=\"off\" onChange=&#123;(e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; setValue(e.target.value)&#125; value=&#123;value&#125; placeholder=\"메세지입력하기\" /&gt; &lt;/div&gt; &lt;button type=\"submit\"&gt;입력하기&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; );&#125;export default App;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"node","slug":"node","permalink":"http://flamingotiger.github.io/tags/node/"},{"name":"socketio","slug":"socketio","permalink":"http://flamingotiger.github.io/tags/socketio/"},{"name":"express","slug":"express","permalink":"http://flamingotiger.github.io/tags/express/"}]},{"title":"Hexo seo 검색엔진 최적화하기","slug":"etc/hexo/hexo-seo","date":"2019-12-18T05:13:46.000Z","updated":"2021-04-30T03:36:18.272Z","comments":true,"path":"etc/hexo/hexo-seo/","link":"","permalink":"http://flamingotiger.github.io/etc/hexo/hexo-seo/","excerpt":"","text":"시작하기hexo 블로그를 만든이후 구글 네이버 다음에서 검색이 되어야 사용자의 유입이 상승합니다.hexo의 경우 플러그인이 잘 되어있기 때문에 쉽게 할 수 있습니다.검색엔진 최적화(seo)하기 위해 몇가지 설정을 하겠습니다. 플러그인리스트 hexo-autonofollow hexo-auto-canonical hexo-generator-seo-friendly-sitemap hexo-generator-feed hexo-generator-robotstxt 플러그인 설치 및 설정하기hexo-autonofollow해당 포스트에서 참고하고 있는 외부링크에 nofollw 속성을 자동으로 추가해줍니다. 설치 - npm install hexo-autonofollow --save 설정 - 프로젝트 루트의 _config.yml 파일에 아래 내용을 추가합니다. 12345nofollow: enable: true exclude: - exclude_1.com - exclude_2.com hexo-auto-canonical메타 태그 중 canonical 속성을 대표 URL을 뜻합니다.각 포스트마다 자동으로 표준 링크를 만들어 줍니다. 설치 - 플러그인을 설치합니다.npm install --save hexo-auto-canonical 설정 - hueman 테마의 경우 테마내부에 layout/common/head.ejs파일의 42번째줄 &lt;%- meta(page) %&gt;바로 밑에&lt;%- autoCanonical(config, page) %&gt;을 추가해줍니다. hexo-generator-seo-friendly-sitemap사이트 맵을 제출하면 크롤러가 효율적으로 크롤링을 할 수 있습니다.자동으로 sitemap.xml을 생성해 줍니다. 구글/네이버등 크롤러설정에 필요합니다. 설치 - npm install hexo-generator-seo-friendly-sitemap --save 설정 - 프로젝트 루트의 _config.yml 파일에 아래 내용을 추가합니다. 1234sitemap: path: sitemap.xml tag: false category: false path값을 지정한 루트폴더에 sitemap.xml이 생성됩니다.사이트주소/sitemap.xml 경로에서 확인 할 수 있습니다. 옵션 tag : sitemap에 tag 포함 여부를 결정합니다. category : sitemap에 category 포함 여부를 결정합니다. hexo-generator-feed자동으로 Atom 1.0또는 RSS2.0 피드를 생성해 줍니다. 설치 - npm install hexo-generator-feed --save 설정 - 프로젝트 루트의 _config.yml 파일에 아래 내용을 추가합니다. 1234feed: type: rss2 path: rss2.xml limit: 20 옵션 type : 피드의 종류 (atom/rss2) path : 피드가 생성될 경로 (Default: atom.xml/rss2.xml) limit : 최신 포스트의 개수 설정 (0 또는 false 입력 시 모든 포스트) hexo-generator-robotstxt자동으로 robots.txt 파일을 생성해 줍니다.설치 - npm install hexo-generator-robotstxt --save 설정 - 프로젝트 루트의 _config.yml 파일에 아래 내용을 추가합니다. 12345robotstxt: useragent: \"*\" allow: - / sitemap: https://&lt;username&gt;.github.io/sitemap.xml 검색엔진 설정Google Search Console구글에서 검색 노출을 높이기 위해서 검색엔진 설정을 하도록 하겠습니다.Google Search Console홈페이지로 접속합니다.구글 로그인이 되어있는상태에서 시작하기 버튼을 클릭합니다.사이트 설정이 나오면 블로그 도메인을 등록해줍니다.등록을 완료하고 사이드메뉴의 sitemaps를 선택해줍니다.이후에 rss2.xml 과 sitemap.xml을 제출합니다.간단하게 설정이 완료되었습니다. 네이버 웹마스터 도구네이버 검색엔진 최적화를 하겠습니다.네이버 웹마스터도구 사이트에 접속합니다. 네이버 로그인을 합니다.이후 웹마스터 도구를 클릭합니다.사이트추가에 네이버에 검색되고자하는 hexo 블로그 url을 입력하고 추가를 합니다. 그러면 사이트의 소유권을 확인하는 화면이 나옵니다.두번째 HTML태그를 선택하고 메타태그를 복사합니다.&lt;meta name=&quot;naver-site-verification&quot; content=&quot;...&quot;/&gt; 아까 저희가 메타태그를 등록했던 부분 테마내부에 layout/common/head.ejs파일을 엽니다.이후 다음과 같이 head바로 위에 붙여넣습니다. 123 //... &lt;meta name=&quot;naver-site-verification&quot; content=&quot;...&quot;/&gt;&lt;/head&gt; 등록이 완료되었다면 연동사이트 목록에서 사이트를 클릭하면 다음과같은 페이지가 나옵니다.왼쪽 사이드 메뉴에서 RSS 제출과 사이트맵 제출을 해줍니다. 요청&gt;RSS 제출https://&lt;sitename&gt;/rss2.xml요청&gt;사이트맵 제출sitemap.xml이렇게 네이버 사이트 등록이 완료되었습니다. 네이버 웹마스터 도구에서 간단하게 자신의 사이트 진단을 할 수 있습니다. 다음검색등록다음 검색의 경우 간단합니다.다음검색등록 페이지로 접속합니다.블로그 등록을 체크하고 도메인을 입력후 확인을 클릭하면 됩니다.이후 등록자 정보로 이메일을 입력을 합니다. 이것으로 검색엔진을 최적화하는 방법에 대해 알아보았습니다.다음,네이버,구글 세가지 설정하는데 번거로움이 있었지만 설정하게 되면 검색노출도가 높아지기 때문에 되도록 하는것을 추천합니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"hexo","slug":"etc/hexo","permalink":"http://flamingotiger.github.io/categories/etc/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://flamingotiger.github.io/tags/hexo/"}]},{"title":"가상데이터 JSONPlaceholder 사용법","slug":"etc/etc/jsonplaceholder","date":"2019-12-18T01:09:08.000Z","updated":"2021-04-30T03:36:18.271Z","comments":true,"path":"etc/etc/jsonplaceholder/","link":"","permalink":"http://flamingotiger.github.io/etc/etc/jsonplaceholder/","excerpt":"","text":"시작하기backend server가 없을때 임시로 가상 데이터를 만들어 api 테스트를 해볼수 있습니다. JSONPlaceholderJSONPlaceholder url을 통해 리소스를 불러올수 있습니다.JSONPlaceholder 홈페이지 APIJSONPlaceholder는 6가지의 기본 리소스를 가지고 있습니다. 123456/posts 100 posts/comments 500 comments/albums 100 albums/photos 5000 photos/todos 200 todos/users 10 users Api example 123456GET /postsGET /posts/1POST /postsPUT /posts/1PATCH /posts/1DELETE /posts/1 사용법axios, fetch등 http 콜을 통해서 데이터를 가져옵니다. App.tsx12345678910111213141516171819import React, &#123; useEffect &#125; from 'react';import axios from 'axios';const App: React.FC = () =&gt; &#123; useEffect(() =&gt; &#123; const fetchData = async () =&gt; &#123; try &#123; const &#123;data&#125; = await axios.get('https://jsonplaceholder.typicode.com/todos/1'); console.log(data); &#125; catch (e) &#123; console.log(e); &#125; &#125; fetchData(); &#125;, []); return ( &lt;div className=\"App\"/&gt; )&#125; JSON server프로젝트 내부에 Json placeholder 데이터를 저장할수 있습니다. 설치하기npm install -g json-server 사용법프로젝트에서 서버를 켜줍니다. 1json-server --watch db.json --port 8000 –port 8000 옵션은 db 서버를 8000번 포트로 설정해줍니다. api 콜을할때 8000포트로 요청을 하면 됩니다.서버가 시작시 프로젝트에 db.json파일이 생성됩니다. db.json12345678910111213141516171819&#123; \"posts\": [ &#123; \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" &#125; ], \"comments\": [ &#123; \"id\": 1, \"body\": \"some comment\", \"postId\": 1 &#125; ], \"profile\": &#123; \"name\": \"typicode\" &#125;&#125; api콜시에 db.json파일 내부의 값을 수정,삭제,추가등의 작업을 할수있습니다. App.tsx12345678910111213141516171819import React, &#123; useEffect &#125; from 'react';import axios from 'axios';const App: React.FC = () =&gt; &#123; useEffect(() =&gt; &#123; const fetchData = async () =&gt; &#123; try &#123; const &#123;data&#125; = await axios.get('http://localhost:8000/comments'); console.log(data); &#125; catch (e) &#123; console.log(e); &#125; &#125; fetchData(); &#125;, []); return ( &lt;div className=\"App\"/&gt; )&#125; JSONPlaceholder로 쉽게 api 테스트를 할수 있게 되었습니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"etc","slug":"etc/etc","permalink":"http://flamingotiger.github.io/categories/etc/etc/"}],"tags":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/tags/etc/"},{"name":"json","slug":"json","permalink":"http://flamingotiger.github.io/tags/json/"},{"name":"jsonplaceholder","slug":"jsonplaceholder","permalink":"http://flamingotiger.github.io/tags/jsonplaceholder/"},{"name":"restapi","slug":"restapi","permalink":"http://flamingotiger.github.io/tags/restapi/"}]},{"title":"날짜 라이브러리 moment.js 사용법","slug":"javascript/momentjs","date":"2019-12-17T13:11:42.000Z","updated":"2021-04-30T03:36:18.281Z","comments":true,"path":"javascript/momentjs/","link":"","permalink":"http://flamingotiger.github.io/javascript/momentjs/","excerpt":"","text":"시작하기날짜를 손쉽게 다룰수 있는 moment.js의 사용법을 알아보겠습니다. 설치하기라이브러리를 moment.min.js파일로 다운로드를 하거나npm i moment --save로 설치를 할 수 있습니다. 사용하기많이 사용하는 기능위주로 설명하겠습니다. 123import moment from 'moment';moment() // 현재날짜값을 가져옵니다. moment 객체로 반환이 되는데 이 값을 내가 원하는 포맷으로 바꾸기 위해서는 format 메소드를 이용해야 합니다. 날짜 지정하기1moment('2019-12-10', 'YYYY-MM-DD'); 첫번째인자로 지정하고 싶은 날짜와 두번째인자로 날짜의 포맷을 지정해주면 지정한 날짜의 Moment객체로 반환이 됩니다. Format 이용하기format()을 하면 moment객체에서 string으로 반환을 합니다. 123moment().format('YYYY-MM-DD'); // 년도-월-일moment().format('hh:mm:ss'); // 시:분:초moment().format('dddd'); // Tuesday 예제와 같이 편하고 자유롭게 변환할수 있습니다. 날짜 더하고 빼기현재의 날짜 혹은 정해진 날짜에서 몇일이후의 값, 몇달뒤의 값등 날짜를 더하거나 뺄수 있습니다. 123456import moment from 'moment';moment().add(1,'days') // 하루 더하기moment().subtract(1,'days') // 하루 빼기moment().add(1,'months') // 한달 더하기moment().subtract(1,'year') // 1년 빼기 add, subtract시에 주의할점1234const nowDate = moment('2019-12-10');const nextDate = nowDate.add(1,'days'); // 2019-12-11const prevDate = nowDate.subtract(4,'days'); // 2019-12-07console.log(nowDate); // 2019-12-07 원본인 nowDate가 수정되면서 원하던 값이 나오지 않습니다.이럴경우에는 clone()을 사용해줍니다. 1234const nowDate = moment('2019-12-10');const nextDate = nowDate.clone().add(1,'days'); // 2019-12-11const prevDate = nowDate.clone().subtract(4,'days'); // 2019-12-06console.log(nowDate); // 2019-12-10 날짜와 날짜를 비교하는 Query메소드의 사용방법을 알아보겠습니다. Query 메소드들boolean을 반환합니다. isBefore, isAfter두값이 이전 혹은 이후인지 비교합니다. 12345678// isBefore 첫번째 값이 두번째 값보다 이전인가?moment('2010-10-20').isBefore('2010-10-21'); // true // isAfter 첫번째 값이 두번째 값보다 이후인가?moment('2010-10-21').isAfter('2010-10-20'); // truemoment('2010-10-20').isBefore('2010-12-31', 'year'); // falsemoment('2010-10-20').isBefore('2011-01-01', 'year'); // true 두번째 인자로 연,월,일등 포맷을 넘겨 줄 수 있습니다. isSame두날짜가 같은지 비교합니다. 1moment('2010-10-20').isSame('2010-10-20'); // true isSameOrAfter, isSameOrBefore두값이 같거나 이전이거나, 두값이 같거나 이후인지 비교합니다. 123moment('2010-10-20').isSameOrBefore('2009-12-31', 'year'); // falsemoment('2010-10-20').isSameOrBefore('2010-12-31', 'year'); // truemoment('2010-10-20').isSameOrBefore('2011-01-01', 'year'); // true isBetween두값의 사이값이 맞는지 비교합니다. 1moment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true 자세한 내용은 공식문서를 참고해주세요.","categories":[{"name":"Js / Ts","slug":"Js-Ts","permalink":"http://flamingotiger.github.io/categories/Js-Ts/"},{"name":"lib","slug":"Js-Ts/lib","permalink":"http://flamingotiger.github.io/categories/Js-Ts/lib/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"moment","slug":"moment","permalink":"http://flamingotiger.github.io/tags/moment/"},{"name":"javascript","slug":"javascript","permalink":"http://flamingotiger.github.io/tags/javascript/"},{"name":"library","slug":"library","permalink":"http://flamingotiger.github.io/tags/library/"}]},{"title":"Postman 포스트맨 사용하기","slug":"etc/etc/postman","date":"2019-12-17T09:19:15.000Z","updated":"2021-04-30T03:36:18.271Z","comments":true,"path":"etc/etc/postman/","link":"","permalink":"http://flamingotiger.github.io/etc/etc/postman/","excerpt":"","text":"시작하기포스트맨은 api 를 테스트하기위해 사용하는 편리한 도구입니다.프론트엔드 백엔드 상관없이 모두 사용합니다. 설치포스트맨 다운로드 링크: https://www.getpostman.com/downloads/ 홈페이지로 들어가서 OS에 맞는 postman을 다운 받습니다. 로그인구글계정이 있는 관계로 구글 로그인으로 접속했습니다.기존값으로 화이트모드로 되어있는데 다크모드로 변경하였습니다. mac기준 postman &gt; Preferences을 접속하면 theme를 변경할수 있습니다. 사용법GET, POST, DELETE, PUT, OPTION, HEADER등 HTTP메소드를 지원합니다.HTTP메소드를 선택하고 call하고자하는 api url을 작성후 send하면 됩니다. 포스트맨에서 쿠키설정이 가능합니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"etc","slug":"etc/etc","permalink":"http://flamingotiger.github.io/categories/etc/etc/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"restapi","slug":"restapi","permalink":"http://flamingotiger.github.io/tags/restapi/"},{"name":"api","slug":"api","permalink":"http://flamingotiger.github.io/tags/api/"},{"name":"backend","slug":"backend","permalink":"http://flamingotiger.github.io/tags/backend/"}]},{"title":"React-i18next/i18n 다국어 적용하기","slug":"frontend/react/react-i18next","date":"2019-12-17T08:42:10.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-i18next/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-i18next/","excerpt":"","text":"시작하기웹사이트를 제작할때 다국어를 지원해야하는 경우가 있습니다.이때 사용하는 라이브러리로 i18n이 있습니다.의미로는 internationalization (“I18N”) / 국제화 라고합니다.i와 n사이에 18글자가 있어서 i18n 이라는 명칭입니다. 리액트 i18next를 연동해보도록 하겠습니다. 패키지 설치패키지를 설치합니다.npm install react-i18next i18next --save 이후 사용자 언어 탐지 및 로딩 변환이 필요한 경우를 위한 패키지를 설치하겠습니다.npm install i18next-xhr-backend i18next-browser-languagedetector --save i18next 초기설정src 폴더에 새폴더i18n를 만들어줍니다.i18n 폴더 내부에 en.json, ko.json, i18n.ts 세가지 파일을 만들어줍니다.이후 다음과 같이 설정합니다. 1234567891011121314151617// i18n/en.json&#123; &quot;hello&quot;: &quot;Hello World!&quot;, &quot;post&quot;: &#123; &quot;title&quot;: &quot;title&quot;, &quot;name&quot;:&quot;Hong&quot; &#125;&#125;// i18n/ko.json&#123; &quot;hello&quot;: &quot;헬로 월드!&quot;, &quot;post&quot;: &#123; &quot;title&quot;: &quot;타이틀&quot;, &quot;name&quot;:&quot;홍&quot; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142import i18n from 'i18next';import &#123; initReactI18next &#125; from 'source/_posts/redux/react-i18next';import Backend from 'i18next-xhr-backend';import LanguageDetector from 'i18next-browser-languagedetector';import ko from './i18n/ko.json';import en from './i18n/en.json';i18n // load translation using xhr -&gt; see /public/locales // learn more: https://github.com/i18next/i18next-xhr-backend .use(Backend) // detect user language // learn more: https://github.com/i18next/i18next-browser-languageDetector .use(LanguageDetector) // pass the i18n instance to react-i18next. .use(initReactI18next) // init i18next // for all options read: https://www.i18next.com/overview/configuration-options .init(&#123; fallbackLng: 'en', debug: true, resources: &#123; ko: &#123; lang: ko &#125;, en: &#123; lang: en &#125; &#125;, ns: ['lang'], interpolation: &#123; escapeValue: false, // not needed for react as it escapes by default &#125; &#125;);export default i18n; index.tsx파일에 i18n.ts를 추가합니다. 12345678910import React from \"\";import ReactDOM from \"react-dom\";import App from './App'; import './i18n';ReactDOM.render( &lt;App /&gt;, document.getElementById(\"root\")); 사용하기리액트의 서스펜스를 사용하지 않을때는 useTranslation의 두번째인자로 useSuspense:false를 인자로 넣어줍니다. 1234567891011121314// 서스펜스를 사용하지 않을때const I18nextComponent: React.FC = () =&gt; &#123; const [t, i18n] = useTranslation('lang', &#123; useSuspense: false &#125;); return &lt;div&gt; &lt;p&gt;&#123;t('hello')&#125;&lt;/p&gt; &lt;p&gt;&#123;t('post.title')&#125;&lt;/p&gt; &lt;p&gt;&#123;t('post.name')&#125;&lt;/p&gt; &lt;/div&gt;&#125;;// 서스펜스를 사용시//... const [t, i18n] = useTranslation('lang');//... Language 변경방법12345678910const I18nextComponent: React.FC = () =&gt; &#123; const [t, i18n] = useTranslation('lang', &#123; useSuspense: false &#125;); return &lt;div&gt; &lt;button onClick=&#123;() =&gt; i18n.changeLanguage('en')&#125;&gt;영어&lt;/button&gt; &lt;button onClick=&#123;() =&gt; i18n.changeLanguage('ko')&#125;&gt;한국어&lt;/button&gt; &lt;p&gt;&#123;t('hello')&#125;&lt;/p&gt; &lt;p&gt;&#123;t('post.title')&#125;&lt;/p&gt; &lt;p&gt;&#123;t('post.name')&#125;&lt;/p&gt; &lt;/div&gt;&#125;; i18n.changeLanguage()를 이용합니다.i18n.ts에서 설정한 옵션의 resources 이름을 넣어줍니다. 작은 팁디버깅모드를 개발자모드에서만 하고 싶다면 다음과 같이 설정합니다. 123456// ... .init(&#123; //... debug: process.env.NODE_ENV === 'development', //...// ... 이전 포스트를 참조 하시면 더욱 간결하게 설정할수 있습니다.환경변수 이용하기","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"},{"name":"i18n","slug":"i18n","permalink":"http://flamingotiger.github.io/tags/i18n/"},{"name":"i18next","slug":"i18next","permalink":"http://flamingotiger.github.io/tags/i18next/"},{"name":"react-i18next","slug":"react-i18next","permalink":"http://flamingotiger.github.io/tags/react-i18next/"}]},{"title":"React에서 Fontawesome 사용하기","slug":"frontend/react/react-fontawesome","date":"2019-12-16T06:28:38.000Z","updated":"2021-04-30T03:36:18.279Z","comments":true,"path":"frontend/react/react-fontawesome/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/react-fontawesome/","excerpt":"","text":"시작하기고해상도의 아이콘을 손쉽게 사용할수 있는 라이브러리입니다.리액트에서 fontawesome을 사용하겠습니다. 패키지 설치React-fontawesome 패키지를 설치합니다.react-fontawesome npm npm i --save @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome 사용하기Fontawesome사이트에서 사용할 아이콘을 선택합니다. 아이콘의 이름을 기억합니다. 12345678910// App.tsximport &#123; FontAwesomeIcon &#125; from '@fortawesome/react-fontawesome'import &#123; faCoffee &#125; from '@fortawesome/free-solid-svg-icons'library.add(faCoffee)// Component.tsxconst Component:React.FC = () =&gt; &#123; return &lt;FontAwesomeIcon icon=\"coffee\"/&gt; &#125; App.tsx 최상단파일에 사용할 아이콘을 @fortawesome/free-solid-svg-icons에서 불러오고아이콘을 library.add 에 추가합니다.그러면 자식 컴포넌트에서 아이콘을 사용할수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"svg","slug":"svg","permalink":"http://flamingotiger.github.io/tags/svg/"},{"name":"css","slug":"css","permalink":"http://flamingotiger.github.io/tags/css/"},{"name":"style","slug":"style","permalink":"http://flamingotiger.github.io/tags/style/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"},{"name":"fontawesome","slug":"fontawesome","permalink":"http://flamingotiger.github.io/tags/fontawesome/"}]},{"title":"create-react-app에서 env/환경변수 사용하기","slug":"frontend/react/create-react-app-environment","date":"2019-12-16T05:47:21.000Z","updated":"2021-04-30T03:36:18.277Z","comments":true,"path":"frontend/react/create-react-app-environment/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/create-react-app-environment/","excerpt":"","text":"시작하기환경변수를 사용해야하는 경우가 있습니다.Redux devtool을 예로 들수있습니다. 개발자의 경우에는 디버깅시에 필요하지만 사용자는 보면 안되는 데이터가 있을수 있습니다.production 과 development에 따라 구분해서 보여줄 필요가 있습니다. create react app은 환경변수를 사용하기 위해서 dotenv(https://www.npmjs.com/package/dotenv) 모듈을 사용하고 있습니다. env 파일 구성env파일은 프로젝트 루트에 존재해야합니다. 12345678.env: 기본 파일..env.local: .env를 덮어쓰는 파일. Test를 제외한 모든 환경에서 로딩됩니다..env.development: 개발자 환경에서 로딩.env.test: 테스트 환경에서 로딩.env.production: 프로덕션 환경에서 로딩.env.development.local, .env.test.local, .env.production.local: 각각 env.* 를 덮어쓰는 파일입니다. env 실행 우선순위왼쪽이 오른쪽보다 우선순위가 높습니다. 123npm start: .env.development.local &gt; .env.development &gt; .env.local &gt; .envnpm run build: .env.production.local &gt; .env.production &gt; .env.local, .envnpm test: .env.test.local &gt; .env.test &gt; .env (note .env.local is missing) 사용예시Create react app에서는 변수명앞에 무조건 REACT_APP_가 있어야 인식을 합니다.사용하지 않을시 변수를 무시합니다. 12345678// .env.developmentREACT_APP_URL= &quot;http://localhost:3000&quot;// .env.productionREACT_APP_URL= &quot;http://localhost:4000&quot;// 사용시&lt;a href=&#123;process.env.REACT_APP_URL&#125;&#125;&gt;URL&lt;/a&gt; 현재 상태를 구분하기 쉬운 NODE_ENV 12345678910111213141516const &#123; NODE_ENV &#125; = process.env as &#123;[key as string]: string&#125;// 환경변수의 경우 반환값이 항상 string입니다.const isPro = NODE_ENV === &apos;production&apos;;const isDev = NODE_ENV === &apos;development&apos;;const isTest = NODE_ENV === &apos;test&apos;;if(isDev)&#123; // 개발자 모드&#125;else if(isPro)&#123; //프로덕션 모드&#125;else if(isTest)&#123; //테스트 모드&#125;else&#123; // 에러!!&#125; 이런 방식으로 사용할수 있습니다. 자세한 내용은 create-react-app docs: Adding Custom Environment Variables에서 확인 할 수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"}]},{"title":"Axios get progress (react + redux + axios)","slug":"frontend/axios/axios-get-progress","date":"2019-12-14T07:00:12.000Z","updated":"2021-04-30T03:36:18.276Z","comments":true,"path":"frontend/axios/axios-get-progress/","link":"","permalink":"http://flamingotiger.github.io/frontend/axios/axios-get-progress/","excerpt":"","text":"시작하기React에서 백엔드와 통신하기 위해서 fetch, axios등을 이용합니다.axios에서 데이터파일 post혹은 get을 지원하지만,request와 response 진행상황에 대한 progress는 지원하지 않습니다.그러기에 axios, react, redux를 이용하여 api의 진행상황을 나타내는 컴포넌트를 만들어 보겠습니다. axiosProgress.ts Reducer 생성src/store/modules폴더 내부에 리듀서를 생성합니다.axios가 시작될때 끝났을때 초기화시켜주는 액션을 작성합니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import &#123; action, ActionType, createReducer &#125; from 'typesafe-actions';const START_PROGRESS = `AXIOS_PROGRESS/START`;const FINISH_PROGRESS = `AXIOS_PROGRESS/FINISH`;const RESET_PROGRESS = `AXIOS_PROGRESS/RESET`;const startProgress = (progress: number) =&gt; action(START_PROGRESS, &#123; progress &#125;);const finishProgress = () =&gt; action(FINISH_PROGRESS);const resetProgress = () =&gt; action(RESET_PROGRESS);const actionCreator = &#123; startProgress, finishProgress, resetProgress&#125;;export &#123; START_PROGRESS, FINISH_PROGRESS, RESET_PROGRESS, startProgress, finishProgress, resetProgress, actionCreator&#125;export interface ProgressState &#123; progress: number; isLoading: boolean;&#125;export type ProgressAction = ActionType&lt;typeof actionCreator&gt;;const initialState: ProgressState = &#123; progress: 0, isLoading: false,&#125;;export default createReducer&lt;ProgressState, ProgressAction&gt;(initialState, &#123; [START_PROGRESS]: (state, action) =&gt; &#123; return &#123; ...state, isLoading: true, progress: action.payload.progress &#125; &#125;, [FINISH_PROGRESS]: state =&gt; &#123; return &#123; ...state, isLoading: false, progress: 100 &#125; &#125;, [RESET_PROGRESS]: state =&gt; &#123; return &#123; ...state, isLoading: false, progress: 0 &#125; &#125;&#125;) progressAxios.ts 생성axios를 request할때와 response시에 intercept해서 store를 통해 액션을 dispatch합니다.재귀함수를 통해 setTimeout을 반복적으로 호출해줍니다.progress가 100이 되거나 넘을시에는 finish액션을 호출하여 100으로 고정하고완료시에 reset액션을 통해서 초기화시켜줍니다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import axios from 'axios';import store from 'store/configureStore';import &#123; actionCreator &#125; from 'store/modules/axiosProgress';const progressAxios = axios.create();progressAxios.defaults.timeout = 3000;let progress = 0; // 0 ~ 100, request percentlet timerId: NodeJS.Timeout | null = null; // timer idexport const progressSpeed = 500;const setProgress = (value: number): void =&gt; &#123; progress = value; store.dispatch(actionCreator.startProgress(value)); if (value === 100) &#123; store.dispatch(actionCreator.finishProgress()); setTimeout(() =&gt; store.dispatch(actionCreator.resetProgress()), progressSpeed); &#125;&#125;;const timer = (): void =&gt; &#123; if (progress &lt; 100) &#123; const diff = 100 - progress; const inc = diff / (10 + progress * (1 + progress / 100)) // increment setProgress(progress + inc); &#125; timerId = setTimeout(timer, 50); // 50 ms&#125;;progressAxios.interceptors.request.use(config =&gt; &#123; setProgress(0); timer(); return config;&#125;, error =&gt; &#123; store.dispatch(actionCreator.resetProgress()); return Promise.reject(error);&#125;);progressAxios.interceptors.response.use(response =&gt; &#123; if (timerId) &#123; clearTimeout(timerId); timerId = null; &#125; setProgress(100); return response;&#125;, error =&gt; &#123; store.dispatch(actionCreator.resetProgress()); return Promise.reject(error);&#125;);export default progressAxios; 컴포넌트와 연동하기axiosProgress를 이용해서 react 컴포넌트와 연동하겠습니다. ProgressBar.tsx 셍성1234567891011121314151617import React from 'react';import &#123; useSelector &#125; from 'react-redux';import &#123; RootState &#125; from \"store/rootReducer\";import &#123; progressSpeed &#125; from \"api/axios\";import './progress.css';const ProgressBar = () =&gt; &#123; const state = useSelector((state: RootState) =&gt; state.axiosProgress); return (&lt;div className=\"progress-bar-wrapper\" style=&#123;&#123; transition: `$&#123;progressSpeed&#125;ms`, height: state.isLoading ? '4px' : '0px' &#125;&#125;&gt; &lt;div className=\"progress-bar\" style=&#123;&#123;width: `$&#123;state.progress&#125;%`&#125;&#125;/&gt; &lt;/div&gt;)&#125;export default ProgressBar; progress를 나타내고 숨겨주는 애니메이션을 구현할 wrapper와progress를 보여줄 progress-bar로 나눕니다. height는 로딩시에는 4px로, 로딩이 다되면 0px으로 숨겨주는 역할을합니다.width는 api 진행상황을 %로 보여줍니다 12345678910111213.progress-bar-wrapper &#123; position: fixed; width: 100%; height: 4px; z-index: 9999; top: 0; left: 0;&#125;.progress-bar &#123; position: absolute; height: 100%; background: red;&#125; 스타일은 간단하게 표현합니다.커스터마이징이 가능합니다. 사용하기12345678910111213import React from 'react';import './App.css';import ProgressBar from './component/ProgressBar';const App: React.FC = () =&gt; &#123; return ( &lt;div className=\"App\"&gt; &lt;ProgressBar/&gt; &lt;/div&gt; );&#125;export default App; ProgressBar 컴포넌트를 불러옵니다. 1234567891011121314//...import progressAxios from 'api/axios';const App: React.FC = () =&gt; &#123; React.useEffect(() =&gt; &#123; progressAxios('https://jsonplaceholder.typicode.com/todos') &#125;,[]) return ( &lt;div className=\"App\"&gt; &lt;ProgressBar/&gt; &lt;/div&gt; );&#125;//... axios와 사용방법은 같습니다.테스트를 위해 jsonplaceholder를 이용해보겠습니다. 1234567891011121314151617181920212223//...import progressAxios from 'api/axios';const App: React.FC = () =&gt; &#123; const [todos,setTodos] = React.useState([&#123;id:0, userId:0, title:''&#125;]); const getData = async () =&gt; &#123; try&#123; const res = await progressAxios('https://jsonplaceholder.typicode.com/todos'); setTodos(res.data); &#125; catch(e)&#123; console.log(e); &#125; &#125; return ( &lt;div className=\"App\"&gt; &lt;ProgressBar/&gt; &lt;button type='button' onClick=&#123;() =&gt; getData()&#125;&gt;GET DATAS&lt;/button&gt; &#123;todos.map((todo:any) =&gt; &lt;p key=&#123;todo.id&#125;&gt;&#123;todo.title&#125;&lt;/p&gt;)&#125; &lt;/div&gt; );&#125;//... 결과이것으로 axios get progress를 구현해보았습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"axios","slug":"frontend/axios","permalink":"http://flamingotiger.github.io/categories/frontend/axios/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"axios","slug":"axios","permalink":"http://flamingotiger.github.io/tags/axios/"},{"name":"redux","slug":"redux","permalink":"http://flamingotiger.github.io/tags/redux/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"}]},{"title":"Redux에 typesafe-actions 적용하기","slug":"frontend/redux/typesafe-actions","date":"2019-12-14T04:11:12.000Z","updated":"2021-04-30T03:36:18.280Z","comments":true,"path":"frontend/redux/typesafe-actions/","link":"","permalink":"http://flamingotiger.github.io/frontend/redux/typesafe-actions/","excerpt":"","text":"들어가면서기존에 redux actions룰 사용해왔었는데, 이번에 타입스크립트를 도입하게되면서사용할수록 타입정의에 번거로움을 느꼇습니다.그래서 타입정의를 용이하게 해주는 typesafe-actions으로 변경하였습니다. 기본 리덕스 초기 셋팅이 되어있는 상태에서 진행하도록 하겠습니다.counter 예제를 만들어 보도록 하겠습니다. 시작하기npm i typesafe-actions로 패키지를 설치합니다. counter.ts 리듀서 생성액션과 액션 생성자, 리듀서를 작성합니다.ActionType을 이용하면 액션생성자의 타입을 가져올수있습니다.리듀서의 Action타입정의가 한줄로 간편해집니다. 123456789101112131415161718192021222324252627282930313233import &#123; action, ActionType, createReducer &#125; from 'source/_posts/frontend/redux/typesafe-actions';const INCREMENT = 'COUNTER/INCREMENT';const DECREMENT = 'COUNTER/DEREMENT';const onIncrement = () =&gt; action(INCREMENT);const onDecrement = () =&gt; action(DECREMENT);const actionCreator = &#123; onIncrement, onDecrement&#125;;export &#123; INCREMENT, DECREMENT, onIncrement, onDecrement, actionCreator &#125;;export interface CounterState &#123; count:number;&#125;export type CounterAction = ActionType&lt;typeof actionCreator&gt;;const initialState: CounterState = &#123; count:0&#125;;export default createReducer&lt;CounterState, CounterAction&gt;(initialState, &#123; [INCREMENT]: (state) =&gt; &#123; return &#123; ...state, counter: state.count + 1 &#125; &#125;, [DECREMENT]: state =&gt; &#123; return &#123; ...state, counter: state.count - 1 &#125; &#125;&#125;); rootReducer.tsrootReducer.ts 에서 counter리듀서 불러옵니다.이것으로 counter를 사용할 준비가 끝났습니다. 12345678910import &#123;combineReducers&#125; from 'redux';import counter from './modules/counter';const rootReducers = combineReducers(&#123; counter&#125;);export default rootReducers;export type RootState = ReturnType&lt;typeof rootReducers&gt;; Counter 컴포넌트작성12345678910import React from 'react';const Counter:React.FC = () =&gt; &#123; return (&lt;div&gt; &lt;p&gt;0&lt;/p&gt; &lt;button type=\"button\"&gt;Increment&lt;/button&gt; &lt;button type=\"button\"&gt;Decrement&lt;/button&gt; &lt;/div&gt;);&#125;export default Counter; react-redux에서 제공하는 훅스를 이용하여 리덕스와 컴포넌트를 연동합니다. 123456789101112131415import React from 'react';import &#123;useSelector, useDispatch&#125; from 'react-redux';import &#123; RootState &#125; from '../store/rootReducer';import &#123; onIncrement, onDecrement &#125; from '../store/modules/counter';const Counter:React.FC = () =&gt; &#123; const state = useSelector((state:RootState) =&gt; state.counter); const dispatch = useDispatch(); return (&lt;div&gt; &lt;p&gt;&#123;state.count&#125;&lt;/p&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; dispatch(onIncrement())&#125;&gt;Increment&lt;/button&gt; &lt;button type=\"button\" onClick=&#123;() =&gt; dispatch(onDecrement())&#125;&gt;Decrement&lt;/button&gt; &lt;/div&gt;);&#125;export default Counter; 이슈typesafe-actions를 설치한이후 콘솔에서 warning과 함께 느리게 서버가 켜지는 경우 해결방법으로는 typesafe-actions의 버전을 4.X 이하로 다운그레이드를 하거나typescript를 3.7.X 이상으로 업데이트 하면 해결됩니다.create-react-app을 사용하는경우 react-scripts 또한 3.3.X 이상으로 업데이트 해주면 됩니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"redux","slug":"frontend/redux","permalink":"http://flamingotiger.github.io/categories/frontend/redux/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"redux","slug":"redux","permalink":"http://flamingotiger.github.io/tags/redux/"}]},{"title":"Redux에 초기설정","slug":"frontend/redux/redux-setting","date":"2019-12-14T03:37:39.000Z","updated":"2021-04-30T03:36:18.280Z","comments":true,"path":"frontend/redux/redux-setting/","link":"","permalink":"http://flamingotiger.github.io/frontend/redux/redux-setting/","excerpt":"","text":"들어가면서리액트의 데이터를 전역적으로 관리하기 위해 사용합니다.함수를 props의 props의 props등.. 계속 내리고 올리는 방법으로 사용하게되면 디버깅을 할때 복잡해질 뿐만아니라에러를 발생시킬수 있는 요인이 됩니다. 그러하기 때문에 리덕스를 사용하려고 합니다.리덕스를 간단하게 만화로 이해하기 시작하기파일 구조src/store 리덕스 폴더입니다.src/store/modules 리듀서파일들이 저장되어있는 폴더입니다.src/store/configure.ts 리덕스 초기 설정 및 store를 export 해주는 파일입니다.src/store/rootReducer.ts 리듀서들을 합쳐주는 파일입니다. 설치리덕스 패키지를 설치해줍니다npm i redux react-redux @types/redux @types/react-redux rootReducer.ts 파일생성modules에서 리듀서를 작성후 combineReducers 내부에 추가해줍니다. 12345import &#123; combineReducers &#125; from 'redux';const rootReducer = combineReducers(&#123;&#125;);export default rootReducer; configure.ts 파일생성기본설정123456789101112131415import &#123; applyMiddleware, compose, createStore, Middleware, Store &#125; from 'redux';import rootReducer from './rootReducer';const isDev = process.env.NODE_ENV === 'development';const configureStore = ():Store =&gt; &#123; const middleware: Array&lt;Middleware&gt; = []; const config = createStore(rootReducer, applyMiddleware(...middleware)); return config;&#125;;const store = configureStore();export default store; const isDev = process.env.NODE_ENV === &#39;development&#39;;isDev는 환경변수를 이용해서 현재 서버가 개발자모드인지 프로덕션모드인지 구분해줍니다. Redux devTools 및 미들웨어 적용12345678910// ...const configureStore = ():Store =&gt; &#123; const composeEnhancers = (isDev &amp;&amp; (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose; const middleware: Array&lt;Middleware&gt; = []; const config = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware))); return config;&#125;;// ... const middleware: Array&lt;Middleware&gt; = [];middleware 변수안의 배열에 리덕스의 미들웨어들(redux-saga, redux-thunk…)을 추가해주면 됩니다. Redux hotloader 추가하기12345678910111213141516// ...const configureStore = ():Store =&gt; &#123; // ... // Hot reload reducers: // https://github.com/reactjs/react-redux/releases/tag/v2.0.0 if (isDev &amp;&amp; (module as any).hot) &#123; (module as any).hot.accept('./rootReducer', () =&gt; &#123; const nextRootReducer = require('./rootReducer').default; store.replaceReducer(nextRootReducer); &#125;); &#125; return config;&#125;;//... 최종코드12345678910111213141516171819202122232425import &#123; applyMiddleware, compose, createStore, Middleware, Store &#125; from 'redux';import rootReducer from './rootReducer';const isDev = process.env.NODE_ENV === 'development';const configureStore = ():Store =&gt; &#123; const composeEnhancers = (isDev &amp;&amp; (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose; const middleware: Array&lt;Middleware&gt; = []; const config = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware))) // Hot reload reducers: // https://github.com/reactjs/react-redux/releases/tag/v2.0.0 if (isDev &amp;&amp; module.hot) &#123; module.hot.accept('./rootReducer', () =&gt; &#123; const nextRootReducer = require('./rootReducer').default; store.replaceReducer(nextRootReducer); &#125;); &#125; return config;&#125;;const store = configureStore();export default store; index.tsx파일 수정index.tsx파일에 App 컴포넌트를 Provider로 감싸줍니다.Provider로 감싸주어야 provider 내부에 있는 컴포넌트에서 store의 값을 사용할 수 있게 됩니다.Provider에 configureStore 설정을 넘겨줍니다. 12345678910111213141516import React from 'react';import ReactDOM from 'react-dom';import './index.css';import App from './App';import * as serviceWorker from './serviceWorker';import store from './store/configureStore';import &#123;Provider&#125; from 'react-redux';ReactDOM.render(&lt;Provider store=&#123;store&#125;&gt; &lt;App /&gt;&lt;/Provider&gt;, document.getElementById('root'));// If you want your app to work offline and load faster, you can change// unregister() to register() below. Note this comes with some pitfalls.// Learn more about service workers: https://bit.ly/CRA-PWAserviceWorker.unregister(); 이제 초기 셋팅은 끝났습니다. 리듀서를 추가하면 리덕스를 사용할수 있습니다.","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"redux","slug":"frontend/redux","permalink":"http://flamingotiger.github.io/categories/frontend/redux/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://flamingotiger.github.io/tags/typescript/"},{"name":"redux","slug":"redux","permalink":"http://flamingotiger.github.io/tags/redux/"}]},{"title":"구글 애널리틱스 on Hexo","slug":"etc/google/google-analytics","date":"2019-12-09T08:11:05.000Z","updated":"2021-04-30T03:36:18.272Z","comments":true,"path":"etc/google/google-analytics/","link":"","permalink":"http://flamingotiger.github.io/etc/google/google-analytics/","excerpt":"","text":"구글 애널리틱스 시작하기웹사이트의 트래픽관리등을 위해 hexo에 구글 애널리틱스를 적용하였습니다. 로그인https://analytics.google.com/구글 애널리틱스 사이트로 접속해서 로그인을 합니다. 이후 무료로 계정만들기를 선택합니다.구글 애널리틱스 사용을 위해 필요한 약관에 동의를 합니다. 파일 수정약관동의 이후 첫화면에 추적 ID ex)영어-숫자-숫자를 확인할 수 있습니다. 복사를 합니다.다른 창으로 이동했거나 분실시 왼쪽하단의 설정 아이콘 클릭후 추적정보 &gt; 추적코드에서 확인 할 수 있습니다. hexo프로젝트 테마 내부의 _config.yml 파일열고,구글 애널리틱스 사이트에 있었던 추적 ID를 붙여넣기 합니다. 확인붙여넣기이후 왼쪽 사이드바의 실시간 &gt; 개요에서 확인이 가능합니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"google","slug":"etc/google","permalink":"http://flamingotiger.github.io/categories/etc/google/"}],"tags":[{"name":"google","slug":"google","permalink":"http://flamingotiger.github.io/tags/google/"}]},{"title":"hexo 테마 설치","slug":"etc/hexo/hexo-theme","date":"2019-12-09T07:17:38.000Z","updated":"2021-04-30T03:36:18.272Z","comments":true,"path":"etc/hexo/hexo-theme/","link":"","permalink":"http://flamingotiger.github.io/etc/hexo/hexo-theme/","excerpt":"","text":"Hexo 테마 설치하기hexo을 설치할시 기본적으로 landscape 테마가 설치 되어있습니다.hueman 테마를 설치할 예정입니다.Demo site : https://blog.zhangruipeng.me/hexo-theme-huemanGithub : https://github.com/ppoffice/hexo-theme-hueman 서브모듈을 이용해서 설치하기$ git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman다른 블로그를 확인해보면 대부분 이렇게 설치를 합니다.하지만 테마파일이 깃허브에 올라가지 않는 오류가 있었습니다. 해결방법은 다음과 같습니다.$ git submodule add https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman혹은$ git clone https://github.com/ppoffice/hexo-theme-hueman.git클론 내부 파일을 잘라내기로 가져오는 방법이 있습니다. 테마설치가 끝나면 hueman 테마에서 사용하는 내부 검색 플로그인을 설치 합니다.$ npm install -S hexo-generator-json-content 기본 환경설정루트폴더에있는 hexo 환경설정파일 _config.yml 에서 Theme: landscape을 hueman 으로 수정합니다theme: hueman hueman테마 환경설정 파일themes/hueman 폴더안의 _config.yml.example이라는 파일이 있습니다.파일이름을 _config.yml 로 변경합니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"hexo","slug":"etc/hexo","permalink":"http://flamingotiger.github.io/categories/etc/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://flamingotiger.github.io/tags/hexo/"}]},{"title":"hexo 초기 설정","slug":"etc/hexo/hexo-setup","date":"2019-12-09T06:46:08.000Z","updated":"2021-04-30T03:36:18.272Z","comments":true,"path":"etc/hexo/hexo-setup/","link":"","permalink":"http://flamingotiger.github.io/etc/hexo/hexo-setup/","excerpt":"","text":"Hexo 블로그 시작하기hexohexo를 통해 간편하게 블로그를 만들 수 있습니다. 커멘드라인으로 간단하게 포스트를 생성할수 있습니다. 마크다운을 지원합니다. SEO 갬색이 용이하며, 다양한 테마를 지원합니다. npm를 사용합니다. 깃헙페이지로 호스팅가능합니다. 설치방법커맨드에서 다음을 입력합니다.$ npm install -g hero-cli 기본설정블로그 프로젝트를 생성 하겠습니다.$ hexo init blog$ cd blog$ npm install 로컬서버를 띄워 블로그를 확인해 볼 수 있습니다.","categories":[{"name":"etc","slug":"etc","permalink":"http://flamingotiger.github.io/categories/etc/"},{"name":"hexo","slug":"etc/hexo","permalink":"http://flamingotiger.github.io/categories/etc/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://flamingotiger.github.io/tags/hexo/"}]},{"title":"create-react-app 타입스크립트 사용하기","slug":"frontend/react/create-react-app","date":"2019-12-08T06:38:19.000Z","updated":"2021-04-30T03:36:18.277Z","comments":true,"path":"frontend/react/create-react-app/","link":"","permalink":"http://flamingotiger.github.io/frontend/react/create-react-app/","excerpt":"","text":"설치하기리액트 프로젝트를 시작하기 위해서는 바벨, 웹팩등을 설정해야합니다.초기 설정에 많은 시간이 걸립니다.create-react-app을 통해 초기 설정 시간을 단축 할 수 있습니다.리액트의 사용법은 리액트 공식문서를 통해 배울수 있습니다. 123npx create-react-app my-app --typescriptcd my-appnpm run start 사용방법npm run start을 하면 프로젝트가 시작되며 연동되어 있는 웹브라우저에서 접속됩니다.다음과 같은 페이지가 나올경우 성공한것입니다. 기본 url은 http://locahost:3000입니다. 폴더 및 파일 용도 eject 를 할시에 숨겨져있던 웹팩, 스크립트등의 파일이 생성됩니다.웹팩이나 바벨등의 설정을 커스텀 할 것이 아니라면 되도록 npm run eject를 사용하지 않는 것이 좋습니다. src소스 파일을 저장하는 장소입니다.컴포넌트, 컨테이너, 리덕스 모듈등은 여기서 관리합니다. scriptseject 시에만 보입니다.package.json에서 사용하는 scripts의 파일입니다. configeject 시에만 보입니다.웹팩 설정이 첨부 되어있는 폴더 입니다. package.jsonnpm 패키지 설치 리스트 및 프로젝트 정보가 저장되어있는 파일입니다. node_modulespackage.json 의 패키지 파일이 실제로 저장되어 있는 폴더입니다. 시작 오류node_modules폴더를 삭제후 다시 설치 npm install 을 합니다. SCSS 오류최신 create react app 버전 이라면 scss 가 자동으로 설정되어 있습니다. import styles from &#39;./stylesheets.scss&#39; 이런식의 파일을 불러올때 styles 부분에 빨간밑줄이 나오는 경우가 있습니다.react-app-env.d.ts 파일에 아래부분의 내용을 추가하면 정상 작동합니다. 123456789declare module '*.scss' &#123; const classes: &#123; [key: string]: string &#125;; export default classes;&#125;declare module '*.sass' &#123; const classes: &#123; [key: string]: string &#125;; export default classes;&#125;","categories":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/categories/frontend/"},{"name":"react","slug":"frontend/react","permalink":"http://flamingotiger.github.io/categories/frontend/react/"}],"tags":[{"name":"frontend","slug":"frontend","permalink":"http://flamingotiger.github.io/tags/frontend/"},{"name":"react","slug":"react","permalink":"http://flamingotiger.github.io/tags/react/"},{"name":"create-react-app","slug":"create-react-app","permalink":"http://flamingotiger.github.io/tags/create-react-app/"}]}]}